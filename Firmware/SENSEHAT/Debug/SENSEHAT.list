
SENSEHAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006200  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b0  080063b0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080063b0  080063b0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063b0  080063b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080063b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000078  08006430  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006430  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014326  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b8  00000000  00000000  000343c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00036d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00037ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014448  00000000  00000000  00038ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016307  00000000  00000000  0004d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079e53  00000000  00000000  00063647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd49a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  000dd4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080062a8 	.word	0x080062a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080062a8 	.word	0x080062a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_fadd>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	46c6      	mov	lr, r8
 8000248:	0243      	lsls	r3, r0, #9
 800024a:	0a5b      	lsrs	r3, r3, #9
 800024c:	024e      	lsls	r6, r1, #9
 800024e:	0045      	lsls	r5, r0, #1
 8000250:	004f      	lsls	r7, r1, #1
 8000252:	00da      	lsls	r2, r3, #3
 8000254:	0fc4      	lsrs	r4, r0, #31
 8000256:	469c      	mov	ip, r3
 8000258:	0a70      	lsrs	r0, r6, #9
 800025a:	4690      	mov	r8, r2
 800025c:	b500      	push	{lr}
 800025e:	0e2d      	lsrs	r5, r5, #24
 8000260:	0e3f      	lsrs	r7, r7, #24
 8000262:	0fc9      	lsrs	r1, r1, #31
 8000264:	09b6      	lsrs	r6, r6, #6
 8000266:	428c      	cmp	r4, r1
 8000268:	d04b      	beq.n	8000302 <__aeabi_fadd+0xbe>
 800026a:	1bea      	subs	r2, r5, r7
 800026c:	2a00      	cmp	r2, #0
 800026e:	dd36      	ble.n	80002de <__aeabi_fadd+0x9a>
 8000270:	2f00      	cmp	r7, #0
 8000272:	d061      	beq.n	8000338 <__aeabi_fadd+0xf4>
 8000274:	2dff      	cmp	r5, #255	; 0xff
 8000276:	d100      	bne.n	800027a <__aeabi_fadd+0x36>
 8000278:	e0ad      	b.n	80003d6 <__aeabi_fadd+0x192>
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	04db      	lsls	r3, r3, #19
 800027e:	431e      	orrs	r6, r3
 8000280:	2a1b      	cmp	r2, #27
 8000282:	dc00      	bgt.n	8000286 <__aeabi_fadd+0x42>
 8000284:	e0d3      	b.n	800042e <__aeabi_fadd+0x1ea>
 8000286:	2001      	movs	r0, #1
 8000288:	4643      	mov	r3, r8
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	0143      	lsls	r3, r0, #5
 800028e:	d400      	bmi.n	8000292 <__aeabi_fadd+0x4e>
 8000290:	e08c      	b.n	80003ac <__aeabi_fadd+0x168>
 8000292:	0180      	lsls	r0, r0, #6
 8000294:	0987      	lsrs	r7, r0, #6
 8000296:	0038      	movs	r0, r7
 8000298:	f000 fcf6 	bl	8000c88 <__clzsi2>
 800029c:	3805      	subs	r0, #5
 800029e:	4087      	lsls	r7, r0
 80002a0:	4285      	cmp	r5, r0
 80002a2:	dc00      	bgt.n	80002a6 <__aeabi_fadd+0x62>
 80002a4:	e0b6      	b.n	8000414 <__aeabi_fadd+0x1d0>
 80002a6:	1a2d      	subs	r5, r5, r0
 80002a8:	48b3      	ldr	r0, [pc, #716]	; (8000578 <__aeabi_fadd+0x334>)
 80002aa:	4038      	ands	r0, r7
 80002ac:	0743      	lsls	r3, r0, #29
 80002ae:	d004      	beq.n	80002ba <__aeabi_fadd+0x76>
 80002b0:	230f      	movs	r3, #15
 80002b2:	4003      	ands	r3, r0
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d000      	beq.n	80002ba <__aeabi_fadd+0x76>
 80002b8:	3004      	adds	r0, #4
 80002ba:	0143      	lsls	r3, r0, #5
 80002bc:	d400      	bmi.n	80002c0 <__aeabi_fadd+0x7c>
 80002be:	e078      	b.n	80003b2 <__aeabi_fadd+0x16e>
 80002c0:	1c6a      	adds	r2, r5, #1
 80002c2:	2dfe      	cmp	r5, #254	; 0xfe
 80002c4:	d065      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80002c6:	0180      	lsls	r0, r0, #6
 80002c8:	0a43      	lsrs	r3, r0, #9
 80002ca:	469c      	mov	ip, r3
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	4663      	mov	r3, ip
 80002d0:	05d0      	lsls	r0, r2, #23
 80002d2:	4318      	orrs	r0, r3
 80002d4:	07e4      	lsls	r4, r4, #31
 80002d6:	4320      	orrs	r0, r4
 80002d8:	bc80      	pop	{r7}
 80002da:	46b8      	mov	r8, r7
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d035      	beq.n	800034e <__aeabi_fadd+0x10a>
 80002e2:	1b7a      	subs	r2, r7, r5
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d000      	beq.n	80002ea <__aeabi_fadd+0xa6>
 80002e8:	e0af      	b.n	800044a <__aeabi_fadd+0x206>
 80002ea:	4643      	mov	r3, r8
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fadd+0xae>
 80002f0:	e0a7      	b.n	8000442 <__aeabi_fadd+0x1fe>
 80002f2:	1e53      	subs	r3, r2, #1
 80002f4:	2a01      	cmp	r2, #1
 80002f6:	d100      	bne.n	80002fa <__aeabi_fadd+0xb6>
 80002f8:	e12f      	b.n	800055a <__aeabi_fadd+0x316>
 80002fa:	2aff      	cmp	r2, #255	; 0xff
 80002fc:	d069      	beq.n	80003d2 <__aeabi_fadd+0x18e>
 80002fe:	001a      	movs	r2, r3
 8000300:	e0aa      	b.n	8000458 <__aeabi_fadd+0x214>
 8000302:	1be9      	subs	r1, r5, r7
 8000304:	2900      	cmp	r1, #0
 8000306:	dd70      	ble.n	80003ea <__aeabi_fadd+0x1a6>
 8000308:	2f00      	cmp	r7, #0
 800030a:	d037      	beq.n	800037c <__aeabi_fadd+0x138>
 800030c:	2dff      	cmp	r5, #255	; 0xff
 800030e:	d062      	beq.n	80003d6 <__aeabi_fadd+0x192>
 8000310:	2380      	movs	r3, #128	; 0x80
 8000312:	04db      	lsls	r3, r3, #19
 8000314:	431e      	orrs	r6, r3
 8000316:	291b      	cmp	r1, #27
 8000318:	dc00      	bgt.n	800031c <__aeabi_fadd+0xd8>
 800031a:	e0b0      	b.n	800047e <__aeabi_fadd+0x23a>
 800031c:	2001      	movs	r0, #1
 800031e:	4440      	add	r0, r8
 8000320:	0143      	lsls	r3, r0, #5
 8000322:	d543      	bpl.n	80003ac <__aeabi_fadd+0x168>
 8000324:	3501      	adds	r5, #1
 8000326:	2dff      	cmp	r5, #255	; 0xff
 8000328:	d033      	beq.n	8000392 <__aeabi_fadd+0x14e>
 800032a:	2301      	movs	r3, #1
 800032c:	4a93      	ldr	r2, [pc, #588]	; (800057c <__aeabi_fadd+0x338>)
 800032e:	4003      	ands	r3, r0
 8000330:	0840      	lsrs	r0, r0, #1
 8000332:	4010      	ands	r0, r2
 8000334:	4318      	orrs	r0, r3
 8000336:	e7b9      	b.n	80002ac <__aeabi_fadd+0x68>
 8000338:	2e00      	cmp	r6, #0
 800033a:	d100      	bne.n	800033e <__aeabi_fadd+0xfa>
 800033c:	e083      	b.n	8000446 <__aeabi_fadd+0x202>
 800033e:	1e51      	subs	r1, r2, #1
 8000340:	2a01      	cmp	r2, #1
 8000342:	d100      	bne.n	8000346 <__aeabi_fadd+0x102>
 8000344:	e0d8      	b.n	80004f8 <__aeabi_fadd+0x2b4>
 8000346:	2aff      	cmp	r2, #255	; 0xff
 8000348:	d045      	beq.n	80003d6 <__aeabi_fadd+0x192>
 800034a:	000a      	movs	r2, r1
 800034c:	e798      	b.n	8000280 <__aeabi_fadd+0x3c>
 800034e:	27fe      	movs	r7, #254	; 0xfe
 8000350:	1c6a      	adds	r2, r5, #1
 8000352:	4217      	tst	r7, r2
 8000354:	d000      	beq.n	8000358 <__aeabi_fadd+0x114>
 8000356:	e086      	b.n	8000466 <__aeabi_fadd+0x222>
 8000358:	2d00      	cmp	r5, #0
 800035a:	d000      	beq.n	800035e <__aeabi_fadd+0x11a>
 800035c:	e0b7      	b.n	80004ce <__aeabi_fadd+0x28a>
 800035e:	4643      	mov	r3, r8
 8000360:	2b00      	cmp	r3, #0
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0x122>
 8000364:	e0f3      	b.n	800054e <__aeabi_fadd+0x30a>
 8000366:	2200      	movs	r2, #0
 8000368:	2e00      	cmp	r6, #0
 800036a:	d0b0      	beq.n	80002ce <__aeabi_fadd+0x8a>
 800036c:	1b98      	subs	r0, r3, r6
 800036e:	0143      	lsls	r3, r0, #5
 8000370:	d400      	bmi.n	8000374 <__aeabi_fadd+0x130>
 8000372:	e0fa      	b.n	800056a <__aeabi_fadd+0x326>
 8000374:	4643      	mov	r3, r8
 8000376:	000c      	movs	r4, r1
 8000378:	1af0      	subs	r0, r6, r3
 800037a:	e797      	b.n	80002ac <__aeabi_fadd+0x68>
 800037c:	2e00      	cmp	r6, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x13e>
 8000380:	e0c8      	b.n	8000514 <__aeabi_fadd+0x2d0>
 8000382:	1e4a      	subs	r2, r1, #1
 8000384:	2901      	cmp	r1, #1
 8000386:	d100      	bne.n	800038a <__aeabi_fadd+0x146>
 8000388:	e0ae      	b.n	80004e8 <__aeabi_fadd+0x2a4>
 800038a:	29ff      	cmp	r1, #255	; 0xff
 800038c:	d023      	beq.n	80003d6 <__aeabi_fadd+0x192>
 800038e:	0011      	movs	r1, r2
 8000390:	e7c1      	b.n	8000316 <__aeabi_fadd+0xd2>
 8000392:	2300      	movs	r3, #0
 8000394:	22ff      	movs	r2, #255	; 0xff
 8000396:	469c      	mov	ip, r3
 8000398:	e799      	b.n	80002ce <__aeabi_fadd+0x8a>
 800039a:	21fe      	movs	r1, #254	; 0xfe
 800039c:	1c6a      	adds	r2, r5, #1
 800039e:	4211      	tst	r1, r2
 80003a0:	d077      	beq.n	8000492 <__aeabi_fadd+0x24e>
 80003a2:	2aff      	cmp	r2, #255	; 0xff
 80003a4:	d0f5      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80003a6:	0015      	movs	r5, r2
 80003a8:	4446      	add	r6, r8
 80003aa:	0870      	lsrs	r0, r6, #1
 80003ac:	0743      	lsls	r3, r0, #29
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fadd+0x16e>
 80003b0:	e77e      	b.n	80002b0 <__aeabi_fadd+0x6c>
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	2dff      	cmp	r5, #255	; 0xff
 80003b6:	d00e      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003b8:	025b      	lsls	r3, r3, #9
 80003ba:	0a5b      	lsrs	r3, r3, #9
 80003bc:	469c      	mov	ip, r3
 80003be:	b2ea      	uxtb	r2, r5
 80003c0:	e785      	b.n	80002ce <__aeabi_fadd+0x8a>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d007      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	03d2      	lsls	r2, r2, #15
 80003ca:	4213      	tst	r3, r2
 80003cc:	d003      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003ce:	4210      	tst	r0, r2
 80003d0:	d101      	bne.n	80003d6 <__aeabi_fadd+0x192>
 80003d2:	000c      	movs	r4, r1
 80003d4:	0003      	movs	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0db      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80003da:	2080      	movs	r0, #128	; 0x80
 80003dc:	03c0      	lsls	r0, r0, #15
 80003de:	4318      	orrs	r0, r3
 80003e0:	0240      	lsls	r0, r0, #9
 80003e2:	0a43      	lsrs	r3, r0, #9
 80003e4:	469c      	mov	ip, r3
 80003e6:	22ff      	movs	r2, #255	; 0xff
 80003e8:	e771      	b.n	80002ce <__aeabi_fadd+0x8a>
 80003ea:	2900      	cmp	r1, #0
 80003ec:	d0d5      	beq.n	800039a <__aeabi_fadd+0x156>
 80003ee:	1b7a      	subs	r2, r7, r5
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d160      	bne.n	80004b6 <__aeabi_fadd+0x272>
 80003f4:	4643      	mov	r3, r8
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d024      	beq.n	8000444 <__aeabi_fadd+0x200>
 80003fa:	1e53      	subs	r3, r2, #1
 80003fc:	2a01      	cmp	r2, #1
 80003fe:	d073      	beq.n	80004e8 <__aeabi_fadd+0x2a4>
 8000400:	2aff      	cmp	r2, #255	; 0xff
 8000402:	d0e7      	beq.n	80003d4 <__aeabi_fadd+0x190>
 8000404:	001a      	movs	r2, r3
 8000406:	2a1b      	cmp	r2, #27
 8000408:	dc00      	bgt.n	800040c <__aeabi_fadd+0x1c8>
 800040a:	e085      	b.n	8000518 <__aeabi_fadd+0x2d4>
 800040c:	2001      	movs	r0, #1
 800040e:	003d      	movs	r5, r7
 8000410:	1980      	adds	r0, r0, r6
 8000412:	e785      	b.n	8000320 <__aeabi_fadd+0xdc>
 8000414:	2320      	movs	r3, #32
 8000416:	003a      	movs	r2, r7
 8000418:	1b45      	subs	r5, r0, r5
 800041a:	0038      	movs	r0, r7
 800041c:	3501      	adds	r5, #1
 800041e:	40ea      	lsrs	r2, r5
 8000420:	1b5d      	subs	r5, r3, r5
 8000422:	40a8      	lsls	r0, r5
 8000424:	1e43      	subs	r3, r0, #1
 8000426:	4198      	sbcs	r0, r3
 8000428:	2500      	movs	r5, #0
 800042a:	4310      	orrs	r0, r2
 800042c:	e73e      	b.n	80002ac <__aeabi_fadd+0x68>
 800042e:	2320      	movs	r3, #32
 8000430:	0030      	movs	r0, r6
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	0031      	movs	r1, r6
 8000436:	4098      	lsls	r0, r3
 8000438:	40d1      	lsrs	r1, r2
 800043a:	1e43      	subs	r3, r0, #1
 800043c:	4198      	sbcs	r0, r3
 800043e:	4308      	orrs	r0, r1
 8000440:	e722      	b.n	8000288 <__aeabi_fadd+0x44>
 8000442:	000c      	movs	r4, r1
 8000444:	0003      	movs	r3, r0
 8000446:	0015      	movs	r5, r2
 8000448:	e7b4      	b.n	80003b4 <__aeabi_fadd+0x170>
 800044a:	2fff      	cmp	r7, #255	; 0xff
 800044c:	d0c1      	beq.n	80003d2 <__aeabi_fadd+0x18e>
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	4640      	mov	r0, r8
 8000452:	04db      	lsls	r3, r3, #19
 8000454:	4318      	orrs	r0, r3
 8000456:	4680      	mov	r8, r0
 8000458:	2a1b      	cmp	r2, #27
 800045a:	dd51      	ble.n	8000500 <__aeabi_fadd+0x2bc>
 800045c:	2001      	movs	r0, #1
 800045e:	000c      	movs	r4, r1
 8000460:	003d      	movs	r5, r7
 8000462:	1a30      	subs	r0, r6, r0
 8000464:	e712      	b.n	800028c <__aeabi_fadd+0x48>
 8000466:	4643      	mov	r3, r8
 8000468:	1b9f      	subs	r7, r3, r6
 800046a:	017b      	lsls	r3, r7, #5
 800046c:	d42b      	bmi.n	80004c6 <__aeabi_fadd+0x282>
 800046e:	2f00      	cmp	r7, #0
 8000470:	d000      	beq.n	8000474 <__aeabi_fadd+0x230>
 8000472:	e710      	b.n	8000296 <__aeabi_fadd+0x52>
 8000474:	2300      	movs	r3, #0
 8000476:	2400      	movs	r4, #0
 8000478:	2200      	movs	r2, #0
 800047a:	469c      	mov	ip, r3
 800047c:	e727      	b.n	80002ce <__aeabi_fadd+0x8a>
 800047e:	2320      	movs	r3, #32
 8000480:	0032      	movs	r2, r6
 8000482:	0030      	movs	r0, r6
 8000484:	40ca      	lsrs	r2, r1
 8000486:	1a59      	subs	r1, r3, r1
 8000488:	4088      	lsls	r0, r1
 800048a:	1e43      	subs	r3, r0, #1
 800048c:	4198      	sbcs	r0, r3
 800048e:	4310      	orrs	r0, r2
 8000490:	e745      	b.n	800031e <__aeabi_fadd+0xda>
 8000492:	2d00      	cmp	r5, #0
 8000494:	d14a      	bne.n	800052c <__aeabi_fadd+0x2e8>
 8000496:	4643      	mov	r3, r8
 8000498:	2b00      	cmp	r3, #0
 800049a:	d063      	beq.n	8000564 <__aeabi_fadd+0x320>
 800049c:	2200      	movs	r2, #0
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x260>
 80004a2:	e714      	b.n	80002ce <__aeabi_fadd+0x8a>
 80004a4:	0030      	movs	r0, r6
 80004a6:	4440      	add	r0, r8
 80004a8:	0143      	lsls	r3, r0, #5
 80004aa:	d400      	bmi.n	80004ae <__aeabi_fadd+0x26a>
 80004ac:	e77e      	b.n	80003ac <__aeabi_fadd+0x168>
 80004ae:	4b32      	ldr	r3, [pc, #200]	; (8000578 <__aeabi_fadd+0x334>)
 80004b0:	3501      	adds	r5, #1
 80004b2:	4018      	ands	r0, r3
 80004b4:	e77a      	b.n	80003ac <__aeabi_fadd+0x168>
 80004b6:	2fff      	cmp	r7, #255	; 0xff
 80004b8:	d08c      	beq.n	80003d4 <__aeabi_fadd+0x190>
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	4641      	mov	r1, r8
 80004be:	04db      	lsls	r3, r3, #19
 80004c0:	4319      	orrs	r1, r3
 80004c2:	4688      	mov	r8, r1
 80004c4:	e79f      	b.n	8000406 <__aeabi_fadd+0x1c2>
 80004c6:	4643      	mov	r3, r8
 80004c8:	000c      	movs	r4, r1
 80004ca:	1af7      	subs	r7, r6, r3
 80004cc:	e6e3      	b.n	8000296 <__aeabi_fadd+0x52>
 80004ce:	4642      	mov	r2, r8
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fadd+0x292>
 80004d4:	e775      	b.n	80003c2 <__aeabi_fadd+0x17e>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d000      	beq.n	80004dc <__aeabi_fadd+0x298>
 80004da:	e77a      	b.n	80003d2 <__aeabi_fadd+0x18e>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	03db      	lsls	r3, r3, #15
 80004e0:	2400      	movs	r4, #0
 80004e2:	469c      	mov	ip, r3
 80004e4:	22ff      	movs	r2, #255	; 0xff
 80004e6:	e6f2      	b.n	80002ce <__aeabi_fadd+0x8a>
 80004e8:	0030      	movs	r0, r6
 80004ea:	4440      	add	r0, r8
 80004ec:	2501      	movs	r5, #1
 80004ee:	0143      	lsls	r3, r0, #5
 80004f0:	d400      	bmi.n	80004f4 <__aeabi_fadd+0x2b0>
 80004f2:	e75b      	b.n	80003ac <__aeabi_fadd+0x168>
 80004f4:	2502      	movs	r5, #2
 80004f6:	e718      	b.n	800032a <__aeabi_fadd+0xe6>
 80004f8:	4643      	mov	r3, r8
 80004fa:	2501      	movs	r5, #1
 80004fc:	1b98      	subs	r0, r3, r6
 80004fe:	e6c5      	b.n	800028c <__aeabi_fadd+0x48>
 8000500:	2320      	movs	r3, #32
 8000502:	4644      	mov	r4, r8
 8000504:	4640      	mov	r0, r8
 8000506:	40d4      	lsrs	r4, r2
 8000508:	1a9a      	subs	r2, r3, r2
 800050a:	4090      	lsls	r0, r2
 800050c:	1e43      	subs	r3, r0, #1
 800050e:	4198      	sbcs	r0, r3
 8000510:	4320      	orrs	r0, r4
 8000512:	e7a4      	b.n	800045e <__aeabi_fadd+0x21a>
 8000514:	000d      	movs	r5, r1
 8000516:	e74d      	b.n	80003b4 <__aeabi_fadd+0x170>
 8000518:	2320      	movs	r3, #32
 800051a:	4641      	mov	r1, r8
 800051c:	4640      	mov	r0, r8
 800051e:	40d1      	lsrs	r1, r2
 8000520:	1a9a      	subs	r2, r3, r2
 8000522:	4090      	lsls	r0, r2
 8000524:	1e43      	subs	r3, r0, #1
 8000526:	4198      	sbcs	r0, r3
 8000528:	4308      	orrs	r0, r1
 800052a:	e770      	b.n	800040e <__aeabi_fadd+0x1ca>
 800052c:	4642      	mov	r2, r8
 800052e:	2a00      	cmp	r2, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x2f0>
 8000532:	e74f      	b.n	80003d4 <__aeabi_fadd+0x190>
 8000534:	2e00      	cmp	r6, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2f6>
 8000538:	e74d      	b.n	80003d6 <__aeabi_fadd+0x192>
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	03d2      	lsls	r2, r2, #15
 800053e:	4213      	tst	r3, r2
 8000540:	d100      	bne.n	8000544 <__aeabi_fadd+0x300>
 8000542:	e748      	b.n	80003d6 <__aeabi_fadd+0x192>
 8000544:	4210      	tst	r0, r2
 8000546:	d000      	beq.n	800054a <__aeabi_fadd+0x306>
 8000548:	e745      	b.n	80003d6 <__aeabi_fadd+0x192>
 800054a:	0003      	movs	r3, r0
 800054c:	e743      	b.n	80003d6 <__aeabi_fadd+0x192>
 800054e:	2e00      	cmp	r6, #0
 8000550:	d090      	beq.n	8000474 <__aeabi_fadd+0x230>
 8000552:	000c      	movs	r4, r1
 8000554:	4684      	mov	ip, r0
 8000556:	2200      	movs	r2, #0
 8000558:	e6b9      	b.n	80002ce <__aeabi_fadd+0x8a>
 800055a:	4643      	mov	r3, r8
 800055c:	000c      	movs	r4, r1
 800055e:	1af0      	subs	r0, r6, r3
 8000560:	3501      	adds	r5, #1
 8000562:	e693      	b.n	800028c <__aeabi_fadd+0x48>
 8000564:	4684      	mov	ip, r0
 8000566:	2200      	movs	r2, #0
 8000568:	e6b1      	b.n	80002ce <__aeabi_fadd+0x8a>
 800056a:	2800      	cmp	r0, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x32c>
 800056e:	e71d      	b.n	80003ac <__aeabi_fadd+0x168>
 8000570:	2300      	movs	r3, #0
 8000572:	2400      	movs	r4, #0
 8000574:	469c      	mov	ip, r3
 8000576:	e6aa      	b.n	80002ce <__aeabi_fadd+0x8a>
 8000578:	fbffffff 	.word	0xfbffffff
 800057c:	7dffffff 	.word	0x7dffffff

08000580 <__aeabi_fmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	464f      	mov	r7, r9
 8000584:	4646      	mov	r6, r8
 8000586:	46d6      	mov	lr, sl
 8000588:	0244      	lsls	r4, r0, #9
 800058a:	0045      	lsls	r5, r0, #1
 800058c:	b5c0      	push	{r6, r7, lr}
 800058e:	0a64      	lsrs	r4, r4, #9
 8000590:	1c0f      	adds	r7, r1, #0
 8000592:	0e2d      	lsrs	r5, r5, #24
 8000594:	0fc6      	lsrs	r6, r0, #31
 8000596:	2d00      	cmp	r5, #0
 8000598:	d100      	bne.n	800059c <__aeabi_fmul+0x1c>
 800059a:	e08d      	b.n	80006b8 <__aeabi_fmul+0x138>
 800059c:	2dff      	cmp	r5, #255	; 0xff
 800059e:	d100      	bne.n	80005a2 <__aeabi_fmul+0x22>
 80005a0:	e092      	b.n	80006c8 <__aeabi_fmul+0x148>
 80005a2:	2300      	movs	r3, #0
 80005a4:	2080      	movs	r0, #128	; 0x80
 80005a6:	4699      	mov	r9, r3
 80005a8:	469a      	mov	sl, r3
 80005aa:	00e4      	lsls	r4, r4, #3
 80005ac:	04c0      	lsls	r0, r0, #19
 80005ae:	4304      	orrs	r4, r0
 80005b0:	3d7f      	subs	r5, #127	; 0x7f
 80005b2:	0278      	lsls	r0, r7, #9
 80005b4:	0a43      	lsrs	r3, r0, #9
 80005b6:	4698      	mov	r8, r3
 80005b8:	007b      	lsls	r3, r7, #1
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	0fff      	lsrs	r7, r7, #31
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fmul+0x44>
 80005c2:	e070      	b.n	80006a6 <__aeabi_fmul+0x126>
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fmul+0x4a>
 80005c8:	e086      	b.n	80006d8 <__aeabi_fmul+0x158>
 80005ca:	4642      	mov	r2, r8
 80005cc:	00d0      	lsls	r0, r2, #3
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	3b7f      	subs	r3, #127	; 0x7f
 80005d2:	18ed      	adds	r5, r5, r3
 80005d4:	2300      	movs	r3, #0
 80005d6:	04d2      	lsls	r2, r2, #19
 80005d8:	4302      	orrs	r2, r0
 80005da:	4690      	mov	r8, r2
 80005dc:	469c      	mov	ip, r3
 80005de:	0031      	movs	r1, r6
 80005e0:	464b      	mov	r3, r9
 80005e2:	4079      	eors	r1, r7
 80005e4:	1c68      	adds	r0, r5, #1
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d81c      	bhi.n	8000624 <__aeabi_fmul+0xa4>
 80005ea:	4a76      	ldr	r2, [pc, #472]	; (80007c4 <__aeabi_fmul+0x244>)
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	58d3      	ldr	r3, [r2, r3]
 80005f0:	469f      	mov	pc, r3
 80005f2:	0039      	movs	r1, r7
 80005f4:	4644      	mov	r4, r8
 80005f6:	46e2      	mov	sl, ip
 80005f8:	4653      	mov	r3, sl
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d00f      	beq.n	800061e <__aeabi_fmul+0x9e>
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d100      	bne.n	8000604 <__aeabi_fmul+0x84>
 8000602:	e0d7      	b.n	80007b4 <__aeabi_fmul+0x234>
 8000604:	2b01      	cmp	r3, #1
 8000606:	d137      	bne.n	8000678 <__aeabi_fmul+0xf8>
 8000608:	2000      	movs	r0, #0
 800060a:	2400      	movs	r4, #0
 800060c:	05c0      	lsls	r0, r0, #23
 800060e:	4320      	orrs	r0, r4
 8000610:	07c9      	lsls	r1, r1, #31
 8000612:	4308      	orrs	r0, r1
 8000614:	bce0      	pop	{r5, r6, r7}
 8000616:	46ba      	mov	sl, r7
 8000618:	46b1      	mov	r9, r6
 800061a:	46a8      	mov	r8, r5
 800061c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061e:	20ff      	movs	r0, #255	; 0xff
 8000620:	2400      	movs	r4, #0
 8000622:	e7f3      	b.n	800060c <__aeabi_fmul+0x8c>
 8000624:	0c26      	lsrs	r6, r4, #16
 8000626:	0424      	lsls	r4, r4, #16
 8000628:	0c22      	lsrs	r2, r4, #16
 800062a:	4644      	mov	r4, r8
 800062c:	0424      	lsls	r4, r4, #16
 800062e:	0c24      	lsrs	r4, r4, #16
 8000630:	4643      	mov	r3, r8
 8000632:	0027      	movs	r7, r4
 8000634:	0c1b      	lsrs	r3, r3, #16
 8000636:	4357      	muls	r7, r2
 8000638:	4374      	muls	r4, r6
 800063a:	435a      	muls	r2, r3
 800063c:	435e      	muls	r6, r3
 800063e:	1912      	adds	r2, r2, r4
 8000640:	0c3b      	lsrs	r3, r7, #16
 8000642:	189b      	adds	r3, r3, r2
 8000644:	429c      	cmp	r4, r3
 8000646:	d903      	bls.n	8000650 <__aeabi_fmul+0xd0>
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	0252      	lsls	r2, r2, #9
 800064c:	4694      	mov	ip, r2
 800064e:	4466      	add	r6, ip
 8000650:	043f      	lsls	r7, r7, #16
 8000652:	041a      	lsls	r2, r3, #16
 8000654:	0c3f      	lsrs	r7, r7, #16
 8000656:	19d2      	adds	r2, r2, r7
 8000658:	0194      	lsls	r4, r2, #6
 800065a:	1e67      	subs	r7, r4, #1
 800065c:	41bc      	sbcs	r4, r7
 800065e:	0c1b      	lsrs	r3, r3, #16
 8000660:	0e92      	lsrs	r2, r2, #26
 8000662:	199b      	adds	r3, r3, r6
 8000664:	4314      	orrs	r4, r2
 8000666:	019b      	lsls	r3, r3, #6
 8000668:	431c      	orrs	r4, r3
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	d400      	bmi.n	8000670 <__aeabi_fmul+0xf0>
 800066e:	e09b      	b.n	80007a8 <__aeabi_fmul+0x228>
 8000670:	2301      	movs	r3, #1
 8000672:	0862      	lsrs	r2, r4, #1
 8000674:	401c      	ands	r4, r3
 8000676:	4314      	orrs	r4, r2
 8000678:	0002      	movs	r2, r0
 800067a:	327f      	adds	r2, #127	; 0x7f
 800067c:	2a00      	cmp	r2, #0
 800067e:	dd64      	ble.n	800074a <__aeabi_fmul+0x1ca>
 8000680:	0763      	lsls	r3, r4, #29
 8000682:	d004      	beq.n	800068e <__aeabi_fmul+0x10e>
 8000684:	230f      	movs	r3, #15
 8000686:	4023      	ands	r3, r4
 8000688:	2b04      	cmp	r3, #4
 800068a:	d000      	beq.n	800068e <__aeabi_fmul+0x10e>
 800068c:	3404      	adds	r4, #4
 800068e:	0123      	lsls	r3, r4, #4
 8000690:	d503      	bpl.n	800069a <__aeabi_fmul+0x11a>
 8000692:	0002      	movs	r2, r0
 8000694:	4b4c      	ldr	r3, [pc, #304]	; (80007c8 <__aeabi_fmul+0x248>)
 8000696:	3280      	adds	r2, #128	; 0x80
 8000698:	401c      	ands	r4, r3
 800069a:	2afe      	cmp	r2, #254	; 0xfe
 800069c:	dcbf      	bgt.n	800061e <__aeabi_fmul+0x9e>
 800069e:	01a4      	lsls	r4, r4, #6
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	b2d0      	uxtb	r0, r2
 80006a4:	e7b2      	b.n	800060c <__aeabi_fmul+0x8c>
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d13d      	bne.n	8000728 <__aeabi_fmul+0x1a8>
 80006ac:	464a      	mov	r2, r9
 80006ae:	3301      	adds	r3, #1
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4691      	mov	r9, r2
 80006b4:	469c      	mov	ip, r3
 80006b6:	e792      	b.n	80005de <__aeabi_fmul+0x5e>
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d129      	bne.n	8000710 <__aeabi_fmul+0x190>
 80006bc:	2304      	movs	r3, #4
 80006be:	4699      	mov	r9, r3
 80006c0:	3b03      	subs	r3, #3
 80006c2:	2500      	movs	r5, #0
 80006c4:	469a      	mov	sl, r3
 80006c6:	e774      	b.n	80005b2 <__aeabi_fmul+0x32>
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	d11b      	bne.n	8000704 <__aeabi_fmul+0x184>
 80006cc:	2308      	movs	r3, #8
 80006ce:	4699      	mov	r9, r3
 80006d0:	3b06      	subs	r3, #6
 80006d2:	25ff      	movs	r5, #255	; 0xff
 80006d4:	469a      	mov	sl, r3
 80006d6:	e76c      	b.n	80005b2 <__aeabi_fmul+0x32>
 80006d8:	4643      	mov	r3, r8
 80006da:	35ff      	adds	r5, #255	; 0xff
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10b      	bne.n	80006f8 <__aeabi_fmul+0x178>
 80006e0:	2302      	movs	r3, #2
 80006e2:	464a      	mov	r2, r9
 80006e4:	431a      	orrs	r2, r3
 80006e6:	4691      	mov	r9, r2
 80006e8:	469c      	mov	ip, r3
 80006ea:	e778      	b.n	80005de <__aeabi_fmul+0x5e>
 80006ec:	4653      	mov	r3, sl
 80006ee:	0031      	movs	r1, r6
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fmul+0x176>
 80006f4:	e783      	b.n	80005fe <__aeabi_fmul+0x7e>
 80006f6:	e792      	b.n	800061e <__aeabi_fmul+0x9e>
 80006f8:	2303      	movs	r3, #3
 80006fa:	464a      	mov	r2, r9
 80006fc:	431a      	orrs	r2, r3
 80006fe:	4691      	mov	r9, r2
 8000700:	469c      	mov	ip, r3
 8000702:	e76c      	b.n	80005de <__aeabi_fmul+0x5e>
 8000704:	230c      	movs	r3, #12
 8000706:	4699      	mov	r9, r3
 8000708:	3b09      	subs	r3, #9
 800070a:	25ff      	movs	r5, #255	; 0xff
 800070c:	469a      	mov	sl, r3
 800070e:	e750      	b.n	80005b2 <__aeabi_fmul+0x32>
 8000710:	0020      	movs	r0, r4
 8000712:	f000 fab9 	bl	8000c88 <__clzsi2>
 8000716:	2576      	movs	r5, #118	; 0x76
 8000718:	1f43      	subs	r3, r0, #5
 800071a:	409c      	lsls	r4, r3
 800071c:	2300      	movs	r3, #0
 800071e:	426d      	negs	r5, r5
 8000720:	4699      	mov	r9, r3
 8000722:	469a      	mov	sl, r3
 8000724:	1a2d      	subs	r5, r5, r0
 8000726:	e744      	b.n	80005b2 <__aeabi_fmul+0x32>
 8000728:	4640      	mov	r0, r8
 800072a:	f000 faad 	bl	8000c88 <__clzsi2>
 800072e:	4642      	mov	r2, r8
 8000730:	1f43      	subs	r3, r0, #5
 8000732:	409a      	lsls	r2, r3
 8000734:	2300      	movs	r3, #0
 8000736:	1a2d      	subs	r5, r5, r0
 8000738:	4690      	mov	r8, r2
 800073a:	469c      	mov	ip, r3
 800073c:	3d76      	subs	r5, #118	; 0x76
 800073e:	e74e      	b.n	80005de <__aeabi_fmul+0x5e>
 8000740:	2480      	movs	r4, #128	; 0x80
 8000742:	2100      	movs	r1, #0
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	03e4      	lsls	r4, r4, #15
 8000748:	e760      	b.n	800060c <__aeabi_fmul+0x8c>
 800074a:	2301      	movs	r3, #1
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	2b1b      	cmp	r3, #27
 8000750:	dd00      	ble.n	8000754 <__aeabi_fmul+0x1d4>
 8000752:	e759      	b.n	8000608 <__aeabi_fmul+0x88>
 8000754:	0022      	movs	r2, r4
 8000756:	309e      	adds	r0, #158	; 0x9e
 8000758:	40da      	lsrs	r2, r3
 800075a:	4084      	lsls	r4, r0
 800075c:	0013      	movs	r3, r2
 800075e:	1e62      	subs	r2, r4, #1
 8000760:	4194      	sbcs	r4, r2
 8000762:	431c      	orrs	r4, r3
 8000764:	0763      	lsls	r3, r4, #29
 8000766:	d004      	beq.n	8000772 <__aeabi_fmul+0x1f2>
 8000768:	230f      	movs	r3, #15
 800076a:	4023      	ands	r3, r4
 800076c:	2b04      	cmp	r3, #4
 800076e:	d000      	beq.n	8000772 <__aeabi_fmul+0x1f2>
 8000770:	3404      	adds	r4, #4
 8000772:	0163      	lsls	r3, r4, #5
 8000774:	d51a      	bpl.n	80007ac <__aeabi_fmul+0x22c>
 8000776:	2001      	movs	r0, #1
 8000778:	2400      	movs	r4, #0
 800077a:	e747      	b.n	800060c <__aeabi_fmul+0x8c>
 800077c:	2080      	movs	r0, #128	; 0x80
 800077e:	03c0      	lsls	r0, r0, #15
 8000780:	4204      	tst	r4, r0
 8000782:	d009      	beq.n	8000798 <__aeabi_fmul+0x218>
 8000784:	4643      	mov	r3, r8
 8000786:	4203      	tst	r3, r0
 8000788:	d106      	bne.n	8000798 <__aeabi_fmul+0x218>
 800078a:	4644      	mov	r4, r8
 800078c:	4304      	orrs	r4, r0
 800078e:	0264      	lsls	r4, r4, #9
 8000790:	0039      	movs	r1, r7
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	0a64      	lsrs	r4, r4, #9
 8000796:	e739      	b.n	800060c <__aeabi_fmul+0x8c>
 8000798:	2080      	movs	r0, #128	; 0x80
 800079a:	03c0      	lsls	r0, r0, #15
 800079c:	4304      	orrs	r4, r0
 800079e:	0264      	lsls	r4, r4, #9
 80007a0:	0031      	movs	r1, r6
 80007a2:	20ff      	movs	r0, #255	; 0xff
 80007a4:	0a64      	lsrs	r4, r4, #9
 80007a6:	e731      	b.n	800060c <__aeabi_fmul+0x8c>
 80007a8:	0028      	movs	r0, r5
 80007aa:	e765      	b.n	8000678 <__aeabi_fmul+0xf8>
 80007ac:	01a4      	lsls	r4, r4, #6
 80007ae:	2000      	movs	r0, #0
 80007b0:	0a64      	lsrs	r4, r4, #9
 80007b2:	e72b      	b.n	800060c <__aeabi_fmul+0x8c>
 80007b4:	2080      	movs	r0, #128	; 0x80
 80007b6:	03c0      	lsls	r0, r0, #15
 80007b8:	4304      	orrs	r4, r0
 80007ba:	0264      	lsls	r4, r4, #9
 80007bc:	20ff      	movs	r0, #255	; 0xff
 80007be:	0a64      	lsrs	r4, r4, #9
 80007c0:	e724      	b.n	800060c <__aeabi_fmul+0x8c>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	08006304 	.word	0x08006304
 80007c8:	f7ffffff 	.word	0xf7ffffff

080007cc <__aeabi_fsub>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	46ce      	mov	lr, r9
 80007d0:	4647      	mov	r7, r8
 80007d2:	0243      	lsls	r3, r0, #9
 80007d4:	0a5b      	lsrs	r3, r3, #9
 80007d6:	024e      	lsls	r6, r1, #9
 80007d8:	00da      	lsls	r2, r3, #3
 80007da:	4694      	mov	ip, r2
 80007dc:	0a72      	lsrs	r2, r6, #9
 80007de:	4691      	mov	r9, r2
 80007e0:	0045      	lsls	r5, r0, #1
 80007e2:	004a      	lsls	r2, r1, #1
 80007e4:	b580      	push	{r7, lr}
 80007e6:	0e2d      	lsrs	r5, r5, #24
 80007e8:	001f      	movs	r7, r3
 80007ea:	0fc4      	lsrs	r4, r0, #31
 80007ec:	0e12      	lsrs	r2, r2, #24
 80007ee:	0fc9      	lsrs	r1, r1, #31
 80007f0:	09b6      	lsrs	r6, r6, #6
 80007f2:	2aff      	cmp	r2, #255	; 0xff
 80007f4:	d05b      	beq.n	80008ae <__aeabi_fsub+0xe2>
 80007f6:	2001      	movs	r0, #1
 80007f8:	4041      	eors	r1, r0
 80007fa:	428c      	cmp	r4, r1
 80007fc:	d039      	beq.n	8000872 <__aeabi_fsub+0xa6>
 80007fe:	1aa8      	subs	r0, r5, r2
 8000800:	2800      	cmp	r0, #0
 8000802:	dd5a      	ble.n	80008ba <__aeabi_fsub+0xee>
 8000804:	2a00      	cmp	r2, #0
 8000806:	d06a      	beq.n	80008de <__aeabi_fsub+0x112>
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d100      	bne.n	800080e <__aeabi_fsub+0x42>
 800080c:	e0d9      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4316      	orrs	r6, r2
 8000814:	281b      	cmp	r0, #27
 8000816:	dc00      	bgt.n	800081a <__aeabi_fsub+0x4e>
 8000818:	e0e9      	b.n	80009ee <__aeabi_fsub+0x222>
 800081a:	2001      	movs	r0, #1
 800081c:	4663      	mov	r3, ip
 800081e:	1a18      	subs	r0, r3, r0
 8000820:	0143      	lsls	r3, r0, #5
 8000822:	d400      	bmi.n	8000826 <__aeabi_fsub+0x5a>
 8000824:	e0b4      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000826:	0180      	lsls	r0, r0, #6
 8000828:	0987      	lsrs	r7, r0, #6
 800082a:	0038      	movs	r0, r7
 800082c:	f000 fa2c 	bl	8000c88 <__clzsi2>
 8000830:	3805      	subs	r0, #5
 8000832:	4087      	lsls	r7, r0
 8000834:	4285      	cmp	r5, r0
 8000836:	dc00      	bgt.n	800083a <__aeabi_fsub+0x6e>
 8000838:	e0cc      	b.n	80009d4 <__aeabi_fsub+0x208>
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	48b5      	ldr	r0, [pc, #724]	; (8000b14 <__aeabi_fsub+0x348>)
 800083e:	4038      	ands	r0, r7
 8000840:	0743      	lsls	r3, r0, #29
 8000842:	d004      	beq.n	800084e <__aeabi_fsub+0x82>
 8000844:	230f      	movs	r3, #15
 8000846:	4003      	ands	r3, r0
 8000848:	2b04      	cmp	r3, #4
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x82>
 800084c:	3004      	adds	r0, #4
 800084e:	0143      	lsls	r3, r0, #5
 8000850:	d400      	bmi.n	8000854 <__aeabi_fsub+0x88>
 8000852:	e0a0      	b.n	8000996 <__aeabi_fsub+0x1ca>
 8000854:	1c6a      	adds	r2, r5, #1
 8000856:	2dfe      	cmp	r5, #254	; 0xfe
 8000858:	d100      	bne.n	800085c <__aeabi_fsub+0x90>
 800085a:	e08d      	b.n	8000978 <__aeabi_fsub+0x1ac>
 800085c:	0180      	lsls	r0, r0, #6
 800085e:	0a47      	lsrs	r7, r0, #9
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	05d0      	lsls	r0, r2, #23
 8000864:	4338      	orrs	r0, r7
 8000866:	07e4      	lsls	r4, r4, #31
 8000868:	4320      	orrs	r0, r4
 800086a:	bcc0      	pop	{r6, r7}
 800086c:	46b9      	mov	r9, r7
 800086e:	46b0      	mov	r8, r6
 8000870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000872:	1aa8      	subs	r0, r5, r2
 8000874:	4680      	mov	r8, r0
 8000876:	2800      	cmp	r0, #0
 8000878:	dd45      	ble.n	8000906 <__aeabi_fsub+0x13a>
 800087a:	2a00      	cmp	r2, #0
 800087c:	d070      	beq.n	8000960 <__aeabi_fsub+0x194>
 800087e:	2dff      	cmp	r5, #255	; 0xff
 8000880:	d100      	bne.n	8000884 <__aeabi_fsub+0xb8>
 8000882:	e09e      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	04db      	lsls	r3, r3, #19
 8000888:	431e      	orrs	r6, r3
 800088a:	4643      	mov	r3, r8
 800088c:	2b1b      	cmp	r3, #27
 800088e:	dc00      	bgt.n	8000892 <__aeabi_fsub+0xc6>
 8000890:	e0d2      	b.n	8000a38 <__aeabi_fsub+0x26c>
 8000892:	2001      	movs	r0, #1
 8000894:	4460      	add	r0, ip
 8000896:	0143      	lsls	r3, r0, #5
 8000898:	d57a      	bpl.n	8000990 <__aeabi_fsub+0x1c4>
 800089a:	3501      	adds	r5, #1
 800089c:	2dff      	cmp	r5, #255	; 0xff
 800089e:	d06b      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 80008a0:	2301      	movs	r3, #1
 80008a2:	4a9d      	ldr	r2, [pc, #628]	; (8000b18 <__aeabi_fsub+0x34c>)
 80008a4:	4003      	ands	r3, r0
 80008a6:	0840      	lsrs	r0, r0, #1
 80008a8:	4010      	ands	r0, r2
 80008aa:	4318      	orrs	r0, r3
 80008ac:	e7c8      	b.n	8000840 <__aeabi_fsub+0x74>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d020      	beq.n	80008f4 <__aeabi_fsub+0x128>
 80008b2:	428c      	cmp	r4, r1
 80008b4:	d023      	beq.n	80008fe <__aeabi_fsub+0x132>
 80008b6:	0028      	movs	r0, r5
 80008b8:	38ff      	subs	r0, #255	; 0xff
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d039      	beq.n	8000932 <__aeabi_fsub+0x166>
 80008be:	1b57      	subs	r7, r2, r5
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d000      	beq.n	80008c6 <__aeabi_fsub+0xfa>
 80008c4:	e09d      	b.n	8000a02 <__aeabi_fsub+0x236>
 80008c6:	4663      	mov	r3, ip
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_fsub+0x102>
 80008cc:	e0db      	b.n	8000a86 <__aeabi_fsub+0x2ba>
 80008ce:	1e7b      	subs	r3, r7, #1
 80008d0:	2f01      	cmp	r7, #1
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x10a>
 80008d4:	e10d      	b.n	8000af2 <__aeabi_fsub+0x326>
 80008d6:	2fff      	cmp	r7, #255	; 0xff
 80008d8:	d071      	beq.n	80009be <__aeabi_fsub+0x1f2>
 80008da:	001f      	movs	r7, r3
 80008dc:	e098      	b.n	8000a10 <__aeabi_fsub+0x244>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fsub+0x118>
 80008e2:	e0a7      	b.n	8000a34 <__aeabi_fsub+0x268>
 80008e4:	1e42      	subs	r2, r0, #1
 80008e6:	2801      	cmp	r0, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_fsub+0x120>
 80008ea:	e0e6      	b.n	8000aba <__aeabi_fsub+0x2ee>
 80008ec:	28ff      	cmp	r0, #255	; 0xff
 80008ee:	d068      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80008f0:	0010      	movs	r0, r2
 80008f2:	e78f      	b.n	8000814 <__aeabi_fsub+0x48>
 80008f4:	2001      	movs	r0, #1
 80008f6:	4041      	eors	r1, r0
 80008f8:	42a1      	cmp	r1, r4
 80008fa:	d000      	beq.n	80008fe <__aeabi_fsub+0x132>
 80008fc:	e77f      	b.n	80007fe <__aeabi_fsub+0x32>
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	4240      	negs	r0, r0
 8000902:	4680      	mov	r8, r0
 8000904:	44a8      	add	r8, r5
 8000906:	4640      	mov	r0, r8
 8000908:	2800      	cmp	r0, #0
 800090a:	d038      	beq.n	800097e <__aeabi_fsub+0x1b2>
 800090c:	1b51      	subs	r1, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fsub+0x148>
 8000912:	e0ae      	b.n	8000a72 <__aeabi_fsub+0x2a6>
 8000914:	2aff      	cmp	r2, #255	; 0xff
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x14e>
 8000918:	e0df      	b.n	8000ada <__aeabi_fsub+0x30e>
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	4660      	mov	r0, ip
 800091e:	04db      	lsls	r3, r3, #19
 8000920:	4318      	orrs	r0, r3
 8000922:	4684      	mov	ip, r0
 8000924:	291b      	cmp	r1, #27
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0x15e>
 8000928:	e0d9      	b.n	8000ade <__aeabi_fsub+0x312>
 800092a:	2001      	movs	r0, #1
 800092c:	0015      	movs	r5, r2
 800092e:	1980      	adds	r0, r0, r6
 8000930:	e7b1      	b.n	8000896 <__aeabi_fsub+0xca>
 8000932:	20fe      	movs	r0, #254	; 0xfe
 8000934:	1c6a      	adds	r2, r5, #1
 8000936:	4210      	tst	r0, r2
 8000938:	d171      	bne.n	8000a1e <__aeabi_fsub+0x252>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d000      	beq.n	8000940 <__aeabi_fsub+0x174>
 800093e:	e0a6      	b.n	8000a8e <__aeabi_fsub+0x2c2>
 8000940:	4663      	mov	r3, ip
 8000942:	2b00      	cmp	r3, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_fsub+0x17c>
 8000946:	e0d9      	b.n	8000afc <__aeabi_fsub+0x330>
 8000948:	2200      	movs	r2, #0
 800094a:	2e00      	cmp	r6, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x184>
 800094e:	e788      	b.n	8000862 <__aeabi_fsub+0x96>
 8000950:	1b98      	subs	r0, r3, r6
 8000952:	0143      	lsls	r3, r0, #5
 8000954:	d400      	bmi.n	8000958 <__aeabi_fsub+0x18c>
 8000956:	e0e1      	b.n	8000b1c <__aeabi_fsub+0x350>
 8000958:	4663      	mov	r3, ip
 800095a:	000c      	movs	r4, r1
 800095c:	1af0      	subs	r0, r6, r3
 800095e:	e76f      	b.n	8000840 <__aeabi_fsub+0x74>
 8000960:	2e00      	cmp	r6, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x19a>
 8000964:	e0b7      	b.n	8000ad6 <__aeabi_fsub+0x30a>
 8000966:	0002      	movs	r2, r0
 8000968:	3a01      	subs	r2, #1
 800096a:	2801      	cmp	r0, #1
 800096c:	d100      	bne.n	8000970 <__aeabi_fsub+0x1a4>
 800096e:	e09c      	b.n	8000aaa <__aeabi_fsub+0x2de>
 8000970:	28ff      	cmp	r0, #255	; 0xff
 8000972:	d026      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 8000974:	4690      	mov	r8, r2
 8000976:	e788      	b.n	800088a <__aeabi_fsub+0xbe>
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	2700      	movs	r7, #0
 800097c:	e771      	b.n	8000862 <__aeabi_fsub+0x96>
 800097e:	20fe      	movs	r0, #254	; 0xfe
 8000980:	1c6a      	adds	r2, r5, #1
 8000982:	4210      	tst	r0, r2
 8000984:	d064      	beq.n	8000a50 <__aeabi_fsub+0x284>
 8000986:	2aff      	cmp	r2, #255	; 0xff
 8000988:	d0f6      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 800098a:	0015      	movs	r5, r2
 800098c:	4466      	add	r6, ip
 800098e:	0870      	lsrs	r0, r6, #1
 8000990:	0743      	lsls	r3, r0, #29
 8000992:	d000      	beq.n	8000996 <__aeabi_fsub+0x1ca>
 8000994:	e756      	b.n	8000844 <__aeabi_fsub+0x78>
 8000996:	08c3      	lsrs	r3, r0, #3
 8000998:	2dff      	cmp	r5, #255	; 0xff
 800099a:	d012      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 800099c:	025b      	lsls	r3, r3, #9
 800099e:	0a5f      	lsrs	r7, r3, #9
 80009a0:	b2ea      	uxtb	r2, r5
 80009a2:	e75e      	b.n	8000862 <__aeabi_fsub+0x96>
 80009a4:	4662      	mov	r2, ip
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x1e0>
 80009aa:	e096      	b.n	8000ada <__aeabi_fsub+0x30e>
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d008      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	03d2      	lsls	r2, r2, #15
 80009b4:	4213      	tst	r3, r2
 80009b6:	d004      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80009b8:	4648      	mov	r0, r9
 80009ba:	4210      	tst	r0, r2
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fsub+0x1f6>
 80009be:	000c      	movs	r4, r1
 80009c0:	464b      	mov	r3, r9
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0d8      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 80009c6:	2780      	movs	r7, #128	; 0x80
 80009c8:	03ff      	lsls	r7, r7, #15
 80009ca:	431f      	orrs	r7, r3
 80009cc:	027f      	lsls	r7, r7, #9
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	0a7f      	lsrs	r7, r7, #9
 80009d2:	e746      	b.n	8000862 <__aeabi_fsub+0x96>
 80009d4:	2320      	movs	r3, #32
 80009d6:	003a      	movs	r2, r7
 80009d8:	1b45      	subs	r5, r0, r5
 80009da:	0038      	movs	r0, r7
 80009dc:	3501      	adds	r5, #1
 80009de:	40ea      	lsrs	r2, r5
 80009e0:	1b5d      	subs	r5, r3, r5
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	1e43      	subs	r3, r0, #1
 80009e6:	4198      	sbcs	r0, r3
 80009e8:	2500      	movs	r5, #0
 80009ea:	4310      	orrs	r0, r2
 80009ec:	e728      	b.n	8000840 <__aeabi_fsub+0x74>
 80009ee:	2320      	movs	r3, #32
 80009f0:	1a1b      	subs	r3, r3, r0
 80009f2:	0032      	movs	r2, r6
 80009f4:	409e      	lsls	r6, r3
 80009f6:	40c2      	lsrs	r2, r0
 80009f8:	0030      	movs	r0, r6
 80009fa:	1e43      	subs	r3, r0, #1
 80009fc:	4198      	sbcs	r0, r3
 80009fe:	4310      	orrs	r0, r2
 8000a00:	e70c      	b.n	800081c <__aeabi_fsub+0x50>
 8000a02:	2aff      	cmp	r2, #255	; 0xff
 8000a04:	d0db      	beq.n	80009be <__aeabi_fsub+0x1f2>
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	4660      	mov	r0, ip
 8000a0a:	04db      	lsls	r3, r3, #19
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	4684      	mov	ip, r0
 8000a10:	2f1b      	cmp	r7, #27
 8000a12:	dd56      	ble.n	8000ac2 <__aeabi_fsub+0x2f6>
 8000a14:	2001      	movs	r0, #1
 8000a16:	000c      	movs	r4, r1
 8000a18:	0015      	movs	r5, r2
 8000a1a:	1a30      	subs	r0, r6, r0
 8000a1c:	e700      	b.n	8000820 <__aeabi_fsub+0x54>
 8000a1e:	4663      	mov	r3, ip
 8000a20:	1b9f      	subs	r7, r3, r6
 8000a22:	017b      	lsls	r3, r7, #5
 8000a24:	d43d      	bmi.n	8000aa2 <__aeabi_fsub+0x2d6>
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0x260>
 8000a2a:	e6fe      	b.n	800082a <__aeabi_fsub+0x5e>
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2700      	movs	r7, #0
 8000a32:	e716      	b.n	8000862 <__aeabi_fsub+0x96>
 8000a34:	0005      	movs	r5, r0
 8000a36:	e7af      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000a38:	0032      	movs	r2, r6
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	4641      	mov	r1, r8
 8000a3e:	40da      	lsrs	r2, r3
 8000a40:	2320      	movs	r3, #32
 8000a42:	1a5b      	subs	r3, r3, r1
 8000a44:	409e      	lsls	r6, r3
 8000a46:	0030      	movs	r0, r6
 8000a48:	1e43      	subs	r3, r0, #1
 8000a4a:	4198      	sbcs	r0, r3
 8000a4c:	4310      	orrs	r0, r2
 8000a4e:	e721      	b.n	8000894 <__aeabi_fsub+0xc8>
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d1a7      	bne.n	80009a4 <__aeabi_fsub+0x1d8>
 8000a54:	4663      	mov	r3, ip
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d059      	beq.n	8000b0e <__aeabi_fsub+0x342>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x296>
 8000a60:	e6ff      	b.n	8000862 <__aeabi_fsub+0x96>
 8000a62:	0030      	movs	r0, r6
 8000a64:	4460      	add	r0, ip
 8000a66:	0143      	lsls	r3, r0, #5
 8000a68:	d592      	bpl.n	8000990 <__aeabi_fsub+0x1c4>
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <__aeabi_fsub+0x348>)
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	4018      	ands	r0, r3
 8000a70:	e78e      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000a72:	4663      	mov	r3, ip
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d047      	beq.n	8000b08 <__aeabi_fsub+0x33c>
 8000a78:	1e4b      	subs	r3, r1, #1
 8000a7a:	2901      	cmp	r1, #1
 8000a7c:	d015      	beq.n	8000aaa <__aeabi_fsub+0x2de>
 8000a7e:	29ff      	cmp	r1, #255	; 0xff
 8000a80:	d02b      	beq.n	8000ada <__aeabi_fsub+0x30e>
 8000a82:	0019      	movs	r1, r3
 8000a84:	e74e      	b.n	8000924 <__aeabi_fsub+0x158>
 8000a86:	000c      	movs	r4, r1
 8000a88:	464b      	mov	r3, r9
 8000a8a:	003d      	movs	r5, r7
 8000a8c:	e784      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d18b      	bne.n	80009ac <__aeabi_fsub+0x1e0>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d192      	bne.n	80009be <__aeabi_fsub+0x1f2>
 8000a98:	2780      	movs	r7, #128	; 0x80
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	03ff      	lsls	r7, r7, #15
 8000aa0:	e6df      	b.n	8000862 <__aeabi_fsub+0x96>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	1af7      	subs	r7, r6, r3
 8000aa8:	e6bf      	b.n	800082a <__aeabi_fsub+0x5e>
 8000aaa:	0030      	movs	r0, r6
 8000aac:	4460      	add	r0, ip
 8000aae:	2501      	movs	r5, #1
 8000ab0:	0143      	lsls	r3, r0, #5
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_fsub+0x2ea>
 8000ab4:	e76c      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000ab6:	2502      	movs	r5, #2
 8000ab8:	e6f2      	b.n	80008a0 <__aeabi_fsub+0xd4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2501      	movs	r5, #1
 8000abe:	1b98      	subs	r0, r3, r6
 8000ac0:	e6ae      	b.n	8000820 <__aeabi_fsub+0x54>
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	4664      	mov	r4, ip
 8000ac6:	4660      	mov	r0, ip
 8000ac8:	40fc      	lsrs	r4, r7
 8000aca:	1bdf      	subs	r7, r3, r7
 8000acc:	40b8      	lsls	r0, r7
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	4320      	orrs	r0, r4
 8000ad4:	e79f      	b.n	8000a16 <__aeabi_fsub+0x24a>
 8000ad6:	0005      	movs	r5, r0
 8000ad8:	e75e      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000ada:	464b      	mov	r3, r9
 8000adc:	e771      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 8000ade:	2320      	movs	r3, #32
 8000ae0:	4665      	mov	r5, ip
 8000ae2:	4660      	mov	r0, ip
 8000ae4:	40cd      	lsrs	r5, r1
 8000ae6:	1a59      	subs	r1, r3, r1
 8000ae8:	4088      	lsls	r0, r1
 8000aea:	1e43      	subs	r3, r0, #1
 8000aec:	4198      	sbcs	r0, r3
 8000aee:	4328      	orrs	r0, r5
 8000af0:	e71c      	b.n	800092c <__aeabi_fsub+0x160>
 8000af2:	4663      	mov	r3, ip
 8000af4:	000c      	movs	r4, r1
 8000af6:	2501      	movs	r5, #1
 8000af8:	1af0      	subs	r0, r6, r3
 8000afa:	e691      	b.n	8000820 <__aeabi_fsub+0x54>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d095      	beq.n	8000a2c <__aeabi_fsub+0x260>
 8000b00:	000c      	movs	r4, r1
 8000b02:	464f      	mov	r7, r9
 8000b04:	2200      	movs	r2, #0
 8000b06:	e6ac      	b.n	8000862 <__aeabi_fsub+0x96>
 8000b08:	464b      	mov	r3, r9
 8000b0a:	000d      	movs	r5, r1
 8000b0c:	e744      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000b0e:	464f      	mov	r7, r9
 8000b10:	2200      	movs	r2, #0
 8000b12:	e6a6      	b.n	8000862 <__aeabi_fsub+0x96>
 8000b14:	fbffffff 	.word	0xfbffffff
 8000b18:	7dffffff 	.word	0x7dffffff
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x356>
 8000b20:	e736      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000b22:	2400      	movs	r4, #0
 8000b24:	2700      	movs	r7, #0
 8000b26:	e69c      	b.n	8000862 <__aeabi_fsub+0x96>

08000b28 <__aeabi_f2iz>:
 8000b28:	0241      	lsls	r1, r0, #9
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0fc3      	lsrs	r3, r0, #31
 8000b2e:	0a49      	lsrs	r1, r1, #9
 8000b30:	2000      	movs	r0, #0
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	2a7e      	cmp	r2, #126	; 0x7e
 8000b36:	dd03      	ble.n	8000b40 <__aeabi_f2iz+0x18>
 8000b38:	2a9d      	cmp	r2, #157	; 0x9d
 8000b3a:	dd02      	ble.n	8000b42 <__aeabi_f2iz+0x1a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <__aeabi_f2iz+0x3c>)
 8000b3e:	1898      	adds	r0, r3, r2
 8000b40:	4770      	bx	lr
 8000b42:	2080      	movs	r0, #128	; 0x80
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	4301      	orrs	r1, r0
 8000b48:	2a95      	cmp	r2, #149	; 0x95
 8000b4a:	dc07      	bgt.n	8000b5c <__aeabi_f2iz+0x34>
 8000b4c:	2096      	movs	r0, #150	; 0x96
 8000b4e:	1a82      	subs	r2, r0, r2
 8000b50:	40d1      	lsrs	r1, r2
 8000b52:	4248      	negs	r0, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_f2iz+0x18>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_f2iz+0x18>
 8000b5c:	3a96      	subs	r2, #150	; 0x96
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	e7f7      	b.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	7fffffff 	.word	0x7fffffff

08000b68 <__aeabi_i2f>:
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d013      	beq.n	8000b96 <__aeabi_i2f+0x2e>
 8000b6e:	17c3      	asrs	r3, r0, #31
 8000b70:	18c6      	adds	r6, r0, r3
 8000b72:	405e      	eors	r6, r3
 8000b74:	0fc4      	lsrs	r4, r0, #31
 8000b76:	0030      	movs	r0, r6
 8000b78:	f000 f886 	bl	8000c88 <__clzsi2>
 8000b7c:	239e      	movs	r3, #158	; 0x9e
 8000b7e:	0005      	movs	r5, r0
 8000b80:	1a1b      	subs	r3, r3, r0
 8000b82:	2b96      	cmp	r3, #150	; 0x96
 8000b84:	dc0f      	bgt.n	8000ba6 <__aeabi_i2f+0x3e>
 8000b86:	2808      	cmp	r0, #8
 8000b88:	dd01      	ble.n	8000b8e <__aeabi_i2f+0x26>
 8000b8a:	3d08      	subs	r5, #8
 8000b8c:	40ae      	lsls	r6, r5
 8000b8e:	0276      	lsls	r6, r6, #9
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e002      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	2600      	movs	r6, #0
 8000b9c:	05c0      	lsls	r0, r0, #23
 8000b9e:	4330      	orrs	r0, r6
 8000ba0:	07e4      	lsls	r4, r4, #31
 8000ba2:	4320      	orrs	r0, r4
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba6:	2b99      	cmp	r3, #153	; 0x99
 8000ba8:	dd0c      	ble.n	8000bc4 <__aeabi_i2f+0x5c>
 8000baa:	2205      	movs	r2, #5
 8000bac:	0031      	movs	r1, r6
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	40d1      	lsrs	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	0001      	movs	r1, r0
 8000bb6:	0030      	movs	r0, r6
 8000bb8:	311b      	adds	r1, #27
 8000bba:	4088      	lsls	r0, r1
 8000bbc:	1e41      	subs	r1, r0, #1
 8000bbe:	4188      	sbcs	r0, r1
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	0016      	movs	r6, r2
 8000bc4:	2d05      	cmp	r5, #5
 8000bc6:	dc12      	bgt.n	8000bee <__aeabi_i2f+0x86>
 8000bc8:	0031      	movs	r1, r6
 8000bca:	4f0d      	ldr	r7, [pc, #52]	; (8000c00 <__aeabi_i2f+0x98>)
 8000bcc:	4039      	ands	r1, r7
 8000bce:	0772      	lsls	r2, r6, #29
 8000bd0:	d009      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	4030      	ands	r0, r6
 8000bd6:	2804      	cmp	r0, #4
 8000bd8:	d005      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bda:	3104      	adds	r1, #4
 8000bdc:	014a      	lsls	r2, r1, #5
 8000bde:	d502      	bpl.n	8000be6 <__aeabi_i2f+0x7e>
 8000be0:	239f      	movs	r3, #159	; 0x9f
 8000be2:	4039      	ands	r1, r7
 8000be4:	1b5b      	subs	r3, r3, r5
 8000be6:	0189      	lsls	r1, r1, #6
 8000be8:	0a4e      	lsrs	r6, r1, #9
 8000bea:	b2d8      	uxtb	r0, r3
 8000bec:	e7d6      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bee:	1f6a      	subs	r2, r5, #5
 8000bf0:	4096      	lsls	r6, r2
 8000bf2:	0031      	movs	r1, r6
 8000bf4:	4f02      	ldr	r7, [pc, #8]	; (8000c00 <__aeabi_i2f+0x98>)
 8000bf6:	4039      	ands	r1, r7
 8000bf8:	0772      	lsls	r2, r6, #29
 8000bfa:	d0f4      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bfc:	e7e9      	b.n	8000bd2 <__aeabi_i2f+0x6a>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	fbffffff 	.word	0xfbffffff

08000c04 <__aeabi_ui2f>:
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	1e05      	subs	r5, r0, #0
 8000c08:	d00e      	beq.n	8000c28 <__aeabi_ui2f+0x24>
 8000c0a:	f000 f83d 	bl	8000c88 <__clzsi2>
 8000c0e:	239e      	movs	r3, #158	; 0x9e
 8000c10:	0004      	movs	r4, r0
 8000c12:	1a1b      	subs	r3, r3, r0
 8000c14:	2b96      	cmp	r3, #150	; 0x96
 8000c16:	dc0c      	bgt.n	8000c32 <__aeabi_ui2f+0x2e>
 8000c18:	2808      	cmp	r0, #8
 8000c1a:	dd01      	ble.n	8000c20 <__aeabi_ui2f+0x1c>
 8000c1c:	3c08      	subs	r4, #8
 8000c1e:	40a5      	lsls	r5, r4
 8000c20:	026d      	lsls	r5, r5, #9
 8000c22:	0a6d      	lsrs	r5, r5, #9
 8000c24:	b2d8      	uxtb	r0, r3
 8000c26:	e001      	b.n	8000c2c <__aeabi_ui2f+0x28>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	05c0      	lsls	r0, r0, #23
 8000c2e:	4328      	orrs	r0, r5
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
 8000c32:	2b99      	cmp	r3, #153	; 0x99
 8000c34:	dd09      	ble.n	8000c4a <__aeabi_ui2f+0x46>
 8000c36:	0002      	movs	r2, r0
 8000c38:	0029      	movs	r1, r5
 8000c3a:	321b      	adds	r2, #27
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	1e4a      	subs	r2, r1, #1
 8000c40:	4191      	sbcs	r1, r2
 8000c42:	2205      	movs	r2, #5
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	40d5      	lsrs	r5, r2
 8000c48:	430d      	orrs	r5, r1
 8000c4a:	2c05      	cmp	r4, #5
 8000c4c:	dc12      	bgt.n	8000c74 <__aeabi_ui2f+0x70>
 8000c4e:	0029      	movs	r1, r5
 8000c50:	4e0c      	ldr	r6, [pc, #48]	; (8000c84 <__aeabi_ui2f+0x80>)
 8000c52:	4031      	ands	r1, r6
 8000c54:	076a      	lsls	r2, r5, #29
 8000c56:	d009      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c58:	200f      	movs	r0, #15
 8000c5a:	4028      	ands	r0, r5
 8000c5c:	2804      	cmp	r0, #4
 8000c5e:	d005      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c60:	3104      	adds	r1, #4
 8000c62:	014a      	lsls	r2, r1, #5
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_ui2f+0x68>
 8000c66:	239f      	movs	r3, #159	; 0x9f
 8000c68:	4031      	ands	r1, r6
 8000c6a:	1b1b      	subs	r3, r3, r4
 8000c6c:	0189      	lsls	r1, r1, #6
 8000c6e:	0a4d      	lsrs	r5, r1, #9
 8000c70:	b2d8      	uxtb	r0, r3
 8000c72:	e7db      	b.n	8000c2c <__aeabi_ui2f+0x28>
 8000c74:	1f62      	subs	r2, r4, #5
 8000c76:	4095      	lsls	r5, r2
 8000c78:	0029      	movs	r1, r5
 8000c7a:	4e02      	ldr	r6, [pc, #8]	; (8000c84 <__aeabi_ui2f+0x80>)
 8000c7c:	4031      	ands	r1, r6
 8000c7e:	076a      	lsls	r2, r5, #29
 8000c80:	d0f4      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c82:	e7e9      	b.n	8000c58 <__aeabi_ui2f+0x54>
 8000c84:	fbffffff 	.word	0xfbffffff

08000c88 <__clzsi2>:
 8000c88:	211c      	movs	r1, #28
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d301      	bcc.n	8000c96 <__clzsi2+0xe>
 8000c92:	0c00      	lsrs	r0, r0, #16
 8000c94:	3910      	subs	r1, #16
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	d301      	bcc.n	8000ca0 <__clzsi2+0x18>
 8000c9c:	0a00      	lsrs	r0, r0, #8
 8000c9e:	3908      	subs	r1, #8
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d301      	bcc.n	8000caa <__clzsi2+0x22>
 8000ca6:	0900      	lsrs	r0, r0, #4
 8000ca8:	3904      	subs	r1, #4
 8000caa:	a202      	add	r2, pc, #8	; (adr r2, 8000cb4 <__clzsi2+0x2c>)
 8000cac:	5c10      	ldrb	r0, [r2, r0]
 8000cae:	1840      	adds	r0, r0, r1
 8000cb0:	4770      	bx	lr
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	02020304 	.word	0x02020304
 8000cb8:	01010101 	.word	0x01010101
	...

08000cc4 <bytestowrite>:
  * @param  size: Size of the data.
  * @param  offset: Start byte offset in the page.
  * @retval Number of bytes remaining to write.
  */
static uint16_t bytestowrite(uint16_t size, uint16_t offset)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	1c0a      	adds	r2, r1, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
  if ((size + offset) < PAGE_SIZE) return size;
 8000cd6:	1dbb      	adds	r3, r7, #6
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	18d3      	adds	r3, r2, r3
 8000ce0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce2:	dc02      	bgt.n	8000cea <bytestowrite+0x26>
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	e004      	b.n	8000cf4 <bytestowrite+0x30>
  else return PAGE_SIZE - offset;
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29b      	uxth	r3, r3
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <EEPROM_Write>:
  float float_variable = thing.a;
  return float_variable;
}

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfe:	b08f      	sub	sp, #60	; 0x3c
 8000d00:	af04      	add	r7, sp, #16
 8000d02:	0004      	movs	r4, r0
 8000d04:	0008      	movs	r0, r1
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	0019      	movs	r1, r3
 8000d0a:	250e      	movs	r5, #14
 8000d0c:	197b      	adds	r3, r7, r5
 8000d0e:	1c22      	adds	r2, r4, #0
 8000d10:	801a      	strh	r2, [r3, #0]
 8000d12:	240c      	movs	r4, #12
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	1c02      	adds	r2, r0, #0
 8000d18:	801a      	strh	r2, [r3, #0]
 8000d1a:	1dbb      	adds	r3, r7, #6
 8000d1c:	1c0a      	adds	r2, r1, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
  // Find out the number of bit, where the page addressing starts
  int paddrposition = log(PAGE_SIZE) / log(2);
 8000d20:	2306      	movs	r3, #6
 8000d22:	61fb      	str	r3, [r7, #28]

  // Calculate the start page and the end page
  uint16_t startPage = page;
 8000d24:	2326      	movs	r3, #38	; 0x26
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	197a      	adds	r2, r7, r5
 8000d2a:	8812      	ldrh	r2, [r2, #0]
 8000d2c:	801a      	strh	r2, [r3, #0]
  uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da00      	bge.n	8000d3e <EEPROM_Write+0x42>
 8000d3c:	333f      	adds	r3, #63	; 0x3f
 8000d3e:	119b      	asrs	r3, r3, #6
 8000d40:	b299      	uxth	r1, r3
 8000d42:	201a      	movs	r0, #26
 8000d44:	183b      	adds	r3, r7, r0
 8000d46:	220e      	movs	r2, #14
 8000d48:	18ba      	adds	r2, r7, r2
 8000d4a:	8812      	ldrh	r2, [r2, #0]
 8000d4c:	188a      	adds	r2, r1, r2
 8000d4e:	801a      	strh	r2, [r3, #0]

  // Number of pages to be written
  uint16_t numofpages = (endPage - startPage) + 1;
 8000d50:	183a      	adds	r2, r7, r0
 8000d52:	2326      	movs	r3, #38	; 0x26
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	8812      	ldrh	r2, [r2, #0]
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	2318      	movs	r3, #24
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	3201      	adds	r2, #1
 8000d64:	801a      	strh	r2, [r3, #0]
  uint16_t pos = 0;
 8000d66:	2324      	movs	r3, #36	; 0x24
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]

  // Write the data
  for (int i = 0; i < numofpages; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
 8000d72:	e04d      	b.n	8000e10 <EEPROM_Write+0x114>
  {
        // Calculate the address of the memory location
    // Here we add the page address with the byte address
    uint16_t MemAddress = startPage << paddrposition | offset;
 8000d74:	2626      	movs	r6, #38	; 0x26
 8000d76:	19bb      	adds	r3, r7, r6
 8000d78:	881a      	ldrh	r2, [r3, #0]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	210c      	movs	r1, #12
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2000      	movs	r0, #0
 8000d88:	5e1b      	ldrsh	r3, [r3, r0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	2316      	movs	r3, #22
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	801a      	strh	r2, [r3, #0]
    uint16_t bytesremaining = bytestowrite(size, offset);  // Calculate the remaining bytes to be written
 8000d94:	2514      	movs	r5, #20
 8000d96:	197c      	adds	r4, r7, r5
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	881a      	ldrh	r2, [r3, #0]
 8000d9c:	1dbb      	adds	r3, r7, #6
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff ff8e 	bl	8000cc4 <bytestowrite>
 8000da8:	0003      	movs	r3, r0
 8000daa:	8023      	strh	r3, [r4, #0]

    HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // Write the data to the EEPROM
 8000dac:	2424      	movs	r4, #36	; 0x24
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	2216      	movs	r2, #22
 8000db8:	18ba      	adds	r2, r7, r2
 8000dba:	8811      	ldrh	r1, [r2, #0]
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <EEPROM_Write+0x12c>)
 8000dbe:	22fa      	movs	r2, #250	; 0xfa
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	9202      	str	r2, [sp, #8]
 8000dc4:	197a      	adds	r2, r7, r5
 8000dc6:	8812      	ldrh	r2, [r2, #0]
 8000dc8:	9201      	str	r2, [sp, #4]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2302      	movs	r3, #2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	21a0      	movs	r1, #160	; 0xa0
 8000dd2:	f001 ffad 	bl	8002d30 <HAL_I2C_Mem_Write>

    startPage += 1;  // Increment the page, so that a new page address can be selected for further write
 8000dd6:	19bb      	adds	r3, r7, r6
 8000dd8:	19ba      	adds	r2, r7, r6
 8000dda:	8812      	ldrh	r2, [r2, #0]
 8000ddc:	3201      	adds	r2, #1
 8000dde:	801a      	strh	r2, [r3, #0]
    offset = 0;   // Since we will be writing to a new page, so offset will be 0
 8000de0:	210c      	movs	r1, #12
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	801a      	strh	r2, [r3, #0]
    size = size - bytesremaining;  // Reduce the size of the bytes
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	1db9      	adds	r1, r7, #6
 8000dec:	197a      	adds	r2, r7, r5
 8000dee:	8809      	ldrh	r1, [r1, #0]
 8000df0:	8812      	ldrh	r2, [r2, #0]
 8000df2:	1a8a      	subs	r2, r1, r2
 8000df4:	801a      	strh	r2, [r3, #0]
    pos += bytesremaining;  // Update the position for the data buffer
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	1939      	adds	r1, r7, r4
 8000dfa:	197a      	adds	r2, r7, r5
 8000dfc:	8809      	ldrh	r1, [r1, #0]
 8000dfe:	8812      	ldrh	r2, [r2, #0]
 8000e00:	188a      	adds	r2, r1, r2
 8000e02:	801a      	strh	r2, [r3, #0]

    HAL_Delay(5);  // Write cycle delay (5ms)
 8000e04:	2005      	movs	r0, #5
 8000e06:	f000 ffc3 	bl	8001d90 <HAL_Delay>
  for (int i = 0; i < numofpages; i++)
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	2318      	movs	r3, #24
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbab      	blt.n	8000d74 <EEPROM_Write+0x78>
  }
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00b      	add	sp, #44	; 0x2c
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	200000dc 	.word	0x200000dc

08000e2c <LDR_Init>:
static float c;

/**
 * @brief Initialize the LDR with calibration constants
 */
void LDR_Init(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
    m = 2.675f;
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <LDR_Init+0x18>)
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <LDR_Init+0x1c>)
 8000e34:	601a      	str	r2, [r3, #0]
    c = -66.88f;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <LDR_Init+0x20>)
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <LDR_Init+0x24>)
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	20000094 	.word	0x20000094
 8000e48:	402b3333 	.word	0x402b3333
 8000e4c:	20000098 	.word	0x20000098
 8000e50:	c285c28f 	.word	0xc285c28f

08000e54 <LDR_ReadADC>:
/**
 * @brief Read ADC value from the LDR
 * @param hadc Pointer to an ADC_HandleTypeDef structure that contains the configuration information for the specified ADC
 * @return 32-bit unsigned integer ADC value
 */
uint32_t LDR_ReadADC(ADC_HandleTypeDef *hadc) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    uint32_t adc_value;

    // Start ADC conversion
    HAL_ADC_Start(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f001 f8fa 	bl	8002058 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	210a      	movs	r1, #10
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 f989 	bl	8002180 <HAL_ADC_PollForConversion>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d105      	bne.n	8000e7e <LDR_ReadADC+0x2a>
        // Read ADC value
        adc_value = HAL_ADC_GetValue(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 fa1b 	bl	80022b0 <HAL_ADC_GetValue>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	60fb      	str	r3, [r7, #12]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 f93d 	bl	8002100 <HAL_ADC_Stop>

    return adc_value;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b004      	add	sp, #16
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <LDR_ReadAnalogLightIntensity>:
/**
 * @brief Read analog light intensity using the LDR
 * @param hadc Pointer to an ADC_HandleTypeDef structure that contains the configuration information for the specified ADC
 * @return Floating-point light intensity value
 */
float LDR_ReadAnalogLightIntensity(ADC_HandleTypeDef *hadc) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    uint32_t adc_value = LDR_ReadADC(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff ffda 	bl	8000e54 <LDR_ReadADC>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	60fb      	str	r3, [r7, #12]
    return m * adc_value + c;
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fead 	bl	8000c04 <__aeabi_ui2f>
 8000eaa:	1c02      	adds	r2, r0, #0
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <LDR_ReadAnalogLightIntensity+0x44>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	1c19      	adds	r1, r3, #0
 8000eb2:	1c10      	adds	r0, r2, #0
 8000eb4:	f7ff fb64 	bl	8000580 <__aeabi_fmul>
 8000eb8:	1c03      	adds	r3, r0, #0
 8000eba:	1c1a      	adds	r2, r3, #0
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <LDR_ReadAnalogLightIntensity+0x48>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	1c19      	adds	r1, r3, #0
 8000ec2:	1c10      	adds	r0, r2, #0
 8000ec4:	f7ff f9be 	bl	8000244 <__aeabi_fadd>
 8000ec8:	1c03      	adds	r3, r0, #0
}
 8000eca:	1c18      	adds	r0, r3, #0
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20000094 	.word	0x20000094
 8000ed8:	20000098 	.word	0x20000098

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fef2 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f84a 	bl	8000f7c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 fa40 	bl	800136c <MX_GPIO_Init>
  MX_ADC_Init();
 8000eec:	f000 f8ba 	bl	8001064 <MX_ADC_Init>
  MX_I2C1_Init();
 8000ef0:	f000 f914 	bl	800111c <MX_I2C1_Init>
  MX_RTC_Init();
 8000ef4:	f000 f952 	bl	800119c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000ef8:	f000 fa08 	bl	800130c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000efc:	f000 f9b0 	bl	8001260 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Set calibration constants for the LDR
  LDR_Init();
 8000f00:	f7ff ff94 	bl	8000e2c <LDR_Init>

  //Set Time and Date
    status = RTC_SetTime(&hrtc, hours, minutes, seconds);
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <main+0x74>)
 8000f06:	7819      	ldrb	r1, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <main+0x78>)
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <main+0x7c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4812      	ldr	r0, [pc, #72]	; (8000f5c <main+0x80>)
 8000f12:	f000 fbee 	bl	80016f2 <RTC_SetTime>
 8000f16:	0003      	movs	r3, r0
 8000f18:	001a      	movs	r2, r3
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <main+0x84>)
 8000f1c:	701a      	strb	r2, [r3, #0]

    if (status != HAL_OK) {
        // Handle error
    }

    RTC_SetDate(&hrtc, day, month, year);
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <main+0x88>)
 8000f20:	7819      	ldrb	r1, [r3, #0]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <main+0x8c>)
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <main+0x90>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <main+0x80>)
 8000f2c:	f000 fc47 	bl	80017be <RTC_SetDate>

    //Initiliaze temperature sensor
    if (TMP102_Init(&hi2c1) != HAL_OK) {
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <main+0x94>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 fe32 	bl	8001b9c <TMP102_Init>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d007      	beq.n	8000f4c <main+0x70>
          // Handle error (e.g., turn on an LED or print a message)
    	  strcpy((char*)temp_string,"Error Tx\r\n");
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <main+0x98>)
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <main+0x9c>)
 8000f40:	ca03      	ldmia	r2!, {r0, r1}
 8000f42:	c303      	stmia	r3!, {r0, r1}
 8000f44:	8811      	ldrh	r1, [r2, #0]
 8000f46:	8019      	strh	r1, [r3, #0]
 8000f48:	7892      	ldrb	r2, [r2, #2]
 8000f4a:	709a      	strb	r2, [r3, #2]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <main+0x70>
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000001 	.word	0x20000001
 8000f58:	20000220 	.word	0x20000220
 8000f5c:	20000130 	.word	0x20000130
 8000f60:	2000025a 	.word	0x2000025a
 8000f64:	20000002 	.word	0x20000002
 8000f68:	20000003 	.word	0x20000003
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	200000dc 	.word	0x200000dc
 8000f74:	20000244 	.word	0x20000244
 8000f78:	080062c0 	.word	0x080062c0

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b097      	sub	sp, #92	; 0x5c
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	2428      	movs	r4, #40	; 0x28
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	0018      	movs	r0, r3
 8000f88:	2330      	movs	r3, #48	; 0x30
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f004 fd19 	bl	80059c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f92:	2318      	movs	r3, #24
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	0018      	movs	r0, r3
 8000f98:	2310      	movs	r3, #16
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f004 fd11 	bl	80059c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	2314      	movs	r3, #20
 8000fa8:	001a      	movs	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	f004 fd0a 	bl	80059c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000fb0:	0021      	movs	r1, r4
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	221a      	movs	r2, #26
 8000fb6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2201      	movs	r2, #1
 8000fbc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2210      	movs	r2, #16
 8000fce:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2202      	movs	r2, #2
 8000fda:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	22a0      	movs	r2, #160	; 0xa0
 8000fe6:	0392      	lsls	r2, r2, #14
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f002 fc90 	bl	8003918 <HAL_RCC_OscConfig>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ffc:	f000 fb74 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	2118      	movs	r1, #24
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2202      	movs	r2, #2
 800100c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2101      	movs	r1, #1
 800101e:	0018      	movs	r0, r3
 8001020:	f002 ff94 	bl	8003f4c <HAL_RCC_ClockConfig>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001028:	f000 fb5e 	bl	80016e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <SystemClock_Config+0xe4>)
 8001030:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	0018      	movs	r0, r3
 800104a:	f003 f8c3 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	1e03      	subs	r3, r0, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001052:	f000 fb49 	bl	80016e8 <Error_Handler>
  }
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b017      	add	sp, #92	; 0x5c
 800105c:	bd90      	pop	{r4, r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	00010021 	.word	0x00010021

08001064 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	0018      	movs	r0, r3
 800106e:	230c      	movs	r3, #12
 8001070:	001a      	movs	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f004 fca6 	bl	80059c4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_ADC_Init+0xb0>)
 800107a:	4a27      	ldr	r2, [pc, #156]	; (8001118 <MX_ADC_Init+0xb4>)
 800107c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_ADC_Init+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_ADC_Init+0xb0>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_ADC_Init+0xb0>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ADC_Init+0xb0>)
 8001092:	2201      	movs	r2, #1
 8001094:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_ADC_Init+0xb0>)
 8001098:	2204      	movs	r2, #4
 800109a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_ADC_Init+0xb0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_ADC_Init+0xb0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC_Init+0xb0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_ADC_Init+0xb0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_ADC_Init+0xb0>)
 80010b6:	22c2      	movs	r2, #194	; 0xc2
 80010b8:	32ff      	adds	r2, #255	; 0xff
 80010ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_ADC_Init+0xb0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_ADC_Init+0xb0>)
 80010c4:	2224      	movs	r2, #36	; 0x24
 80010c6:	2100      	movs	r1, #0
 80010c8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_ADC_Init+0xb0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_ADC_Init+0xb0>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 fe80 	bl	8001dd8 <HAL_ADC_Init>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 fb04 	bl	80016e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2205      	movs	r2, #5
 80010e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	0152      	lsls	r2, r2, #5
 80010ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	0552      	lsls	r2, r2, #21
 80010f4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010f6:	1d3a      	adds	r2, r7, #4
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_ADC_Init+0xb0>)
 80010fa:	0011      	movs	r1, r2
 80010fc:	0018      	movs	r0, r3
 80010fe:	f001 f8e3 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001106:	f000 faef 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	2000009c 	.word	0x2000009c
 8001118:	40012400 	.word	0x40012400

0800111c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_I2C1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_I2C1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_I2C1_Init+0x74>)
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <MX_I2C1_Init+0x7c>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_I2C1_Init+0x74>)
 8001134:	2201      	movs	r2, #1
 8001136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_I2C1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_I2C1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_I2C1_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_I2C1_Init+0x74>)
 8001158:	0018      	movs	r0, r3
 800115a:	f001 fd53 	bl	8002c04 <HAL_I2C_Init>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001162:	f000 fac1 	bl	80016e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_I2C1_Init+0x74>)
 8001168:	2100      	movs	r1, #0
 800116a:	0018      	movs	r0, r3
 800116c:	f002 fb3c 	bl	80037e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001174:	f000 fab8 	bl	80016e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <MX_I2C1_Init+0x74>)
 800117a:	2100      	movs	r1, #0
 800117c:	0018      	movs	r0, r3
 800117e:	f002 fb7f 	bl	8003880 <HAL_I2CEx_ConfigDigitalFilter>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001186:	f000 faaf 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000dc 	.word	0x200000dc
 8001194:	40005400 	.word	0x40005400
 8001198:	2000090e 	.word	0x2000090e

0800119c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	0018      	movs	r0, r3
 80011a6:	2314      	movs	r3, #20
 80011a8:	001a      	movs	r2, r3
 80011aa:	2100      	movs	r1, #0
 80011ac:	f004 fc0a 	bl	80059c4 <memset>
  RTC_DateTypeDef sDate = {0};
 80011b0:	003b      	movs	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <MX_RTC_Init+0xbc>)
 80011b8:	4a28      	ldr	r2, [pc, #160]	; (800125c <MX_RTC_Init+0xc0>)
 80011ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <MX_RTC_Init+0xbc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <MX_RTC_Init+0xbc>)
 80011c4:	227f      	movs	r2, #127	; 0x7f
 80011c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MX_RTC_Init+0xbc>)
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_RTC_Init+0xbc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_RTC_Init+0xbc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_RTC_Init+0xbc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_RTC_Init+0xbc>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f003 f8d4 	bl	8004390 <HAL_RTC_Init>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80011ec:	f000 fa7c 	bl	80016e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800120e:	1d39      	adds	r1, r7, #4
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_RTC_Init+0xbc>)
 8001212:	2201      	movs	r2, #1
 8001214:	0018      	movs	r0, r3
 8001216:	f003 f953 	bl	80044c0 <HAL_RTC_SetTime>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800121e:	f000 fa63 	bl	80016e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001222:	003b      	movs	r3, r7
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001228:	003b      	movs	r3, r7
 800122a:	2201      	movs	r2, #1
 800122c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800122e:	003b      	movs	r3, r7
 8001230:	2201      	movs	r2, #1
 8001232:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001234:	003b      	movs	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800123a:	0039      	movs	r1, r7
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_RTC_Init+0xbc>)
 800123e:	2201      	movs	r2, #1
 8001240:	0018      	movs	r0, r3
 8001242:	f003 fa41 	bl	80046c8 <HAL_RTC_SetDate>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d001      	beq.n	800124e <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800124a:	f000 fa4d 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b006      	add	sp, #24
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	20000130 	.word	0x20000130
 800125c:	40002800 	.word	0x40002800

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	2308      	movs	r3, #8
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	0018      	movs	r0, r3
 800126c:	2310      	movs	r3, #16
 800126e:	001a      	movs	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	f004 fba7 	bl	80059c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	003b      	movs	r3, r7
 8001278:	0018      	movs	r0, r3
 800127a:	2308      	movs	r3, #8
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f004 fba0 	bl	80059c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_TIM2_Init+0xa4>)
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	05d2      	lsls	r2, r2, #23
 800128a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM2_Init+0xa4>)
 800128e:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <MX_TIM2_Init+0xa8>)
 8001290:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM2_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 28800;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM2_Init+0xa4>)
 800129a:	22e1      	movs	r2, #225	; 0xe1
 800129c:	01d2      	lsls	r2, r2, #7
 800129e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f003 fbbe 	bl	8004a30 <HAL_TIM_Base_Init>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 fa16 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012bc:	2108      	movs	r1, #8
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	0152      	lsls	r2, r2, #5
 80012c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c6:	187a      	adds	r2, r7, r1
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f003 fd15 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80012d6:	f000 fa07 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	003b      	movs	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	003b      	movs	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e6:	003a      	movs	r2, r7
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f003 ff13 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012f6:	f000 f9f7 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b006      	add	sp, #24
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	20000150 	.word	0x20000150
 8001308:	00002710 	.word	0x00002710

0800130c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <MX_USART1_UART_Init+0x5c>)
 8001314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001318:	2296      	movs	r2, #150	; 0x96
 800131a:	0212      	lsls	r2, r2, #8
 800131c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_USART1_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_USART1_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001350:	0018      	movs	r0, r3
 8001352:	f003 ff4f 	bl	80051f4 <HAL_UART_Init>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800135a:	f000 f9c5 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000198 	.word	0x20000198
 8001368:	40013800 	.word	0x40013800

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	2414      	movs	r4, #20
 8001374:	193b      	adds	r3, r7, r4
 8001376:	0018      	movs	r0, r3
 8001378:	2314      	movs	r3, #20
 800137a:	001a      	movs	r2, r3
 800137c:	2100      	movs	r1, #0
 800137e:	f004 fb21 	bl	80059c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_GPIO_Init+0xb0>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <MX_GPIO_Init+0xb0>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0309      	lsls	r1, r1, #12
 800138c:	430a      	orrs	r2, r1
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <MX_GPIO_Init+0xb0>)
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	031b      	lsls	r3, r3, #12
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_GPIO_Init+0xb0>)
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_GPIO_Init+0xb0>)
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	03c9      	lsls	r1, r1, #15
 80013a8:	430a      	orrs	r2, r1
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_GPIO_Init+0xb0>)
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	03db      	lsls	r3, r3, #15
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_GPIO_Init+0xb0>)
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_GPIO_Init+0xb0>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0289      	lsls	r1, r1, #10
 80013c4:	430a      	orrs	r2, r1
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_GPIO_Init+0xb0>)
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	029b      	lsls	r3, r3, #10
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_GPIO_Init+0xb0>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_GPIO_Init+0xb0>)
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	02c9      	lsls	r1, r1, #11
 80013e0:	430a      	orrs	r2, r1
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <MX_GPIO_Init+0xb0>)
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	02db      	lsls	r3, r3, #11
 80013ec:	4013      	ands	r3, r2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	00d2      	lsls	r2, r2, #3
 80013f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	2288      	movs	r2, #136	; 0x88
 80013fe:	0352      	lsls	r2, r2, #13
 8001400:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001402:	193b      	adds	r3, r7, r4
 8001404:	2201      	movs	r2, #1
 8001406:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	193b      	adds	r3, r7, r4
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <MX_GPIO_Init+0xb4>)
 800140c:	0019      	movs	r1, r3
 800140e:	0010      	movs	r0, r2
 8001410:	f001 fa88 	bl	8002924 <HAL_GPIO_Init>

}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b00b      	add	sp, #44	; 0x2c
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400

08001424 <read_and_store_data>:

/* USER CODE BEGIN 4 */

void read_and_store_data(void)
{
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	46c6      	mov	lr, r8
 8001428:	b500      	push	{lr}
 800142a:	b090      	sub	sp, #64	; 0x40
 800142c:	af02      	add	r7, sp, #8
 800142e:	466b      	mov	r3, sp
 8001430:	4698      	mov	r8, r3
    // If the EEPROM is full, don't perform any write operations
    if(eeprom_full) {
 8001432:	4b91      	ldr	r3, [pc, #580]	; (8001678 <read_and_store_data+0x254>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <read_and_store_data+0x1a>
 800143a:	46c5      	mov	sp, r8
 800143c:	e117      	b.n	800166e <read_and_store_data+0x24a>
        return;
    }
	  //Read Light Intensity
	  light_intensity = LDR_ReadAnalogLightIntensity(&hadc);
 800143e:	4b8f      	ldr	r3, [pc, #572]	; (800167c <read_and_store_data+0x258>)
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fd25 	bl	8000e90 <LDR_ReadAnalogLightIntensity>
 8001446:	1c02      	adds	r2, r0, #0
 8001448:	4b8d      	ldr	r3, [pc, #564]	; (8001680 <read_and_store_data+0x25c>)
 800144a:	601a      	str	r2, [r3, #0]

	  int light_whole = (int)light_intensity;
 800144c:	4b8c      	ldr	r3, [pc, #560]	; (8001680 <read_and_store_data+0x25c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1c18      	adds	r0, r3, #0
 8001452:	f7ff fb69 	bl	8000b28 <__aeabi_f2iz>
 8001456:	0003      	movs	r3, r0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
	  int light_frac = (int)(100 * (light_intensity - light_whole));
 800145a:	4b89      	ldr	r3, [pc, #548]	; (8001680 <read_and_store_data+0x25c>)
 800145c:	681c      	ldr	r4, [r3, #0]
 800145e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001460:	f7ff fb82 	bl	8000b68 <__aeabi_i2f>
 8001464:	1c03      	adds	r3, r0, #0
 8001466:	1c19      	adds	r1, r3, #0
 8001468:	1c20      	adds	r0, r4, #0
 800146a:	f7ff f9af 	bl	80007cc <__aeabi_fsub>
 800146e:	1c03      	adds	r3, r0, #0
 8001470:	4984      	ldr	r1, [pc, #528]	; (8001684 <read_and_store_data+0x260>)
 8001472:	1c18      	adds	r0, r3, #0
 8001474:	f7ff f884 	bl	8000580 <__aeabi_fmul>
 8001478:	1c03      	adds	r3, r0, #0
 800147a:	1c18      	adds	r0, r3, #0
 800147c:	f7ff fb54 	bl	8000b28 <__aeabi_f2iz>
 8001480:	0003      	movs	r3, r0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
	  sprintf(light_string, "%d.%02d", light_whole, light_frac);
 8001484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001488:	497f      	ldr	r1, [pc, #508]	; (8001688 <read_and_store_data+0x264>)
 800148a:	4880      	ldr	r0, [pc, #512]	; (800168c <read_and_store_data+0x268>)
 800148c:	f004 faa2 	bl	80059d4 <siprintf>

	  //Read Temperature
	  temperature = TMP102_ReadTemperature(&hi2c1);
 8001490:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <read_and_store_data+0x26c>)
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fbb4 	bl	8001c00 <TMP102_ReadTemperature>
 8001498:	1c02      	adds	r2, r0, #0
 800149a:	4b7e      	ldr	r3, [pc, #504]	; (8001694 <read_and_store_data+0x270>)
 800149c:	601a      	str	r2, [r3, #0]
	  int temp_whole = (int)temperature;
 800149e:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <read_and_store_data+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1c18      	adds	r0, r3, #0
 80014a4:	f7ff fb40 	bl	8000b28 <__aeabi_f2iz>
 80014a8:	0003      	movs	r3, r0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  int temp_frac = (int)(100 * (temperature - temp_whole));
 80014ac:	4b79      	ldr	r3, [pc, #484]	; (8001694 <read_and_store_data+0x270>)
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014b2:	f7ff fb59 	bl	8000b68 <__aeabi_i2f>
 80014b6:	1c03      	adds	r3, r0, #0
 80014b8:	1c19      	adds	r1, r3, #0
 80014ba:	1c20      	adds	r0, r4, #0
 80014bc:	f7ff f986 	bl	80007cc <__aeabi_fsub>
 80014c0:	1c03      	adds	r3, r0, #0
 80014c2:	4970      	ldr	r1, [pc, #448]	; (8001684 <read_and_store_data+0x260>)
 80014c4:	1c18      	adds	r0, r3, #0
 80014c6:	f7ff f85b 	bl	8000580 <__aeabi_fmul>
 80014ca:	1c03      	adds	r3, r0, #0
 80014cc:	1c18      	adds	r0, r3, #0
 80014ce:	f7ff fb2b 	bl	8000b28 <__aeabi_f2iz>
 80014d2:	0003      	movs	r3, r0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
	  sprintf(temp_string, "%d.%02d", temp_whole, temp_frac);
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014da:	496b      	ldr	r1, [pc, #428]	; (8001688 <read_and_store_data+0x264>)
 80014dc:	486e      	ldr	r0, [pc, #440]	; (8001698 <read_and_store_data+0x274>)
 80014de:	f004 fa79 	bl	80059d4 <siprintf>

	   //Get the date
	   RTC_GetDate(&hrtc, &dayread, &monthread, &yearread);
 80014e2:	4b6e      	ldr	r3, [pc, #440]	; (800169c <read_and_store_data+0x278>)
 80014e4:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <read_and_store_data+0x27c>)
 80014e6:	496f      	ldr	r1, [pc, #444]	; (80016a4 <read_and_store_data+0x280>)
 80014e8:	486f      	ldr	r0, [pc, #444]	; (80016a8 <read_and_store_data+0x284>)
 80014ea:	f000 f992 	bl	8001812 <RTC_GetDate>
	   // Convert the integers to a string
	   sprintf(date_string, "%02d-%02d-%02d", dayread, monthread, yearread);
 80014ee:	4b6d      	ldr	r3, [pc, #436]	; (80016a4 <read_and_store_data+0x280>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	001c      	movs	r4, r3
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <read_and_store_data+0x27c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	001a      	movs	r2, r3
 80014fa:	4b68      	ldr	r3, [pc, #416]	; (800169c <read_and_store_data+0x278>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	496b      	ldr	r1, [pc, #428]	; (80016ac <read_and_store_data+0x288>)
 8001500:	486b      	ldr	r0, [pc, #428]	; (80016b0 <read_and_store_data+0x28c>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	0013      	movs	r3, r2
 8001506:	0022      	movs	r2, r4
 8001508:	f004 fa64 	bl	80059d4 <siprintf>

	   //Get the time
	   status = RTC_GetTime(&hrtc, &read_hours, &read_minutes, &read_seconds);
 800150c:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <read_and_store_data+0x290>)
 800150e:	4a6a      	ldr	r2, [pc, #424]	; (80016b8 <read_and_store_data+0x294>)
 8001510:	496a      	ldr	r1, [pc, #424]	; (80016bc <read_and_store_data+0x298>)
 8001512:	4865      	ldr	r0, [pc, #404]	; (80016a8 <read_and_store_data+0x284>)
 8001514:	f000 f923 	bl	800175e <RTC_GetTime>
 8001518:	0003      	movs	r3, r0
 800151a:	001a      	movs	r2, r3
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <read_and_store_data+0x29c>)
 800151e:	701a      	strb	r2, [r3, #0]
	   if (status != HAL_OK) {
	       // Handle error
	   }

	   // Convert the integers to a string
	   sprintf(time_string, "%02d:%02d:%02d", read_hours, read_minutes, read_seconds);
 8001520:	4b66      	ldr	r3, [pc, #408]	; (80016bc <read_and_store_data+0x298>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	001c      	movs	r4, r3
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <read_and_store_data+0x294>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	001a      	movs	r2, r3
 800152c:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <read_and_store_data+0x290>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4964      	ldr	r1, [pc, #400]	; (80016c4 <read_and_store_data+0x2a0>)
 8001532:	4865      	ldr	r0, [pc, #404]	; (80016c8 <read_and_store_data+0x2a4>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	0013      	movs	r3, r2
 8001538:	0022      	movs	r2, r4
 800153a:	f004 fa4b 	bl	80059d4 <siprintf>

	    // Calculate the size of the message
	    uint16_t message_size = strlen(light_string) + strlen(temp_string) + strlen(date_string) + strlen(time_string) + 3; // 3 for the ',' separators
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <read_and_store_data+0x268>)
 8001540:	0018      	movs	r0, r3
 8001542:	f7fe fde1 	bl	8000108 <strlen>
 8001546:	0003      	movs	r3, r0
 8001548:	b29c      	uxth	r4, r3
 800154a:	4b53      	ldr	r3, [pc, #332]	; (8001698 <read_and_store_data+0x274>)
 800154c:	0018      	movs	r0, r3
 800154e:	f7fe fddb 	bl	8000108 <strlen>
 8001552:	0003      	movs	r3, r0
 8001554:	b29b      	uxth	r3, r3
 8001556:	18e3      	adds	r3, r4, r3
 8001558:	b29c      	uxth	r4, r3
 800155a:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <read_and_store_data+0x28c>)
 800155c:	0018      	movs	r0, r3
 800155e:	f7fe fdd3 	bl	8000108 <strlen>
 8001562:	0003      	movs	r3, r0
 8001564:	b29b      	uxth	r3, r3
 8001566:	18e3      	adds	r3, r4, r3
 8001568:	b29c      	uxth	r4, r3
 800156a:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <read_and_store_data+0x2a4>)
 800156c:	0018      	movs	r0, r3
 800156e:	f7fe fdcb 	bl	8000108 <strlen>
 8001572:	0003      	movs	r3, r0
 8001574:	b29b      	uxth	r3, r3
 8001576:	18e3      	adds	r3, r4, r3
 8001578:	b29a      	uxth	r2, r3
 800157a:	210e      	movs	r1, #14
 800157c:	2018      	movs	r0, #24
 800157e:	180b      	adds	r3, r1, r0
 8001580:	19db      	adds	r3, r3, r7
 8001582:	3203      	adds	r2, #3
 8001584:	801a      	strh	r2, [r3, #0]

	    // Create a complete message string using CSV formatting
	    char message[message_size + 1]; // +1 for the null terminator
 8001586:	180b      	adds	r3, r1, r0
 8001588:	19db      	adds	r3, r3, r7
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	623a      	str	r2, [r7, #32]
 8001592:	001a      	movs	r2, r3
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	2200      	movs	r2, #0
 8001598:	60fa      	str	r2, [r7, #12]
 800159a:	68b8      	ldr	r0, [r7, #8]
 800159c:	68f9      	ldr	r1, [r7, #12]
 800159e:	0002      	movs	r2, r0
 80015a0:	0f52      	lsrs	r2, r2, #29
 80015a2:	000c      	movs	r4, r1
 80015a4:	00e4      	lsls	r4, r4, #3
 80015a6:	617c      	str	r4, [r7, #20]
 80015a8:	697c      	ldr	r4, [r7, #20]
 80015aa:	4314      	orrs	r4, r2
 80015ac:	617c      	str	r4, [r7, #20]
 80015ae:	0002      	movs	r2, r0
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	613a      	str	r2, [r7, #16]
 80015b4:	001a      	movs	r2, r3
 80015b6:	603a      	str	r2, [r7, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	0002      	movs	r2, r0
 80015c2:	0f52      	lsrs	r2, r2, #29
 80015c4:	000c      	movs	r4, r1
 80015c6:	00e6      	lsls	r6, r4, #3
 80015c8:	4316      	orrs	r6, r2
 80015ca:	0002      	movs	r2, r0
 80015cc:	00d5      	lsls	r5, r2, #3
 80015ce:	3307      	adds	r3, #7
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	466a      	mov	r2, sp
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	469d      	mov	sp, r3
 80015da:	ab02      	add	r3, sp, #8
 80015dc:	3300      	adds	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
	    sprintf(message, "%s,%s,%s,%s\r\n", date_string, time_string, temp_string, light_string);
 80015e0:	4c39      	ldr	r4, [pc, #228]	; (80016c8 <read_and_store_data+0x2a4>)
 80015e2:	4a33      	ldr	r2, [pc, #204]	; (80016b0 <read_and_store_data+0x28c>)
 80015e4:	4939      	ldr	r1, [pc, #228]	; (80016cc <read_and_store_data+0x2a8>)
 80015e6:	69f8      	ldr	r0, [r7, #28]
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <read_and_store_data+0x268>)
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <read_and_store_data+0x274>)
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	0023      	movs	r3, r4
 80015f2:	f004 f9ef 	bl	80059d4 <siprintf>


	    // Check if the message can fit into the current page. If not, go to the next page.
	    if(message_size > PAGE_SIZE) {
 80015f6:	210e      	movs	r1, #14
 80015f8:	2018      	movs	r0, #24
 80015fa:	180b      	adds	r3, r1, r0
 80015fc:	19db      	adds	r3, r3, r7
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	2b40      	cmp	r3, #64	; 0x40
 8001602:	d905      	bls.n	8001610 <read_and_store_data+0x1ec>
	        current_page++;
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <read_and_store_data+0x2ac>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <read_and_store_data+0x2ac>)
 800160e:	801a      	strh	r2, [r3, #0]
	    }

	    // Check if there's enough space left in the EEPROM
	    if(current_page < PAGE_NUM) {
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <read_and_store_data+0x2ac>)
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	429a      	cmp	r2, r3
 800161a:	d224      	bcs.n	8001666 <read_and_store_data+0x242>
	        // Write the message to the EEPROM
	        EEPROM_Write(current_page, 0, (uint8_t *)message, message_size);
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <read_and_store_data+0x2ac>)
 800161e:	8818      	ldrh	r0, [r3, #0]
 8001620:	240e      	movs	r4, #14
 8001622:	2518      	movs	r5, #24
 8001624:	1963      	adds	r3, r4, r5
 8001626:	19db      	adds	r3, r3, r7
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	2100      	movs	r1, #0
 800162e:	f7ff fb65 	bl	8000cfc <EEPROM_Write>

	        // If the message size is less than the page size, the next write operation will start from where it left.
	        // Otherwise, the next write operation will start from the next page.
	        if(message_size < PAGE_SIZE) {
 8001632:	0022      	movs	r2, r4
 8001634:	0029      	movs	r1, r5
 8001636:	1853      	adds	r3, r2, r1
 8001638:	19db      	adds	r3, r3, r7
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2b3f      	cmp	r3, #63	; 0x3f
 800163e:	d80b      	bhi.n	8001658 <read_and_store_data+0x234>
	            current_page += message_size / PAGE_SIZE;
 8001640:	1853      	adds	r3, r2, r1
 8001642:	19db      	adds	r3, r3, r7
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	099b      	lsrs	r3, r3, #6
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <read_and_store_data+0x2ac>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <read_and_store_data+0x2ac>)
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	e009      	b.n	800166c <read_and_store_data+0x248>
	        } else {
	            current_page++;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <read_and_store_data+0x2ac>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <read_and_store_data+0x2ac>)
 8001662:	801a      	strh	r2, [r3, #0]
 8001664:	e002      	b.n	800166c <read_and_store_data+0x248>
	        }
	    } else {
	        // EEPROM is full, set the flag to prevent further writing
	        eeprom_full = true;
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <read_and_store_data+0x254>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	46c5      	mov	sp, r8
	    }



}
 800166e:	46bd      	mov	sp, r7
 8001670:	b00e      	add	sp, #56	; 0x38
 8001672:	bc80      	pop	{r7}
 8001674:	46b8      	mov	r8, r7
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001678:	2000025e 	.word	0x2000025e
 800167c:	2000009c 	.word	0x2000009c
 8001680:	2000023c 	.word	0x2000023c
 8001684:	42c80000 	.word	0x42c80000
 8001688:	080062cc 	.word	0x080062cc
 800168c:	20000250 	.word	0x20000250
 8001690:	200000dc 	.word	0x200000dc
 8001694:	20000240 	.word	0x20000240
 8001698:	20000244 	.word	0x20000244
 800169c:	2000022f 	.word	0x2000022f
 80016a0:	2000022e 	.word	0x2000022e
 80016a4:	2000022d 	.word	0x2000022d
 80016a8:	20000130 	.word	0x20000130
 80016ac:	080062d4 	.word	0x080062d4
 80016b0:	20000230 	.word	0x20000230
 80016b4:	20000223 	.word	0x20000223
 80016b8:	20000222 	.word	0x20000222
 80016bc:	20000221 	.word	0x20000221
 80016c0:	2000025a 	.word	0x2000025a
 80016c4:	080062e4 	.word	0x080062e4
 80016c8:	20000224 	.word	0x20000224
 80016cc:	080062f4 	.word	0x080062f4
 80016d0:	2000025c 	.word	0x2000025c

080016d4 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	//if 60s have elapsed we read data from the sensors
	read_and_store_data();
 80016dc:	f7ff fea2 	bl	8001424 <read_and_store_data>
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>

080016f2 <RTC_SetTime>:
 * @param hours Hours value to set (0-23)
 * @param minutes Minutes value to set (0-59)
 * @param seconds Seconds value to set (0-59)
 * @return HAL status (HAL_OK, HAL_ERROR, HAL_BUSY, or HAL_TIMEOUT)
 */
HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 80016f2:	b590      	push	{r4, r7, lr}
 80016f4:	b089      	sub	sp, #36	; 0x24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	000c      	movs	r4, r1
 80016fc:	0010      	movs	r0, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	1cfb      	adds	r3, r7, #3
 8001702:	1c22      	adds	r2, r4, #0
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	1cbb      	adds	r3, r7, #2
 8001708:	1c02      	adds	r2, r0, #0
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	1c7b      	adds	r3, r7, #1
 800170e:	1c0a      	adds	r2, r1, #0
 8001710:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8001712:	240c      	movs	r4, #12
 8001714:	193b      	adds	r3, r7, r4
 8001716:	0018      	movs	r0, r3
 8001718:	2314      	movs	r3, #20
 800171a:	001a      	movs	r2, r3
 800171c:	2100      	movs	r1, #0
 800171e:	f004 f951 	bl	80059c4 <memset>

    sTime.Hours = hours;
 8001722:	0021      	movs	r1, r4
 8001724:	187b      	adds	r3, r7, r1
 8001726:	1cfa      	adds	r2, r7, #3
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	1cba      	adds	r2, r7, #2
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	1c7a      	adds	r2, r7, #1
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]

    return HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001748:	1879      	adds	r1, r7, r1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	0018      	movs	r0, r3
 8001750:	f002 feb6 	bl	80044c0 <HAL_RTC_SetTime>
 8001754:	0003      	movs	r3, r0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b009      	add	sp, #36	; 0x24
 800175c:	bd90      	pop	{r4, r7, pc}

0800175e <RTC_GetTime>:
 * @param hours Pointer to an uint8_t variable to store the hours value
 * @param minutes Pointer to an uint8_t variable to store the minutes value
 * @param seconds Pointer to an uint8_t variable to store the seconds value
 * @return HAL status (HAL_OK, HAL_ERROR, HAL_BUSY, or HAL_TIMEOUT)
 */
HAL_StatusTypeDef RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 800175e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001760:	b08b      	sub	sp, #44	; 0x2c
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef sTime = {0};
 800176c:	2510      	movs	r5, #16
 800176e:	197b      	adds	r3, r7, r5
 8001770:	0018      	movs	r0, r3
 8001772:	2314      	movs	r3, #20
 8001774:	001a      	movs	r2, r3
 8001776:	2100      	movs	r1, #0
 8001778:	f004 f924 	bl	80059c4 <memset>

    HAL_StatusTypeDef status = HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 800177c:	2627      	movs	r6, #39	; 0x27
 800177e:	19bc      	adds	r4, r7, r6
 8001780:	1979      	adds	r1, r7, r5
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	0018      	movs	r0, r3
 8001788:	f002 ff40 	bl	800460c <HAL_RTC_GetTime>
 800178c:	0003      	movs	r3, r0
 800178e:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK) {
 8001790:	19bb      	adds	r3, r7, r6
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <RTC_GetTime+0x52>
        *hours = sTime.Hours;
 8001798:	197b      	adds	r3, r7, r5
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	701a      	strb	r2, [r3, #0]
        *minutes = sTime.Minutes;
 80017a0:	197b      	adds	r3, r7, r5
 80017a2:	785a      	ldrb	r2, [r3, #1]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	701a      	strb	r2, [r3, #0]
        *seconds = sTime.Seconds;
 80017a8:	197b      	adds	r3, r7, r5
 80017aa:	789a      	ldrb	r2, [r3, #2]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80017b0:	2327      	movs	r3, #39	; 0x27
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	781b      	ldrb	r3, [r3, #0]
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b00b      	add	sp, #44	; 0x2c
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017be <RTC_SetDate>:
@param hrtc Pointer to an RTC_HandleTypeDef structure that contains the configuration information for the specified RTC
@param day The day of the month
@param month The month
@param year The year (from 0 to 99)
*/
void RTC_SetDate(RTC_HandleTypeDef *hrtc, uint8_t day, uint8_t month, uint8_t year) {
 80017be:	b590      	push	{r4, r7, lr}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	000c      	movs	r4, r1
 80017c8:	0010      	movs	r0, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	1cfb      	adds	r3, r7, #3
 80017ce:	1c22      	adds	r2, r4, #0
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	1cbb      	adds	r3, r7, #2
 80017d4:	1c02      	adds	r2, r0, #0
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	1c7b      	adds	r3, r7, #1
 80017da:	1c0a      	adds	r2, r1, #0
 80017dc:	701a      	strb	r2, [r3, #0]
RTC_DateTypeDef date = {0};
 80017de:	210c      	movs	r1, #12
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
date.Date = day;
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	1cfa      	adds	r2, r7, #3
 80017ea:	7812      	ldrb	r2, [r2, #0]
 80017ec:	709a      	strb	r2, [r3, #2]
date.Month = month;
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	1cba      	adds	r2, r7, #2
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	705a      	strb	r2, [r3, #1]
date.Year = year;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	1c7a      	adds	r2, r7, #1
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	70da      	strb	r2, [r3, #3]
HAL_RTC_SetDate(hrtc, &date, RTC_FORMAT_BIN);
 80017fe:	1879      	adds	r1, r7, r1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	0018      	movs	r0, r3
 8001806:	f002 ff5f 	bl	80046c8 <HAL_RTC_SetDate>
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b005      	add	sp, #20
 8001810:	bd90      	pop	{r4, r7, pc}

08001812 <RTC_GetDate>:
@param hrtc Pointer to an RTC_HandleTypeDef structure that contains the configuration information for the specified RTC
@param day Pointer to store the day of the month
@param month Pointer to store the month
@param year Pointer to store the year
*/
void RTC_GetDate(RTC_HandleTypeDef *hrtc, uint8_t *day, uint8_t *month, uint8_t *year) {
 8001812:	b590      	push	{r4, r7, lr}
 8001814:	b087      	sub	sp, #28
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	603b      	str	r3, [r7, #0]
RTC_DateTypeDef date = {0};
 8001820:	2414      	movs	r4, #20
 8001822:	193b      	adds	r3, r7, r4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
HAL_RTC_GetDate(hrtc, &date, RTC_FORMAT_BIN);
 8001828:	1939      	adds	r1, r7, r4
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	0018      	movs	r0, r3
 8001830:	f002 ffda 	bl	80047e8 <HAL_RTC_GetDate>
*day = date.Date;
 8001834:	0021      	movs	r1, r4
 8001836:	187b      	adds	r3, r7, r1
 8001838:	789a      	ldrb	r2, [r3, #2]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	701a      	strb	r2, [r3, #0]
*month = date.Month;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	785a      	ldrb	r2, [r3, #1]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	701a      	strb	r2, [r3, #0]
*year = date.Year;
 8001846:	187b      	adds	r3, r7, r1
 8001848:	78da      	ldrb	r2, [r3, #3]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	701a      	strb	r2, [r3, #0]
}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	b007      	add	sp, #28
 8001854:	bd90      	pop	{r4, r7, pc}
	...

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x44>)
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_MspInit+0x44>)
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	619a      	str	r2, [r3, #24]
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_MspInit+0x44>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x44>)
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_MspInit+0x44>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0549      	lsls	r1, r1, #21
 8001880:	430a      	orrs	r2, r1
 8001882:	61da      	str	r2, [r3, #28]
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_MspInit+0x44>)
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	055b      	lsls	r3, r3, #21
 800188c:	4013      	ands	r3, r2
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b08b      	sub	sp, #44	; 0x2c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	2414      	movs	r4, #20
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	0018      	movs	r0, r3
 80018ae:	2314      	movs	r3, #20
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f004 f886 	bl	80059c4 <memset>
  if(hadc->Instance==ADC1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	; (8001924 <HAL_ADC_MspInit+0x84>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12b      	bne.n	800191a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_ADC_MspInit+0x88>)
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_ADC_MspInit+0x88>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0089      	lsls	r1, r1, #2
 80018cc:	430a      	orrs	r2, r1
 80018ce:	619a      	str	r2, [r3, #24]
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_ADC_MspInit+0x88>)
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_ADC_MspInit+0x88>)
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_ADC_MspInit+0x88>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0289      	lsls	r1, r1, #10
 80018e8:	430a      	orrs	r2, r1
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_ADC_MspInit+0x88>)
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	029b      	lsls	r3, r3, #10
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	2220      	movs	r2, #32
 80018fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001900:	193b      	adds	r3, r7, r4
 8001902:	2203      	movs	r2, #3
 8001904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	193b      	adds	r3, r7, r4
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	193a      	adds	r2, r7, r4
 800190e:	2390      	movs	r3, #144	; 0x90
 8001910:	05db      	lsls	r3, r3, #23
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f001 f805 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b00b      	add	sp, #44	; 0x2c
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40012400 	.word	0x40012400
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b08b      	sub	sp, #44	; 0x2c
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	2414      	movs	r4, #20
 8001936:	193b      	adds	r3, r7, r4
 8001938:	0018      	movs	r0, r3
 800193a:	2314      	movs	r3, #20
 800193c:	001a      	movs	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	f004 f840 	bl	80059c4 <memset>
  if(hi2c->Instance==I2C1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_I2C_MspInit+0x90>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d131      	bne.n	80019b2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_I2C_MspInit+0x94>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_I2C_MspInit+0x94>)
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	02c9      	lsls	r1, r1, #11
 8001958:	430a      	orrs	r2, r1
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_I2C_MspInit+0x94>)
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	02db      	lsls	r3, r3, #11
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800196a:	0021      	movs	r1, r4
 800196c:	187b      	adds	r3, r7, r1
 800196e:	22c0      	movs	r2, #192	; 0xc0
 8001970:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2212      	movs	r2, #18
 8001976:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2203      	movs	r2, #3
 8001982:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2201      	movs	r2, #1
 8001988:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	187b      	adds	r3, r7, r1
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_I2C_MspInit+0x98>)
 800198e:	0019      	movs	r1, r3
 8001990:	0010      	movs	r0, r2
 8001992:	f000 ffc7 	bl	8002924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_I2C_MspInit+0x94>)
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_I2C_MspInit+0x94>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0389      	lsls	r1, r1, #14
 80019a0:	430a      	orrs	r2, r1
 80019a2:	61da      	str	r2, [r3, #28]
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_I2C_MspInit+0x94>)
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	039b      	lsls	r3, r3, #14
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b00b      	add	sp, #44	; 0x2c
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40005400 	.word	0x40005400
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000400 	.word	0x48000400

080019c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_RTC_MspInit+0x28>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d106      	bne.n	80019e8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RTC_MspInit+0x2c>)
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RTC_MspInit+0x2c>)
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	0209      	lsls	r1, r1, #8
 80019e4:	430a      	orrs	r2, r1
 80019e6:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40002800 	.word	0x40002800
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	05db      	lsls	r3, r3, #23
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d113      	bne.n	8001a34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	430a      	orrs	r2, r1
 8001a16:	61da      	str	r2, [r3, #28]
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	200f      	movs	r0, #15
 8001a2a:	f000 ff49 	bl	80028c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a2e:	200f      	movs	r0, #15
 8001a30:	f000 ff5b 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b08b      	sub	sp, #44	; 0x2c
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	2414      	movs	r4, #20
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	2314      	movs	r3, #20
 8001a50:	001a      	movs	r2, r3
 8001a52:	2100      	movs	r1, #0
 8001a54:	f003 ffb6 	bl	80059c4 <memset>
  if(huart->Instance==USART1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <HAL_UART_MspInit+0x94>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d133      	bne.n	8001aca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_UART_MspInit+0x98>)
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_UART_MspInit+0x98>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	01c9      	lsls	r1, r1, #7
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	619a      	str	r2, [r3, #24]
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_UART_MspInit+0x98>)
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_UART_MspInit+0x98>)
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_UART_MspInit+0x98>)
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	0289      	lsls	r1, r1, #10
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_UART_MspInit+0x98>)
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	22c0      	movs	r2, #192	; 0xc0
 8001a9e:	00d2      	lsls	r2, r2, #3
 8001aa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	0021      	movs	r1, r4
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2201      	movs	r2, #1
 8001aba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	187a      	adds	r2, r7, r1
 8001abe:	2390      	movs	r3, #144	; 0x90
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f000 ff2d 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b00b      	add	sp, #44	; 0x2c
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	40021000 	.word	0x40021000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b00:	f000 f92a 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <TIM2_IRQHandler+0x14>)
 8001b12:	0018      	movs	r0, r3
 8001b14:	f002 ffdc 	bl	8004ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	20000150 	.word	0x20000150

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	18d3      	adds	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f003 ff0c 	bl	8005970 <__errno>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	425b      	negs	r3, r3
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	18d2      	adds	r2, r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <_sbrk+0x64>)
 8001b74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b006      	add	sp, #24
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20002000 	.word	0x20002000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	20000260 	.word	0x20000260
 8001b8c:	20000280 	.word	0x20000280

08001b90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <TMP102_Init>:
 * @brief Initialize the TMP102 temperature sensor.
 * @param hi2c Pointer to an I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef TMP102_Init(I2C_HandleTypeDef *hi2c) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af04      	add	r7, sp, #16
 8001ba2:	6078      	str	r0, [r7, #4]
    i2c_handle = hi2c;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <TMP102_Init+0x60>)
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	601a      	str	r2, [r3, #0]

    uint16_t config = TMP102_CONFIG_CONTINUOUS_CONVERSION;
 8001baa:	210e      	movs	r1, #14
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	2200      	movs	r2, #0
 8001bb0:	801a      	strh	r2, [r3, #0]
    uint8_t data[2] = {config >> 8, config & 0xFF};
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	200c      	movs	r0, #12
 8001bbe:	183b      	adds	r3, r7, r0
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	0001      	movs	r1, r0
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	705a      	strb	r2, [r3, #1]

    // Write config to the TMP102
    if (HAL_I2C_Mem_Write(i2c_handle, TMP102_I2C_ADDRESS << 1, TMP102_REG_CONFIG, 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <TMP102_Init+0x60>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	425b      	negs	r3, r3
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	2201      	movs	r2, #1
 8001be4:	2190      	movs	r1, #144	; 0x90
 8001be6:	f001 f8a3 	bl	8002d30 <HAL_I2C_Mem_Write>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <TMP102_Init+0x56>
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <TMP102_Init+0x58>
    }

    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b004      	add	sp, #16
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000264 	.word	0x20000264

08001c00 <TMP102_ReadTemperature>:
 * @brief Read temperature from the TMP102 sensor.
 * @param hi2c Pointer to an I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C peripheral.
 * @return Temperature in degrees Celsius as a float.
 */
float TMP102_ReadTemperature(I2C_HandleTypeDef *hi2c) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af04      	add	r7, sp, #16
 8001c06:	6078      	str	r0, [r7, #4]
    uint8_t data[2];

    // Read temperature data from the TMP102
    if (HAL_I2C_Mem_Read(i2c_handle, TMP102_I2C_ADDRESS << 1, TMP102_REG_TEMPERATURE, 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <TMP102_ReadTemperature+0x6c>)
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	425b      	negs	r3, r3
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2302      	movs	r3, #2
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	230c      	movs	r3, #12
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2190      	movs	r1, #144	; 0x90
 8001c22:	f001 f9b3 	bl	8002f8c <HAL_I2C_Mem_Read>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <TMP102_ReadTemperature+0x2e>
        return NAN;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <TMP102_ReadTemperature+0x70>)
 8001c2c:	e01a      	b.n	8001c64 <TMP102_ReadTemperature+0x64>
    }

    int16_t raw_temperature = (data[0] << 4) | (data[1] >> 4);
 8001c2e:	220c      	movs	r2, #12
 8001c30:	18bb      	adds	r3, r7, r2
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	b219      	sxth	r1, r3
 8001c38:	18bb      	adds	r3, r7, r2
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	200e      	movs	r0, #14
 8001c44:	183b      	adds	r3, r7, r0
 8001c46:	430a      	orrs	r2, r1
 8001c48:	801a      	strh	r2, [r3, #0]

    // Convert raw temperature data to Celsius
    return (float) raw_temperature * 0.0625f;
 8001c4a:	183b      	adds	r3, r7, r0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	5e9b      	ldrsh	r3, [r3, r2]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7fe ff89 	bl	8000b68 <__aeabi_i2f>
 8001c56:	1c03      	adds	r3, r0, #0
 8001c58:	21f6      	movs	r1, #246	; 0xf6
 8001c5a:	0589      	lsls	r1, r1, #22
 8001c5c:	1c18      	adds	r0, r3, #0
 8001c5e:	f7fe fc8f 	bl	8000580 <__aeabi_fmul>
 8001c62:	1c03      	adds	r3, r0, #0
}
 8001c64:	1c18      	adds	r0, r3, #0
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000264 	.word	0x20000264
 8001c70:	7fc00000 	.word	0x7fc00000

08001c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c76:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001c78:	f7ff ff8a 	bl	8001b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <LoopForever+0xe>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	; (8001cc0 <LoopForever+0x16>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ca2:	f003 fe6b 	bl	800597c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ca6:	f7ff f919 	bl	8000edc <main>

08001caa <LoopForever>:

LoopForever:
    b LoopForever
 8001caa:	e7fe      	b.n	8001caa <LoopForever>
  ldr   r0, =_estack
 8001cac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001cb8:	080063b8 	.word	0x080063b8
  ldr r2, =_sbss
 8001cbc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001cc0:	2000027c 	.word	0x2000027c

08001cc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_COMP_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_Init+0x24>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_Init+0x24>)
 8001cd2:	2110      	movs	r1, #16
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f809 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cde:	f7ff fdbb 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40022000 	.word	0x40022000

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_InitTick+0x5c>)
 8001cfa:	681c      	ldr	r4, [r3, #0]
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_InitTick+0x60>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	0019      	movs	r1, r3
 8001d02:	23fa      	movs	r3, #250	; 0xfa
 8001d04:	0098      	lsls	r0, r3, #2
 8001d06:	f7fe fa11 	bl	800012c <__udivsi3>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	0020      	movs	r0, r4
 8001d10:	f7fe fa0c 	bl	800012c <__udivsi3>
 8001d14:	0003      	movs	r3, r0
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 fdf7 	bl	800290a <HAL_SYSTICK_Config>
 8001d1c:	1e03      	subs	r3, r0, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e00f      	b.n	8001d44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d80b      	bhi.n	8001d42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	2200      	movs	r2, #0
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 fdc4 	bl	80028c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_InitTick+0x64>)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b003      	add	sp, #12
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000010 	.word	0x20000010
 8001d54:	2000000c 	.word	0x2000000c

08001d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_IncTick+0x1c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	001a      	movs	r2, r3
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_IncTick+0x20>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	18d2      	adds	r2, r2, r3
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_IncTick+0x20>)
 8001d6a:	601a      	str	r2, [r3, #0]
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	20000010 	.word	0x20000010
 8001d78:	20000268 	.word	0x20000268

08001d7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b02      	ldr	r3, [pc, #8]	; (8001d8c <HAL_GetTick+0x10>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	20000268 	.word	0x20000268

08001d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_Delay+0x44>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	001a      	movs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	189b      	adds	r3, r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	f7ff ffe0 	bl	8001d7c <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d8f7      	bhi.n	8001db8 <HAL_Delay+0x28>
  {
  }
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b004      	add	sp, #16
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	20000010 	.word	0x20000010

08001dd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e125      	b.n	8002042 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10a      	bne.n	8001e14 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2234      	movs	r2, #52	; 0x34
 8001e08:	2100      	movs	r1, #0
 8001e0a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff fd46 	bl	80018a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d000      	beq.n	8001e20 <HAL_ADC_Init+0x48>
 8001e1e:	e103      	b.n	8002028 <HAL_ADC_Init+0x250>
 8001e20:	230f      	movs	r3, #15
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d000      	beq.n	8001e2c <HAL_ADC_Init+0x54>
 8001e2a:	e0fd      	b.n	8002028 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2204      	movs	r2, #4
 8001e34:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001e36:	d000      	beq.n	8001e3a <HAL_ADC_Init+0x62>
 8001e38:	e0f6      	b.n	8002028 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	4a83      	ldr	r2, [pc, #524]	; (800204c <HAL_ADC_Init+0x274>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	2202      	movs	r2, #2
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2203      	movs	r2, #3
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d112      	bne.n	8001e7e <HAL_ADC_Init+0xa6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d009      	beq.n	8001e7a <HAL_ADC_Init+0xa2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	401a      	ands	r2, r3
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Init+0xa6>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_Init+0xa8>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d116      	bne.n	8001eb2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2218      	movs	r2, #24
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	0899      	lsrs	r1, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4964      	ldr	r1, [pc, #400]	; (8002050 <HAL_ADC_Init+0x278>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7e1b      	ldrb	r3, [r3, #24]
 8001ec6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e5b      	ldrb	r3, [r3, #25]
 8001ecc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ece:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7e9b      	ldrb	r3, [r3, #26]
 8001ed4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ed6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d002      	beq.n	8001ee6 <HAL_ADC_Init+0x10e>
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	015b      	lsls	r3, r3, #5
 8001ee4:	e000      	b.n	8001ee8 <HAL_ADC_Init+0x110>
 8001ee6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ee8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001eee:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_Init+0x124>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e000      	b.n	8001efe <HAL_ADC_Init+0x126>
 8001efc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001efe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2124      	movs	r1, #36	; 0x24
 8001f04:	5c5b      	ldrb	r3, [r3, r1]
 8001f06:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f08:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7edb      	ldrb	r3, [r3, #27]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d115      	bne.n	8001f44 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7e9b      	ldrb	r3, [r3, #26]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	0252      	lsls	r2, r2, #9
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	e00b      	b.n	8001f44 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	2220      	movs	r2, #32
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	23c2      	movs	r3, #194	; 0xc2
 8001f4a:	33ff      	adds	r3, #255	; 0xff
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d007      	beq.n	8001f60 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68d9      	ldr	r1, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	055b      	lsls	r3, r3, #21
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_ADC_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d017      	beq.n	8001fb4 <HAL_ADC_Init+0x1dc>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_ADC_Init+0x1dc>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d00f      	beq.n	8001fb4 <HAL_ADC_Init+0x1dc>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d00b      	beq.n	8001fb4 <HAL_ADC_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d007      	beq.n	8001fb4 <HAL_ADC_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	2b06      	cmp	r3, #6
 8001faa:	d003      	beq.n	8001fb4 <HAL_ADC_Init+0x1dc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	2b07      	cmp	r3, #7
 8001fb2:	d112      	bne.n	8001fda <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2107      	movs	r1, #7
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6959      	ldr	r1, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	2207      	movs	r2, #7
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_ADC_Init+0x27c>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d10b      	bne.n	8002002 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	4393      	bics	r3, r2
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002000:	e01c      	b.n	800203c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	2212      	movs	r2, #18
 8002008:	4393      	bics	r3, r2
 800200a:	2210      	movs	r2, #16
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2201      	movs	r2, #1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800201e:	230f      	movs	r3, #15
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002026:	e009      	b.n	800203c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202c:	2210      	movs	r2, #16
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002034:	230f      	movs	r3, #15
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800203c:	230f      	movs	r3, #15
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781b      	ldrb	r3, [r3, #0]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	fffffefd 	.word	0xfffffefd
 8002050:	fffe0219 	.word	0xfffe0219
 8002054:	833fffe7 	.word	0x833fffe7

08002058 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002060:	230f      	movs	r3, #15
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d138      	bne.n	80020e6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2234      	movs	r2, #52	; 0x34
 8002078:	5c9b      	ldrb	r3, [r3, r2]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_ADC_Start+0x2a>
 800207e:	2302      	movs	r3, #2
 8002080:	e038      	b.n	80020f4 <HAL_ADC_Start+0x9c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2234      	movs	r2, #52	; 0x34
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7e5b      	ldrb	r3, [r3, #25]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d007      	beq.n	80020a2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002092:	230f      	movs	r3, #15
 8002094:	18fc      	adds	r4, r7, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0018      	movs	r0, r3
 800209a:	f000 fa23 	bl	80024e4 <ADC_Enable>
 800209e:	0003      	movs	r3, r0
 80020a0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020a2:	230f      	movs	r3, #15
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d120      	bne.n	80020ee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_ADC_Start+0xa4>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	0052      	lsls	r2, r2, #1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2234      	movs	r2, #52	; 0x34
 80020c8:	2100      	movs	r1, #0
 80020ca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	221c      	movs	r2, #28
 80020d2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2104      	movs	r1, #4
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	e003      	b.n	80020ee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020e6:	230f      	movs	r3, #15
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2202      	movs	r2, #2
 80020ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ee:	230f      	movs	r3, #15
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	781b      	ldrb	r3, [r3, #0]
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b005      	add	sp, #20
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	fffff0fe 	.word	0xfffff0fe

08002100 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	230f      	movs	r3, #15
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2234      	movs	r2, #52	; 0x34
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_ADC_Stop+0x1e>
 800211a:	2302      	movs	r3, #2
 800211c:	e029      	b.n	8002172 <HAL_ADC_Stop+0x72>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2234      	movs	r2, #52	; 0x34
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002126:	250f      	movs	r5, #15
 8002128:	197c      	adds	r4, r7, r5
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	0018      	movs	r0, r3
 800212e:	f000 face 	bl	80026ce <ADC_ConversionStop>
 8002132:	0003      	movs	r3, r0
 8002134:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002136:	197b      	adds	r3, r7, r5
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d112      	bne.n	8002164 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800213e:	197c      	adds	r4, r7, r5
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0018      	movs	r0, r3
 8002144:	f000 fa52 	bl	80025ec <ADC_Disable>
 8002148:	0003      	movs	r3, r0
 800214a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800214c:	197b      	adds	r3, r7, r5
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_ADC_Stop+0x7c>)
 800215a:	4013      	ands	r3, r2
 800215c:	2201      	movs	r2, #1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2234      	movs	r2, #52	; 0x34
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b004      	add	sp, #16
 8002178:	bdb0      	pop	{r4, r5, r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	fffffefe 	.word	0xfffffefe

08002180 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b08      	cmp	r3, #8
 8002190:	d102      	bne.n	8002198 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002192:	2308      	movs	r3, #8
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e014      	b.n	80021c2 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10b      	bne.n	80021be <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	2220      	movs	r2, #32
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2234      	movs	r2, #52	; 0x34
 80021b6:	2100      	movs	r1, #0
 80021b8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e071      	b.n	80022a2 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80021be:	230c      	movs	r3, #12
 80021c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021c2:	f7ff fddb 	bl	8001d7c <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021ca:	e01f      	b.n	800220c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	d01c      	beq.n	800220c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_ADC_PollForConversion+0x68>
 80021d8:	f7ff fdd0 	bl	8001d7c <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d211      	bcs.n	800220c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	d10b      	bne.n	800220c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	2204      	movs	r2, #4
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2234      	movs	r2, #52	; 0x34
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e04a      	b.n	80022a2 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	d0d9      	beq.n	80021cc <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	23c0      	movs	r3, #192	; 0xc0
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4013      	ands	r3, r2
 8002232:	d12d      	bne.n	8002290 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002238:	2b00      	cmp	r3, #0
 800223a:	d129      	bne.n	8002290 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2208      	movs	r2, #8
 8002244:	4013      	ands	r3, r2
 8002246:	2b08      	cmp	r3, #8
 8002248:	d122      	bne.n	8002290 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2204      	movs	r2, #4
 8002252:	4013      	ands	r3, r2
 8002254:	d110      	bne.n	8002278 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	210c      	movs	r1, #12
 8002262:	438a      	bics	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_ADC_PollForConversion+0x12c>)
 800226c:	4013      	ands	r3, r2
 800226e:	2201      	movs	r2, #1
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
 8002276:	e00b      	b.n	8002290 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	2220      	movs	r2, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	2201      	movs	r2, #1
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7e1b      	ldrb	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	220c      	movs	r2, #12
 800229e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b004      	add	sp, #16
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	fffffefe 	.word	0xfffffefe

080022b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d2:	230f      	movs	r3, #15
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	055b      	lsls	r3, r3, #21
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d011      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d00d      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d009      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d005      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	2b04      	cmp	r3, #4
 8002308:	d001      	beq.n	800230e <HAL_ADC_ConfigChannel+0x46>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2234      	movs	r2, #52	; 0x34
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x54>
 8002318:	2302      	movs	r3, #2
 800231a:	e0d0      	b.n	80024be <HAL_ADC_ConfigChannel+0x1f6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2234      	movs	r2, #52	; 0x34
 8002320:	2101      	movs	r1, #1
 8002322:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2204      	movs	r2, #4
 800232c:	4013      	ands	r3, r2
 800232e:	d000      	beq.n	8002332 <HAL_ADC_ConfigChannel+0x6a>
 8002330:	e0b4      	b.n	800249c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a64      	ldr	r2, [pc, #400]	; (80024c8 <HAL_ADC_ConfigChannel+0x200>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d100      	bne.n	800233e <HAL_ADC_ConfigChannel+0x76>
 800233c:	e082      	b.n	8002444 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	055b      	lsls	r3, r3, #21
 800235c:	429a      	cmp	r2, r3
 800235e:	d037      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	2b01      	cmp	r3, #1
 8002366:	d033      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b02      	cmp	r3, #2
 800236e:	d02f      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	2b03      	cmp	r3, #3
 8002376:	d02b      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	2b04      	cmp	r3, #4
 800237e:	d027      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	2b05      	cmp	r3, #5
 8002386:	d023      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	2b06      	cmp	r3, #6
 800238e:	d01f      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	2b07      	cmp	r3, #7
 8002396:	d01b      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2107      	movs	r1, #7
 80023a4:	400b      	ands	r3, r1
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d012      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2107      	movs	r1, #7
 80023b6:	438a      	bics	r2, r1
 80023b8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6959      	ldr	r1, [r3, #20]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2207      	movs	r2, #7
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d007      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x120>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b11      	cmp	r3, #17
 80023de:	d003      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x120>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	d163      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80023e8:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_ADC_ConfigChannel+0x204>)
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d009      	beq.n	8002408 <HAL_ADC_ConfigChannel+0x140>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b11      	cmp	r3, #17
 80023fa:	d102      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x13a>
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	03db      	lsls	r3, r3, #15
 8002400:	e004      	b.n	800240c <HAL_ADC_ConfigChannel+0x144>
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	045b      	lsls	r3, r3, #17
 8002406:	e001      	b.n	800240c <HAL_ADC_ConfigChannel+0x144>
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <HAL_ADC_ConfigChannel+0x204>)
 800240e:	430b      	orrs	r3, r1
 8002410:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d14a      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_ADC_ConfigChannel+0x208>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	492d      	ldr	r1, [pc, #180]	; (80024d4 <HAL_ADC_ConfigChannel+0x20c>)
 8002420:	0018      	movs	r0, r3
 8002422:	f7fd fe83 	bl	800012c <__udivsi3>
 8002426:	0003      	movs	r3, r0
 8002428:	001a      	movs	r2, r3
 800242a:	0013      	movs	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	189b      	adds	r3, r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002434:	e002      	b.n	800243c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3b01      	subs	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f9      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x16e>
 8002442:	e035      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2101      	movs	r1, #1
 8002450:	4099      	lsls	r1, r3
 8002452:	000b      	movs	r3, r1
 8002454:	43d9      	mvns	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	400a      	ands	r2, r1
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b10      	cmp	r3, #16
 8002464:	d007      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x1ae>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b11      	cmp	r3, #17
 800246c:	d003      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x1ae>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b12      	cmp	r3, #18
 8002474:	d11c      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_ADC_ConfigChannel+0x204>)
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d007      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x1ca>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b11      	cmp	r3, #17
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x1c6>
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_ADC_ConfigChannel+0x210>)
 800248c:	e002      	b.n	8002494 <HAL_ADC_ConfigChannel+0x1cc>
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_ADC_ConfigChannel+0x214>)
 8002490:	e000      	b.n	8002494 <HAL_ADC_ConfigChannel+0x1cc>
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_ADC_ConfigChannel+0x218>)
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_ADC_ConfigChannel+0x204>)
 8002496:	400b      	ands	r3, r1
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e009      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	2220      	movs	r2, #32
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80024a8:	230f      	movs	r3, #15
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2234      	movs	r2, #52	; 0x34
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80024b8:	230f      	movs	r3, #15
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	781b      	ldrb	r3, [r3, #0]
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b004      	add	sp, #16
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	00001001 	.word	0x00001001
 80024cc:	40012708 	.word	0x40012708
 80024d0:	20000008 	.word	0x20000008
 80024d4:	000f4240 	.word	0x000f4240
 80024d8:	ffbfffff 	.word	0xffbfffff
 80024dc:	feffffff 	.word	0xfeffffff
 80024e0:	ff7fffff 	.word	0xff7fffff

080024e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2203      	movs	r2, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d112      	bne.n	8002528 <ADC_Enable+0x44>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	2b01      	cmp	r3, #1
 800250e:	d009      	beq.n	8002524 <ADC_Enable+0x40>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	401a      	ands	r2, r3
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	429a      	cmp	r2, r3
 8002522:	d101      	bne.n	8002528 <ADC_Enable+0x44>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <ADC_Enable+0x46>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d152      	bne.n	80025d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <ADC_Enable+0xfc>)
 8002536:	4013      	ands	r3, r2
 8002538:	d00d      	beq.n	8002556 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	2210      	movs	r2, #16
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	2201      	movs	r2, #1
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e03f      	b.n	80025d6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <ADC_Enable+0x100>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	491f      	ldr	r1, [pc, #124]	; (80025e8 <ADC_Enable+0x104>)
 800256c:	0018      	movs	r0, r3
 800256e:	f7fd fddd 	bl	800012c <__udivsi3>
 8002572:	0003      	movs	r3, r0
 8002574:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002576:	e002      	b.n	800257e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3b01      	subs	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002584:	f7ff fbfa 	bl	8001d7c <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800258c:	e01b      	b.n	80025c6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258e:	f7ff fbf5 	bl	8001d7c <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d914      	bls.n	80025c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d00d      	beq.n	80025c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	2210      	movs	r2, #16
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2201      	movs	r2, #1
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2201      	movs	r2, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d1dc      	bne.n	800258e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	0018      	movs	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	80000017 	.word	0x80000017
 80025e4:	20000008 	.word	0x20000008
 80025e8:	000f4240 	.word	0x000f4240

080025ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2203      	movs	r2, #3
 8002600:	4013      	ands	r3, r2
 8002602:	2b01      	cmp	r3, #1
 8002604:	d112      	bne.n	800262c <ADC_Disable+0x40>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	2b01      	cmp	r3, #1
 8002612:	d009      	beq.n	8002628 <ADC_Disable+0x3c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	401a      	ands	r2, r3
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	429a      	cmp	r2, r3
 8002626:	d101      	bne.n	800262c <ADC_Disable+0x40>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <ADC_Disable+0x42>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d048      	beq.n	80026c4 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2205      	movs	r2, #5
 800263a:	4013      	ands	r3, r2
 800263c:	2b01      	cmp	r3, #1
 800263e:	d110      	bne.n	8002662 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2102      	movs	r1, #2
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2203      	movs	r2, #3
 8002656:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002658:	f7ff fb90 	bl	8001d7c <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002660:	e029      	b.n	80026b6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	2210      	movs	r2, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	2201      	movs	r2, #1
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e023      	b.n	80026c6 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800267e:	f7ff fb7d 	bl	8001d7c <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d914      	bls.n	80026b6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10d      	bne.n	80026b6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	2210      	movs	r2, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	2201      	movs	r2, #1
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e007      	b.n	80026c6 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2201      	movs	r2, #1
 80026be:	4013      	ands	r3, r2
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d0dc      	beq.n	800267e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}

080026ce <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2204      	movs	r2, #4
 80026e2:	4013      	ands	r3, r2
 80026e4:	d03a      	beq.n	800275c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2204      	movs	r2, #4
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d10d      	bne.n	8002710 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80026fe:	d107      	bne.n	8002710 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2110      	movs	r1, #16
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002710:	f7ff fb34 	bl	8001d7c <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002718:	e01a      	b.n	8002750 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800271a:	f7ff fb2f 	bl	8001d7c <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d913      	bls.n	8002750 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2204      	movs	r2, #4
 8002730:	4013      	ands	r3, r2
 8002732:	d00d      	beq.n	8002750 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	2210      	movs	r2, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	2201      	movs	r2, #1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e006      	b.n	800275e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2204      	movs	r2, #4
 8002758:	4013      	ands	r3, r2
 800275a:	d1de      	bne.n	800271a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	0002      	movs	r2, r0
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b7f      	cmp	r3, #127	; 0x7f
 800277a:	d809      	bhi.n	8002790 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	001a      	movs	r2, r3
 8002782:	231f      	movs	r3, #31
 8002784:	401a      	ands	r2, r3
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_EnableIRQ+0x30>)
 8002788:	2101      	movs	r1, #1
 800278a:	4091      	lsls	r1, r2
 800278c:	000a      	movs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
  }
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	0002      	movs	r2, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b7f      	cmp	r3, #127	; 0x7f
 80027b0:	d828      	bhi.n	8002804 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b2:	4a2f      	ldr	r2, [pc, #188]	; (8002870 <__NVIC_SetPriority+0xd4>)
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	33c0      	adds	r3, #192	; 0xc0
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	589b      	ldr	r3, [r3, r2]
 80027c2:	1dfa      	adds	r2, r7, #7
 80027c4:	7812      	ldrb	r2, [r2, #0]
 80027c6:	0011      	movs	r1, r2
 80027c8:	2203      	movs	r2, #3
 80027ca:	400a      	ands	r2, r1
 80027cc:	00d2      	lsls	r2, r2, #3
 80027ce:	21ff      	movs	r1, #255	; 0xff
 80027d0:	4091      	lsls	r1, r2
 80027d2:	000a      	movs	r2, r1
 80027d4:	43d2      	mvns	r2, r2
 80027d6:	401a      	ands	r2, r3
 80027d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	22ff      	movs	r2, #255	; 0xff
 80027e0:	401a      	ands	r2, r3
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	0018      	movs	r0, r3
 80027e8:	2303      	movs	r3, #3
 80027ea:	4003      	ands	r3, r0
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f0:	481f      	ldr	r0, [pc, #124]	; (8002870 <__NVIC_SetPriority+0xd4>)
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	430a      	orrs	r2, r1
 80027fc:	33c0      	adds	r3, #192	; 0xc0
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002802:	e031      	b.n	8002868 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002804:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <__NVIC_SetPriority+0xd8>)
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	0019      	movs	r1, r3
 800280c:	230f      	movs	r3, #15
 800280e:	400b      	ands	r3, r1
 8002810:	3b08      	subs	r3, #8
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3306      	adds	r3, #6
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	18d3      	adds	r3, r2, r3
 800281a:	3304      	adds	r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	1dfa      	adds	r2, r7, #7
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	0011      	movs	r1, r2
 8002824:	2203      	movs	r2, #3
 8002826:	400a      	ands	r2, r1
 8002828:	00d2      	lsls	r2, r2, #3
 800282a:	21ff      	movs	r1, #255	; 0xff
 800282c:	4091      	lsls	r1, r2
 800282e:	000a      	movs	r2, r1
 8002830:	43d2      	mvns	r2, r2
 8002832:	401a      	ands	r2, r3
 8002834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	019b      	lsls	r3, r3, #6
 800283a:	22ff      	movs	r2, #255	; 0xff
 800283c:	401a      	ands	r2, r3
 800283e:	1dfb      	adds	r3, r7, #7
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	0018      	movs	r0, r3
 8002844:	2303      	movs	r3, #3
 8002846:	4003      	ands	r3, r0
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800284c:	4809      	ldr	r0, [pc, #36]	; (8002874 <__NVIC_SetPriority+0xd8>)
 800284e:	1dfb      	adds	r3, r7, #7
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	001c      	movs	r4, r3
 8002854:	230f      	movs	r3, #15
 8002856:	4023      	ands	r3, r4
 8002858:	3b08      	subs	r3, #8
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	430a      	orrs	r2, r1
 800285e:	3306      	adds	r3, #6
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	18c3      	adds	r3, r0, r3
 8002864:	3304      	adds	r3, #4
 8002866:	601a      	str	r2, [r3, #0]
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b003      	add	sp, #12
 800286e:	bd90      	pop	{r4, r7, pc}
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	1e5a      	subs	r2, r3, #1
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	045b      	lsls	r3, r3, #17
 8002888:	429a      	cmp	r2, r3
 800288a:	d301      	bcc.n	8002890 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288c:	2301      	movs	r3, #1
 800288e:	e010      	b.n	80028b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <SysTick_Config+0x44>)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	3a01      	subs	r2, #1
 8002896:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002898:	2301      	movs	r3, #1
 800289a:	425b      	negs	r3, r3
 800289c:	2103      	movs	r1, #3
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff ff7c 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <SysTick_Config+0x44>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <SysTick_Config+0x44>)
 80028ac:	2207      	movs	r2, #7
 80028ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b002      	add	sp, #8
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	e000e010 	.word	0xe000e010

080028c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	210f      	movs	r1, #15
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	1c02      	adds	r2, r0, #0
 80028d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	0011      	movs	r1, r2
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff ff5d 	bl	800279c <__NVIC_SetPriority>
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b004      	add	sp, #16
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	0002      	movs	r2, r0
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff ff33 	bl	8002768 <__NVIC_EnableIRQ>
}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f7ff ffaf 	bl	8002878 <SysTick_Config>
 800291a:	0003      	movs	r3, r0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002932:	e14f      	b.n	8002bd4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4091      	lsls	r1, r2
 800293e:	000a      	movs	r2, r1
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d100      	bne.n	800294c <HAL_GPIO_Init+0x28>
 800294a:	e140      	b.n	8002bce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2203      	movs	r2, #3
 8002952:	4013      	ands	r3, r2
 8002954:	2b01      	cmp	r3, #1
 8002956:	d005      	beq.n	8002964 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2203      	movs	r2, #3
 800295e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002960:	2b02      	cmp	r3, #2
 8002962:	d130      	bne.n	80029c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	409a      	lsls	r2, r3
 8002972:	0013      	movs	r3, r2
 8002974:	43da      	mvns	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	0013      	movs	r3, r2
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800299a:	2201      	movs	r2, #1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	409a      	lsls	r2, r3
 80029a0:	0013      	movs	r3, r2
 80029a2:	43da      	mvns	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	2201      	movs	r2, #1
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
 80029b8:	0013      	movs	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2203      	movs	r2, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d017      	beq.n	8002a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2203      	movs	r2, #3
 80029de:	409a      	lsls	r2, r3
 80029e0:	0013      	movs	r3, r2
 80029e2:	43da      	mvns	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	409a      	lsls	r2, r3
 80029f4:	0013      	movs	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2203      	movs	r2, #3
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d123      	bne.n	8002a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	08da      	lsrs	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3208      	adds	r2, #8
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	58d3      	ldr	r3, [r2, r3]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2207      	movs	r2, #7
 8002a20:	4013      	ands	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2107      	movs	r1, #7
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	6939      	ldr	r1, [r7, #16]
 8002a54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	409a      	lsls	r2, r3
 8002a64:	0013      	movs	r3, r2
 8002a66:	43da      	mvns	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	401a      	ands	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	23c0      	movs	r3, #192	; 0xc0
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	4013      	ands	r3, r2
 8002a94:	d100      	bne.n	8002a98 <HAL_GPIO_Init+0x174>
 8002a96:	e09a      	b.n	8002bce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a98:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_GPIO_Init+0x2c8>)
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_GPIO_Init+0x2c8>)
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	619a      	str	r2, [r3, #24]
 8002aa4:	4b51      	ldr	r3, [pc, #324]	; (8002bec <HAL_GPIO_Init+0x2c8>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab0:	4a4f      	ldr	r2, [pc, #316]	; (8002bf0 <HAL_GPIO_Init+0x2cc>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	589b      	ldr	r3, [r3, r2]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	43da      	mvns	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	2390      	movs	r3, #144	; 0x90
 8002ad8:	05db      	lsls	r3, r3, #23
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d013      	beq.n	8002b06 <HAL_GPIO_Init+0x1e2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a44      	ldr	r2, [pc, #272]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00d      	beq.n	8002b02 <HAL_GPIO_Init+0x1de>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a43      	ldr	r2, [pc, #268]	; (8002bf8 <HAL_GPIO_Init+0x2d4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <HAL_GPIO_Init+0x1da>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a42      	ldr	r2, [pc, #264]	; (8002bfc <HAL_GPIO_Init+0x2d8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_GPIO_Init+0x1d6>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x1e4>
 8002afa:	2305      	movs	r3, #5
 8002afc:	e004      	b.n	8002b08 <HAL_GPIO_Init+0x1e4>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_Init+0x1e4>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x1e4>
 8002b06:	2300      	movs	r3, #0
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	2103      	movs	r1, #3
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4093      	lsls	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b18:	4935      	ldr	r1, [pc, #212]	; (8002bf0 <HAL_GPIO_Init+0x2cc>)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	035b      	lsls	r3, r3, #13
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b50:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	039b      	lsls	r3, r3, #14
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b74:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43da      	mvns	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	029b      	lsls	r3, r3, #10
 8002b92:	4013      	ands	r3, r2
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002ba4:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	025b      	lsls	r3, r3, #9
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	40da      	lsrs	r2, r3
 8002bdc:	1e13      	subs	r3, r2, #0
 8002bde:	d000      	beq.n	8002be2 <HAL_GPIO_Init+0x2be>
 8002be0:	e6a8      	b.n	8002934 <HAL_GPIO_Init+0x10>
  } 
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b006      	add	sp, #24
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	48000400 	.word	0x48000400
 8002bf8:	48000800 	.word	0x48000800
 8002bfc:	48000c00 	.word	0x48000c00
 8002c00:	40010400 	.word	0x40010400

08002c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e082      	b.n	8002d1c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2241      	movs	r2, #65	; 0x41
 8002c1a:	5c9b      	ldrb	r3, [r3, r2]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7fe fe7d 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2241      	movs	r2, #65	; 0x41
 8002c36:	2124      	movs	r1, #36	; 0x24
 8002c38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	438a      	bics	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4934      	ldr	r1, [pc, #208]	; (8002d24 <HAL_I2C_Init+0x120>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4931      	ldr	r1, [pc, #196]	; (8002d28 <HAL_I2C_Init+0x124>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0209      	lsls	r1, r1, #8
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	e007      	b.n	8002c92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2184      	movs	r1, #132	; 0x84
 8002c8c:	0209      	lsls	r1, r1, #8
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d104      	bne.n	8002ca4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	491f      	ldr	r1, [pc, #124]	; (8002d2c <HAL_I2C_Init+0x128>)
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	491a      	ldr	r1, [pc, #104]	; (8002d28 <HAL_I2C_Init+0x124>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69d9      	ldr	r1, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1a      	ldr	r2, [r3, #32]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2241      	movs	r2, #65	; 0x41
 8002d08:	2120      	movs	r1, #32
 8002d0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2242      	movs	r2, #66	; 0x42
 8002d16:	2100      	movs	r1, #0
 8002d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	f0ffffff 	.word	0xf0ffffff
 8002d28:	ffff7fff 	.word	0xffff7fff
 8002d2c:	02008000 	.word	0x02008000

08002d30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	000c      	movs	r4, r1
 8002d3a:	0010      	movs	r0, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	230a      	movs	r3, #10
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	1c22      	adds	r2, r4, #0
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	2308      	movs	r3, #8
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	1c02      	adds	r2, r0, #0
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	1dbb      	adds	r3, r7, #6
 8002d50:	1c0a      	adds	r2, r1, #0
 8002d52:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2241      	movs	r2, #65	; 0x41
 8002d58:	5c9b      	ldrb	r3, [r3, r2]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d000      	beq.n	8002d62 <HAL_I2C_Mem_Write+0x32>
 8002d60:	e10c      	b.n	8002f7c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_I2C_Mem_Write+0x42>
 8002d68:	232c      	movs	r3, #44	; 0x2c
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0ff      	b.n	8002f7e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	5c9b      	ldrb	r3, [r3, r2]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_I2C_Mem_Write+0x5c>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0f8      	b.n	8002f7e <HAL_I2C_Mem_Write+0x24e>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2240      	movs	r2, #64	; 0x40
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe fff2 	bl	8001d7c <HAL_GetTick>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	0219      	lsls	r1, r3, #8
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2319      	movs	r3, #25
 8002da8:	2201      	movs	r2, #1
 8002daa:	f000 fb0b 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0e3      	b.n	8002f7e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2241      	movs	r2, #65	; 0x41
 8002dba:	2121      	movs	r1, #33	; 0x21
 8002dbc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2242      	movs	r2, #66	; 0x42
 8002dc2:	2140      	movs	r1, #64	; 0x40
 8002dc4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	222c      	movs	r2, #44	; 0x2c
 8002dd6:	18ba      	adds	r2, r7, r2
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de2:	1dbb      	adds	r3, r7, #6
 8002de4:	881c      	ldrh	r4, [r3, #0]
 8002de6:	2308      	movs	r3, #8
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	881a      	ldrh	r2, [r3, #0]
 8002dec:	230a      	movs	r3, #10
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	8819      	ldrh	r1, [r3, #0]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	0023      	movs	r3, r4
 8002dfe:	f000 f9f9 	bl	80031f4 <I2C_RequestMemoryWrite>
 8002e02:	1e03      	subs	r3, r0, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2240      	movs	r2, #64	; 0x40
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0b5      	b.n	8002f7e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2bff      	cmp	r3, #255	; 0xff
 8002e1a:	d911      	bls.n	8002e40 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	22ff      	movs	r2, #255	; 0xff
 8002e20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	045c      	lsls	r4, r3, #17
 8002e2c:	230a      	movs	r3, #10
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	8819      	ldrh	r1, [r3, #0]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	2300      	movs	r3, #0
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	0023      	movs	r3, r4
 8002e3a:	f000 fc9b 	bl	8003774 <I2C_TransferConfig>
 8002e3e:	e012      	b.n	8002e66 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	049c      	lsls	r4, r3, #18
 8002e54:	230a      	movs	r3, #10
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	8819      	ldrh	r1, [r3, #0]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	0023      	movs	r3, r4
 8002e62:	f000 fc87 	bl	8003774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 faf7 	bl	8003460 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e081      	b.n	8002f7e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d03a      	beq.n	8002f2a <HAL_I2C_Mem_Write+0x1fa>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d136      	bne.n	8002f2a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	f000 fa7b 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e053      	b.n	8002f7e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2bff      	cmp	r3, #255	; 0xff
 8002ede:	d911      	bls.n	8002f04 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	22ff      	movs	r2, #255	; 0xff
 8002ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	045c      	lsls	r4, r3, #17
 8002ef0:	230a      	movs	r3, #10
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	8819      	ldrh	r1, [r3, #0]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	0023      	movs	r3, r4
 8002efe:	f000 fc39 	bl	8003774 <I2C_TransferConfig>
 8002f02:	e012      	b.n	8002f2a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	049c      	lsls	r4, r3, #18
 8002f18:	230a      	movs	r3, #10
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	8819      	ldrh	r1, [r3, #0]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	2300      	movs	r3, #0
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	0023      	movs	r3, r4
 8002f26:	f000 fc25 	bl	8003774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d198      	bne.n	8002e66 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 fad6 	bl	80034ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f40:	1e03      	subs	r3, r0, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e01a      	b.n	8002f7e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	490b      	ldr	r1, [pc, #44]	; (8002f88 <HAL_I2C_Mem_Write+0x258>)
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2241      	movs	r2, #65	; 0x41
 8002f64:	2120      	movs	r1, #32
 8002f66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2242      	movs	r2, #66	; 0x42
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b007      	add	sp, #28
 8002f84:	bd90      	pop	{r4, r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	fe00e800 	.word	0xfe00e800

08002f8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	000c      	movs	r4, r1
 8002f96:	0010      	movs	r0, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	230a      	movs	r3, #10
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	1c22      	adds	r2, r4, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	1c02      	adds	r2, r0, #0
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	1dbb      	adds	r3, r7, #6
 8002fac:	1c0a      	adds	r2, r1, #0
 8002fae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2241      	movs	r2, #65	; 0x41
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d000      	beq.n	8002fbe <HAL_I2C_Mem_Read+0x32>
 8002fbc:	e110      	b.n	80031e0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_I2C_Mem_Read+0x42>
 8002fc4:	232c      	movs	r3, #44	; 0x2c
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d105      	bne.n	8002fda <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e103      	b.n	80031e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	5c9b      	ldrb	r3, [r3, r2]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2C_Mem_Read+0x5c>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e0fc      	b.n	80031e2 <HAL_I2C_Mem_Read+0x256>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	2101      	movs	r1, #1
 8002fee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe fec4 	bl	8001d7c <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	0219      	lsls	r1, r3, #8
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	2319      	movs	r3, #25
 8003004:	2201      	movs	r2, #1
 8003006:	f000 f9dd 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0e7      	b.n	80031e2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2241      	movs	r2, #65	; 0x41
 8003016:	2122      	movs	r1, #34	; 0x22
 8003018:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2242      	movs	r2, #66	; 0x42
 800301e:	2140      	movs	r1, #64	; 0x40
 8003020:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	222c      	movs	r2, #44	; 0x2c
 8003032:	18ba      	adds	r2, r7, r2
 8003034:	8812      	ldrh	r2, [r2, #0]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800303e:	1dbb      	adds	r3, r7, #6
 8003040:	881c      	ldrh	r4, [r3, #0]
 8003042:	2308      	movs	r3, #8
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	881a      	ldrh	r2, [r3, #0]
 8003048:	230a      	movs	r3, #10
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	8819      	ldrh	r1, [r3, #0]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0023      	movs	r3, r4
 800305a:	f000 f92f 	bl	80032bc <I2C_RequestMemoryRead>
 800305e:	1e03      	subs	r3, r0, #0
 8003060:	d005      	beq.n	800306e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2240      	movs	r2, #64	; 0x40
 8003066:	2100      	movs	r1, #0
 8003068:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0b9      	b.n	80031e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	2bff      	cmp	r3, #255	; 0xff
 8003076:	d911      	bls.n	800309c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	22ff      	movs	r2, #255	; 0xff
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	b2da      	uxtb	r2, r3
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	045c      	lsls	r4, r3, #17
 8003088:	230a      	movs	r3, #10
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	8819      	ldrh	r1, [r3, #0]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	4b56      	ldr	r3, [pc, #344]	; (80031ec <HAL_I2C_Mem_Read+0x260>)
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	0023      	movs	r3, r4
 8003096:	f000 fb6d 	bl	8003774 <I2C_TransferConfig>
 800309a:	e012      	b.n	80030c2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	049c      	lsls	r4, r3, #18
 80030b0:	230a      	movs	r3, #10
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	8819      	ldrh	r1, [r3, #0]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <HAL_I2C_Mem_Read+0x260>)
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	0023      	movs	r3, r4
 80030be:	f000 fb59 	bl	8003774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	0013      	movs	r3, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	2104      	movs	r1, #4
 80030d0:	f000 f978 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	1e03      	subs	r3, r0, #0
 80030d6:	d001      	beq.n	80030dc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e082      	b.n	80031e2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d03a      	beq.n	800318e <HAL_I2C_Mem_Read+0x202>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d136      	bne.n	800318e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	0013      	movs	r3, r2
 800312a:	2200      	movs	r2, #0
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	f000 f949 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8003132:	1e03      	subs	r3, r0, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e053      	b.n	80031e2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	2bff      	cmp	r3, #255	; 0xff
 8003142:	d911      	bls.n	8003168 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	22ff      	movs	r2, #255	; 0xff
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	b2da      	uxtb	r2, r3
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	045c      	lsls	r4, r3, #17
 8003154:	230a      	movs	r3, #10
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	8819      	ldrh	r1, [r3, #0]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	0023      	movs	r3, r4
 8003162:	f000 fb07 	bl	8003774 <I2C_TransferConfig>
 8003166:	e012      	b.n	800318e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	b2da      	uxtb	r2, r3
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	049c      	lsls	r4, r3, #18
 800317c:	230a      	movs	r3, #10
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	8819      	ldrh	r1, [r3, #0]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	0023      	movs	r3, r4
 800318a:	f000 faf3 	bl	8003774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d194      	bne.n	80030c2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 f9a4 	bl	80034ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e01a      	b.n	80031e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2220      	movs	r2, #32
 80031b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	490c      	ldr	r1, [pc, #48]	; (80031f0 <HAL_I2C_Mem_Read+0x264>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2241      	movs	r2, #65	; 0x41
 80031c8:	2120      	movs	r1, #32
 80031ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2242      	movs	r2, #66	; 0x42
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2240      	movs	r2, #64	; 0x40
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b007      	add	sp, #28
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	80002400 	.word	0x80002400
 80031f0:	fe00e800 	.word	0xfe00e800

080031f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	000c      	movs	r4, r1
 80031fe:	0010      	movs	r0, r2
 8003200:	0019      	movs	r1, r3
 8003202:	250a      	movs	r5, #10
 8003204:	197b      	adds	r3, r7, r5
 8003206:	1c22      	adds	r2, r4, #0
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	2308      	movs	r3, #8
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	1c02      	adds	r2, r0, #0
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	1dbb      	adds	r3, r7, #6
 8003214:	1c0a      	adds	r2, r1, #0
 8003216:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003218:	1dbb      	adds	r3, r7, #6
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	045c      	lsls	r4, r3, #17
 8003222:	197b      	adds	r3, r7, r5
 8003224:	8819      	ldrh	r1, [r3, #0]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <I2C_RequestMemoryWrite+0xc4>)
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	0023      	movs	r3, r4
 800322e:	f000 faa1 	bl	8003774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003234:	6a39      	ldr	r1, [r7, #32]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	0018      	movs	r0, r3
 800323a:	f000 f911 	bl	8003460 <I2C_WaitOnTXISFlagUntilTimeout>
 800323e:	1e03      	subs	r3, r0, #0
 8003240:	d001      	beq.n	8003246 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e033      	b.n	80032ae <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003246:	1dbb      	adds	r3, r7, #6
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800324e:	2308      	movs	r3, #8
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
 800325c:	e019      	b.n	8003292 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800325e:	2308      	movs	r3, #8
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003272:	6a39      	ldr	r1, [r7, #32]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	0018      	movs	r0, r3
 8003278:	f000 f8f2 	bl	8003460 <I2C_WaitOnTXISFlagUntilTimeout>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d001      	beq.n	8003284 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e014      	b.n	80032ae <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003284:	2308      	movs	r3, #8
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	0013      	movs	r3, r2
 800329c:	2200      	movs	r2, #0
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	f000 f890 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d001      	beq.n	80032ac <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bdb0      	pop	{r4, r5, r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	80002000 	.word	0x80002000

080032bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032bc:	b5b0      	push	{r4, r5, r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	000c      	movs	r4, r1
 80032c6:	0010      	movs	r0, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	250a      	movs	r5, #10
 80032cc:	197b      	adds	r3, r7, r5
 80032ce:	1c22      	adds	r2, r4, #0
 80032d0:	801a      	strh	r2, [r3, #0]
 80032d2:	2308      	movs	r3, #8
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	1c02      	adds	r2, r0, #0
 80032d8:	801a      	strh	r2, [r3, #0]
 80032da:	1dbb      	adds	r3, r7, #6
 80032dc:	1c0a      	adds	r2, r1, #0
 80032de:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032e0:	1dbb      	adds	r3, r7, #6
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	197b      	adds	r3, r7, r5
 80032e8:	8819      	ldrh	r1, [r3, #0]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <I2C_RequestMemoryRead+0xc0>)
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2300      	movs	r3, #0
 80032f2:	f000 fa3f 	bl	8003774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 f8af 	bl	8003460 <I2C_WaitOnTXISFlagUntilTimeout>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d001      	beq.n	800330a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e033      	b.n	8003372 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800330a:	1dbb      	adds	r3, r7, #6
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003312:	2308      	movs	r3, #8
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
 8003320:	e019      	b.n	8003356 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003322:	2308      	movs	r3, #8
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	b29b      	uxth	r3, r3
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	6a39      	ldr	r1, [r7, #32]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	0018      	movs	r0, r3
 800333c:	f000 f890 	bl	8003460 <I2C_WaitOnTXISFlagUntilTimeout>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d001      	beq.n	8003348 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e014      	b.n	8003372 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003348:	2308      	movs	r3, #8
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	0013      	movs	r3, r2
 8003360:	2200      	movs	r2, #0
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	f000 f82e 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d001      	beq.n	8003370 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b004      	add	sp, #16
 8003378:	bdb0      	pop	{r4, r5, r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	80002000 	.word	0x80002000

08003380 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2202      	movs	r2, #2
 8003390:	4013      	ands	r3, r2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d103      	bne.n	800339e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d007      	beq.n	80033bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2101      	movs	r1, #1
 80033b8:	430a      	orrs	r2, r1
 80033ba:	619a      	str	r2, [r3, #24]
  }
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b002      	add	sp, #8
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d4:	e030      	b.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	d02d      	beq.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033dc:	f7fe fcce 	bl	8001d7c <HAL_GetTick>
 80033e0:	0002      	movs	r2, r0
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d122      	bne.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	4013      	ands	r3, r2
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	425a      	negs	r2, r3
 8003402:	4153      	adcs	r3, r2
 8003404:	b2db      	uxtb	r3, r3
 8003406:	001a      	movs	r2, r3
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d113      	bne.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	2220      	movs	r2, #32
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2241      	movs	r2, #65	; 0x41
 8003420:	2120      	movs	r1, #32
 8003422:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2242      	movs	r2, #66	; 0x42
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	2100      	movs	r1, #0
 8003432:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e00f      	b.n	8003458 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	425a      	negs	r2, r3
 8003448:	4153      	adcs	r3, r2
 800344a:	b2db      	uxtb	r3, r3
 800344c:	001a      	movs	r2, r3
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d0bf      	beq.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b004      	add	sp, #16
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800346c:	e032      	b.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f87d 	bl	8003574 <I2C_IsErrorOccurred>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e030      	b.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3301      	adds	r3, #1
 8003486:	d025      	beq.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7fe fc78 	bl	8001d7c <HAL_GetTick>
 800348c:	0002      	movs	r2, r0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	429a      	cmp	r2, r3
 8003496:	d302      	bcc.n	800349e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11a      	bne.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2202      	movs	r2, #2
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d013      	beq.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	2220      	movs	r2, #32
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2241      	movs	r2, #65	; 0x41
 80034bc:	2120      	movs	r1, #32
 80034be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2242      	movs	r2, #66	; 0x42
 80034c4:	2100      	movs	r1, #0
 80034c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2240      	movs	r2, #64	; 0x40
 80034cc:	2100      	movs	r1, #0
 80034ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e007      	b.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2202      	movs	r2, #2
 80034dc:	4013      	ands	r3, r2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d1c5      	bne.n	800346e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b004      	add	sp, #16
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f8:	e02f      	b.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	0018      	movs	r0, r3
 8003502:	f000 f837 	bl	8003574 <I2C_IsErrorOccurred>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d001      	beq.n	800350e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e02d      	b.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe fc35 	bl	8001d7c <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11a      	bne.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2220      	movs	r2, #32
 800352c:	4013      	ands	r3, r2
 800352e:	2b20      	cmp	r3, #32
 8003530:	d013      	beq.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	2220      	movs	r2, #32
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2241      	movs	r2, #65	; 0x41
 8003542:	2120      	movs	r1, #32
 8003544:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2242      	movs	r2, #66	; 0x42
 800354a:	2100      	movs	r1, #0
 800354c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2240      	movs	r2, #64	; 0x40
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e007      	b.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2220      	movs	r2, #32
 8003562:	4013      	ands	r3, r2
 8003564:	2b20      	cmp	r3, #32
 8003566:	d1c8      	bne.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b004      	add	sp, #16
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b08b      	sub	sp, #44	; 0x2c
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2327      	movs	r3, #39	; 0x27
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2210      	movs	r2, #16
 800359c:	4013      	ands	r3, r2
 800359e:	d100      	bne.n	80035a2 <I2C_IsErrorOccurred+0x2e>
 80035a0:	e082      	b.n	80036a8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2210      	movs	r2, #16
 80035a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035aa:	e060      	b.n	800366e <I2C_IsErrorOccurred+0xfa>
 80035ac:	2427      	movs	r4, #39	; 0x27
 80035ae:	193b      	adds	r3, r7, r4
 80035b0:	193a      	adds	r2, r7, r4
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	3301      	adds	r3, #1
 80035ba:	d058      	beq.n	800366e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fe fbde 	bl	8001d7c <HAL_GetTick>
 80035c0:	0002      	movs	r2, r0
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d306      	bcc.n	80035da <I2C_IsErrorOccurred+0x66>
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	193a      	adds	r2, r7, r4
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d149      	bne.n	800366e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	01db      	lsls	r3, r3, #7
 80035e4:	4013      	ands	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035e8:	2013      	movs	r0, #19
 80035ea:	183b      	adds	r3, r7, r0
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	2142      	movs	r1, #66	; 0x42
 80035f0:	5c52      	ldrb	r2, [r2, r1]
 80035f2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	401a      	ands	r2, r3
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	429a      	cmp	r2, r3
 8003606:	d126      	bne.n	8003656 <I2C_IsErrorOccurred+0xe2>
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	01db      	lsls	r3, r3, #7
 800360e:	429a      	cmp	r2, r3
 8003610:	d021      	beq.n	8003656 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003612:	183b      	adds	r3, r7, r0
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b20      	cmp	r3, #32
 8003618:	d01d      	beq.n	8003656 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	01c9      	lsls	r1, r1, #7
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800362c:	f7fe fba6 	bl	8001d7c <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003634:	e00f      	b.n	8003656 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003636:	f7fe fba1 	bl	8001d7c <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b19      	cmp	r3, #25
 8003642:	d908      	bls.n	8003656 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	2220      	movs	r2, #32
 8003648:	4313      	orrs	r3, r2
 800364a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800364c:	2327      	movs	r3, #39	; 0x27
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]

              break;
 8003654:	e00b      	b.n	800366e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2220      	movs	r2, #32
 800365e:	4013      	ands	r3, r2
 8003660:	2127      	movs	r1, #39	; 0x27
 8003662:	187a      	adds	r2, r7, r1
 8003664:	1879      	adds	r1, r7, r1
 8003666:	7809      	ldrb	r1, [r1, #0]
 8003668:	7011      	strb	r1, [r2, #0]
 800366a:	2b20      	cmp	r3, #32
 800366c:	d1e3      	bne.n	8003636 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2220      	movs	r2, #32
 8003676:	4013      	ands	r3, r2
 8003678:	2b20      	cmp	r3, #32
 800367a:	d004      	beq.n	8003686 <I2C_IsErrorOccurred+0x112>
 800367c:	2327      	movs	r3, #39	; 0x27
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d092      	beq.n	80035ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003686:	2327      	movs	r3, #39	; 0x27
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d103      	bne.n	8003698 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2220      	movs	r2, #32
 8003696:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2204      	movs	r2, #4
 800369c:	4313      	orrs	r3, r2
 800369e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036a0:	2327      	movs	r3, #39	; 0x27
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	d00c      	beq.n	80036d4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2201      	movs	r2, #1
 80036be:	4313      	orrs	r3, r2
 80036c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	0052      	lsls	r2, r2, #1
 80036ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036cc:	2327      	movs	r3, #39	; 0x27
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4013      	ands	r3, r2
 80036dc:	d00c      	beq.n	80036f8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2208      	movs	r2, #8
 80036e2:	4313      	orrs	r3, r2
 80036e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2280      	movs	r2, #128	; 0x80
 80036ec:	00d2      	lsls	r2, r2, #3
 80036ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f0:	2327      	movs	r3, #39	; 0x27
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4013      	ands	r3, r2
 8003700:	d00c      	beq.n	800371c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	2202      	movs	r2, #2
 8003706:	4313      	orrs	r3, r2
 8003708:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	0092      	lsls	r2, r2, #2
 8003712:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003714:	2327      	movs	r3, #39	; 0x27
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800371c:	2327      	movs	r3, #39	; 0x27
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01d      	beq.n	8003762 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff fe29 	bl	8003380 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	490d      	ldr	r1, [pc, #52]	; (8003770 <I2C_IsErrorOccurred+0x1fc>)
 800373a:	400a      	ands	r2, r1
 800373c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2241      	movs	r2, #65	; 0x41
 800374e:	2120      	movs	r1, #32
 8003750:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2242      	movs	r2, #66	; 0x42
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2240      	movs	r2, #64	; 0x40
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003762:	2327      	movs	r3, #39	; 0x27
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	781b      	ldrb	r3, [r3, #0]
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b00b      	add	sp, #44	; 0x2c
 800376e:	bd90      	pop	{r4, r7, pc}
 8003770:	fe00e800 	.word	0xfe00e800

08003774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	0008      	movs	r0, r1
 800377e:	0011      	movs	r1, r2
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	240a      	movs	r4, #10
 8003784:	193b      	adds	r3, r7, r4
 8003786:	1c02      	adds	r2, r0, #0
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	2009      	movs	r0, #9
 800378c:	183b      	adds	r3, r7, r0
 800378e:	1c0a      	adds	r2, r1, #0
 8003790:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003792:	193b      	adds	r3, r7, r4
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	059b      	lsls	r3, r3, #22
 8003798:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800379a:	183b      	adds	r3, r7, r0
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	0419      	lsls	r1, r3, #16
 80037a0:	23ff      	movs	r3, #255	; 0xff
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037a6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	4313      	orrs	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037be:	0d51      	lsrs	r1, r2, #21
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	00d2      	lsls	r2, r2, #3
 80037c4:	400a      	ands	r2, r1
 80037c6:	4907      	ldr	r1, [pc, #28]	; (80037e4 <I2C_TransferConfig+0x70>)
 80037c8:	430a      	orrs	r2, r1
 80037ca:	43d2      	mvns	r2, r2
 80037cc:	401a      	ands	r2, r3
 80037ce:	0011      	movs	r1, r2
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b007      	add	sp, #28
 80037e0:	bd90      	pop	{r4, r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	03ff63ff 	.word	0x03ff63ff

080037e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2241      	movs	r2, #65	; 0x41
 80037f6:	5c9b      	ldrb	r3, [r3, r2]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d138      	bne.n	8003870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003808:	2302      	movs	r3, #2
 800380a:	e032      	b.n	8003872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	2101      	movs	r1, #1
 8003812:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2241      	movs	r2, #65	; 0x41
 8003818:	2124      	movs	r1, #36	; 0x24
 800381a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2101      	movs	r1, #1
 8003828:	438a      	bics	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4911      	ldr	r1, [pc, #68]	; (800387c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003838:	400a      	ands	r2, r1
 800383a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2101      	movs	r1, #1
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2241      	movs	r2, #65	; 0x41
 8003860:	2120      	movs	r1, #32
 8003862:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	2100      	movs	r1, #0
 800386a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	ffffefff 	.word	0xffffefff

08003880 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2241      	movs	r2, #65	; 0x41
 800388e:	5c9b      	ldrb	r3, [r3, r2]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	d139      	bne.n	800390a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2240      	movs	r2, #64	; 0x40
 800389a:	5c9b      	ldrb	r3, [r3, r2]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e033      	b.n	800390c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2241      	movs	r2, #65	; 0x41
 80038b0:	2124      	movs	r1, #36	; 0x24
 80038b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	438a      	bics	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a11      	ldr	r2, [pc, #68]	; (8003914 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2101      	movs	r1, #1
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2241      	movs	r2, #65	; 0x41
 80038fa:	2120      	movs	r1, #32
 80038fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2240      	movs	r2, #64	; 0x40
 8003902:	2100      	movs	r1, #0
 8003904:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}
 8003914:	fffff0ff 	.word	0xfffff0ff

08003918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e301      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	4013      	ands	r3, r2
 8003932:	d100      	bne.n	8003936 <HAL_RCC_OscConfig+0x1e>
 8003934:	e08d      	b.n	8003a52 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003936:	4bc3      	ldr	r3, [pc, #780]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	220c      	movs	r2, #12
 800393c:	4013      	ands	r3, r2
 800393e:	2b04      	cmp	r3, #4
 8003940:	d00e      	beq.n	8003960 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003942:	4bc0      	ldr	r3, [pc, #768]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	220c      	movs	r2, #12
 8003948:	4013      	ands	r3, r2
 800394a:	2b08      	cmp	r3, #8
 800394c:	d116      	bne.n	800397c <HAL_RCC_OscConfig+0x64>
 800394e:	4bbd      	ldr	r3, [pc, #756]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	025b      	lsls	r3, r3, #9
 8003956:	401a      	ands	r2, r3
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	025b      	lsls	r3, r3, #9
 800395c:	429a      	cmp	r2, r3
 800395e:	d10d      	bne.n	800397c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	4bb8      	ldr	r3, [pc, #736]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	029b      	lsls	r3, r3, #10
 8003968:	4013      	ands	r3, r2
 800396a:	d100      	bne.n	800396e <HAL_RCC_OscConfig+0x56>
 800396c:	e070      	b.n	8003a50 <HAL_RCC_OscConfig+0x138>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d000      	beq.n	8003978 <HAL_RCC_OscConfig+0x60>
 8003976:	e06b      	b.n	8003a50 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e2d8      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x7c>
 8003984:	4baf      	ldr	r3, [pc, #700]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4bae      	ldr	r3, [pc, #696]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	0249      	lsls	r1, r1, #9
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e02f      	b.n	80039f4 <HAL_RCC_OscConfig+0xdc>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10c      	bne.n	80039b6 <HAL_RCC_OscConfig+0x9e>
 800399c:	4ba9      	ldr	r3, [pc, #676]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4ba8      	ldr	r3, [pc, #672]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039a2:	49a9      	ldr	r1, [pc, #676]	; (8003c48 <HAL_RCC_OscConfig+0x330>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	4ba6      	ldr	r3, [pc, #664]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4ba5      	ldr	r3, [pc, #660]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039ae:	49a7      	ldr	r1, [pc, #668]	; (8003c4c <HAL_RCC_OscConfig+0x334>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e01e      	b.n	80039f4 <HAL_RCC_OscConfig+0xdc>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d10e      	bne.n	80039dc <HAL_RCC_OscConfig+0xc4>
 80039be:	4ba1      	ldr	r3, [pc, #644]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4ba0      	ldr	r3, [pc, #640]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	02c9      	lsls	r1, r1, #11
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	4b9d      	ldr	r3, [pc, #628]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b9c      	ldr	r3, [pc, #624]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0249      	lsls	r1, r1, #9
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xdc>
 80039dc:	4b99      	ldr	r3, [pc, #612]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b98      	ldr	r3, [pc, #608]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039e2:	4999      	ldr	r1, [pc, #612]	; (8003c48 <HAL_RCC_OscConfig+0x330>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	4b96      	ldr	r3, [pc, #600]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b95      	ldr	r3, [pc, #596]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 80039ee:	4997      	ldr	r1, [pc, #604]	; (8003c4c <HAL_RCC_OscConfig+0x334>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d014      	beq.n	8003a26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe f9be 	bl	8001d7c <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a06:	f7fe f9b9 	bl	8001d7c <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	; 0x64
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e28a      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a18:	4b8a      	ldr	r3, [pc, #552]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	4013      	ands	r3, r2
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0xee>
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe f9a9 	bl	8001d7c <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe f9a4 	bl	8001d7c <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e275      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	4b80      	ldr	r3, [pc, #512]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x118>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2202      	movs	r2, #2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <HAL_RCC_OscConfig+0x146>
 8003a5c:	e069      	b.n	8003b32 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a5e:	4b79      	ldr	r3, [pc, #484]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	220c      	movs	r2, #12
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a68:	4b76      	ldr	r3, [pc, #472]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	220c      	movs	r2, #12
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d11c      	bne.n	8003aae <HAL_RCC_OscConfig+0x196>
 8003a74:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	025b      	lsls	r3, r3, #9
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d116      	bne.n	8003aae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a80:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2202      	movs	r2, #2
 8003a86:	4013      	ands	r3, r2
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e24b      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b6b      	ldr	r3, [pc, #428]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	22f8      	movs	r2, #248	; 0xf8
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	00da      	lsls	r2, r3, #3
 8003aa6:	4b67      	ldr	r3, [pc, #412]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aac:	e041      	b.n	8003b32 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d024      	beq.n	8003b00 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003abc:	2101      	movs	r1, #1
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac2:	f7fe f95b 	bl	8001d7c <HAL_GetTick>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fe f956 	bl	8001d7c <HAL_GetTick>
 8003ad0:	0002      	movs	r2, r0
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e227      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ade:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d0f1      	beq.n	8003acc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae8:	4b56      	ldr	r3, [pc, #344]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	22f8      	movs	r2, #248	; 0xf8
 8003aee:	4393      	bics	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00da      	lsls	r2, r3, #3
 8003af8:	4b52      	ldr	r3, [pc, #328]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e018      	b.n	8003b32 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b00:	4b50      	ldr	r3, [pc, #320]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003b06:	2101      	movs	r1, #1
 8003b08:	438a      	bics	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f936 	bl	8001d7c <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fe f931 	bl	8001d7c <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e202      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b28:	4b46      	ldr	r3, [pc, #280]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d1f1      	bne.n	8003b16 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2208      	movs	r2, #8
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d036      	beq.n	8003baa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d019      	beq.n	8003b78 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b44:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b48:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b50:	f7fe f914 	bl	8001d7c <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7fe f90f 	bl	8001d7c <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1e0      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2202      	movs	r2, #2
 8003b72:	4013      	ands	r3, r2
 8003b74:	d0f1      	beq.n	8003b5a <HAL_RCC_OscConfig+0x242>
 8003b76:	e018      	b.n	8003baa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b78:	4b32      	ldr	r3, [pc, #200]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7c:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	2101      	movs	r1, #1
 8003b80:	438a      	bics	r2, r1
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b84:	f7fe f8fa 	bl	8001d7c <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fe f8f5 	bl	8001d7c <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1c6      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d1f1      	bne.n	8003b8e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d100      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x29e>
 8003bb4:	e0b4      	b.n	8003d20 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb6:	201f      	movs	r0, #31
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	055b      	lsls	r3, r3, #21
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d110      	bne.n	8003bec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0549      	lsls	r1, r1, #21
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	61da      	str	r2, [r3, #28]
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	055b      	lsls	r3, r3, #21
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <HAL_RCC_OscConfig+0x338>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d11a      	bne.n	8003c2e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_RCC_OscConfig+0x338>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <HAL_RCC_OscConfig+0x338>)
 8003bfe:	2180      	movs	r1, #128	; 0x80
 8003c00:	0049      	lsls	r1, r1, #1
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c06:	f7fe f8b9 	bl	8001d7c <HAL_GetTick>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fe f8b4 	bl	8001d7c <HAL_GetTick>
 8003c14:	0002      	movs	r2, r0
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e185      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_OscConfig+0x338>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10e      	bne.n	8003c54 <HAL_RCC_OscConfig+0x33c>
 8003c36:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	621a      	str	r2, [r3, #32]
 8003c42:	e035      	b.n	8003cb0 <HAL_RCC_OscConfig+0x398>
 8003c44:	40021000 	.word	0x40021000
 8003c48:	fffeffff 	.word	0xfffeffff
 8003c4c:	fffbffff 	.word	0xfffbffff
 8003c50:	40007000 	.word	0x40007000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10c      	bne.n	8003c76 <HAL_RCC_OscConfig+0x35e>
 8003c5c:	4bb6      	ldr	r3, [pc, #728]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	4bb5      	ldr	r3, [pc, #724]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c62:	2101      	movs	r1, #1
 8003c64:	438a      	bics	r2, r1
 8003c66:	621a      	str	r2, [r3, #32]
 8003c68:	4bb3      	ldr	r3, [pc, #716]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	4bb2      	ldr	r3, [pc, #712]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c6e:	2104      	movs	r1, #4
 8003c70:	438a      	bics	r2, r1
 8003c72:	621a      	str	r2, [r3, #32]
 8003c74:	e01c      	b.n	8003cb0 <HAL_RCC_OscConfig+0x398>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x380>
 8003c7e:	4bae      	ldr	r3, [pc, #696]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	4bad      	ldr	r3, [pc, #692]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c84:	2104      	movs	r1, #4
 8003c86:	430a      	orrs	r2, r1
 8003c88:	621a      	str	r2, [r3, #32]
 8003c8a:	4bab      	ldr	r3, [pc, #684]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	4baa      	ldr	r3, [pc, #680]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c90:	2101      	movs	r1, #1
 8003c92:	430a      	orrs	r2, r1
 8003c94:	621a      	str	r2, [r3, #32]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x398>
 8003c98:	4ba7      	ldr	r3, [pc, #668]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c9a:	6a1a      	ldr	r2, [r3, #32]
 8003c9c:	4ba6      	ldr	r3, [pc, #664]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	621a      	str	r2, [r3, #32]
 8003ca4:	4ba4      	ldr	r3, [pc, #656]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	4ba3      	ldr	r3, [pc, #652]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003caa:	2104      	movs	r1, #4
 8003cac:	438a      	bics	r2, r1
 8003cae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d014      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fe f860 	bl	8001d7c <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	e009      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fe f85b 	bl	8001d7c <HAL_GetTick>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	4a9b      	ldr	r2, [pc, #620]	; (8003f3c <HAL_RCC_OscConfig+0x624>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e12b      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd6:	4b98      	ldr	r3, [pc, #608]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x3aa>
 8003ce0:	e013      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce2:	f7fe f84b 	bl	8001d7c <HAL_GetTick>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	e009      	b.n	8003d00 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fe f846 	bl	8001d7c <HAL_GetTick>
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	4a91      	ldr	r2, [pc, #580]	; (8003f3c <HAL_RCC_OscConfig+0x624>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e116      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	4b8d      	ldr	r3, [pc, #564]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	2202      	movs	r2, #2
 8003d06:	4013      	ands	r3, r2
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d0a:	231f      	movs	r3, #31
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d14:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	4b87      	ldr	r3, [pc, #540]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d1a:	4989      	ldr	r1, [pc, #548]	; (8003f40 <HAL_RCC_OscConfig+0x628>)
 8003d1c:	400a      	ands	r2, r1
 8003d1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2210      	movs	r2, #16
 8003d26:	4013      	ands	r3, r2
 8003d28:	d063      	beq.n	8003df2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d12a      	bne.n	8003d88 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d32:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d36:	4b80      	ldr	r3, [pc, #512]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d38:	2104      	movs	r1, #4
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d3e:	4b7e      	ldr	r3, [pc, #504]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d42:	4b7d      	ldr	r3, [pc, #500]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d44:	2101      	movs	r1, #1
 8003d46:	430a      	orrs	r2, r1
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fe f817 	bl	8001d7c <HAL_GetTick>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d54:	f7fe f812 	bl	8001d7c <HAL_GetTick>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e0e3      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d66:	4b74      	ldr	r3, [pc, #464]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d0f1      	beq.n	8003d54 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d70:	4b71      	ldr	r3, [pc, #452]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	22f8      	movs	r2, #248	; 0xf8
 8003d76:	4393      	bics	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	00da      	lsls	r2, r3, #3
 8003d80:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34
 8003d86:	e034      	b.n	8003df2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	3305      	adds	r3, #5
 8003d8e:	d111      	bne.n	8003db4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d96:	2104      	movs	r1, #4
 8003d98:	438a      	bics	r2, r1
 8003d9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	22f8      	movs	r2, #248	; 0xf8
 8003da2:	4393      	bics	r3, r2
 8003da4:	0019      	movs	r1, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	00da      	lsls	r2, r3, #3
 8003dac:	4b62      	ldr	r3, [pc, #392]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003dae:	430a      	orrs	r2, r1
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34
 8003db2:	e01e      	b.n	8003df2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003db4:	4b60      	ldr	r3, [pc, #384]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db8:	4b5f      	ldr	r3, [pc, #380]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003dba:	2104      	movs	r1, #4
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003dc0:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc4:	4b5c      	ldr	r3, [pc, #368]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	438a      	bics	r2, r1
 8003dca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dcc:	f7fd ffd6 	bl	8001d7c <HAL_GetTick>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003dd6:	f7fd ffd1 	bl	8001d7c <HAL_GetTick>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0a2      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003de8:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	2202      	movs	r2, #2
 8003dee:	4013      	ands	r3, r2
 8003df0:	d1f1      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d100      	bne.n	8003dfc <HAL_RCC_OscConfig+0x4e4>
 8003dfa:	e097      	b.n	8003f2c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dfc:	4b4e      	ldr	r3, [pc, #312]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	220c      	movs	r2, #12
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d100      	bne.n	8003e0a <HAL_RCC_OscConfig+0x4f2>
 8003e08:	e06b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d14c      	bne.n	8003eac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b48      	ldr	r3, [pc, #288]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e18:	494a      	ldr	r1, [pc, #296]	; (8003f44 <HAL_RCC_OscConfig+0x62c>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd ffad 	bl	8001d7c <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fd ffa8 	bl	8001d7c <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e079      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3a:	4b3f      	ldr	r3, [pc, #252]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	049b      	lsls	r3, r3, #18
 8003e42:	4013      	ands	r3, r2
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e46:	4b3c      	ldr	r3, [pc, #240]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	220f      	movs	r2, #15
 8003e4c:	4393      	bics	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e56:	430a      	orrs	r2, r1
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e5a:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4a3a      	ldr	r2, [pc, #232]	; (8003f48 <HAL_RCC_OscConfig+0x630>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003e7a:	2180      	movs	r1, #128	; 0x80
 8003e7c:	0449      	lsls	r1, r1, #17
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fd ff7b 	bl	8001d7c <HAL_GetTick>
 8003e86:	0003      	movs	r3, r0
 8003e88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fd ff76 	bl	8001d7c <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e047      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	049b      	lsls	r3, r3, #18
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x574>
 8003eaa:	e03f      	b.n	8003f2c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003eb2:	4924      	ldr	r1, [pc, #144]	; (8003f44 <HAL_RCC_OscConfig+0x62c>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fd ff60 	bl	8001d7c <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd ff5b 	bl	8001d7c <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e02c      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed4:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	049b      	lsls	r3, r3, #18
 8003edc:	4013      	ands	r3, r2
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5aa>
 8003ee0:	e024      	b.n	8003f2c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e01f      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <HAL_RCC_OscConfig+0x620>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	025b      	lsls	r3, r3, #9
 8003f00:	401a      	ands	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d10e      	bne.n	8003f28 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	401a      	ands	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	23f0      	movs	r3, #240	; 0xf0
 8003f1c:	039b      	lsls	r3, r3, #14
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b008      	add	sp, #32
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	00001388 	.word	0x00001388
 8003f40:	efffffff 	.word	0xefffffff
 8003f44:	feffffff 	.word	0xfeffffff
 8003f48:	ffc2ffff 	.word	0xffc2ffff

08003f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b3      	b.n	80040c8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f60:	4b5b      	ldr	r3, [pc, #364]	; (80040d0 <HAL_RCC_ClockConfig+0x184>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4013      	ands	r3, r2
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d911      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b58      	ldr	r3, [pc, #352]	; (80040d0 <HAL_RCC_ClockConfig+0x184>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2201      	movs	r2, #1
 8003f74:	4393      	bics	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	4b55      	ldr	r3, [pc, #340]	; (80040d0 <HAL_RCC_ClockConfig+0x184>)
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_ClockConfig+0x184>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2201      	movs	r2, #1
 8003f86:	4013      	ands	r3, r2
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e09a      	b.n	80040c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2202      	movs	r2, #2
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d015      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d006      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fa6:	4b4b      	ldr	r3, [pc, #300]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8003fac:	21e0      	movs	r1, #224	; 0xe0
 8003fae:	00c9      	lsls	r1, r1, #3
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	22f0      	movs	r2, #240	; 0xf0
 8003fba:	4393      	bics	r3, r2
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d040      	beq.n	8004054 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	029b      	lsls	r3, r3, #10
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d114      	bne.n	8004010 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06e      	b.n	80040c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	049b      	lsls	r3, r3, #18
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d108      	bne.n	8004010 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e062      	b.n	80040c8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2202      	movs	r2, #2
 8004008:	4013      	ands	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e05b      	b.n	80040c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004010:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2203      	movs	r2, #3
 8004016:	4393      	bics	r3, r2
 8004018:	0019      	movs	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004024:	f7fd feaa 	bl	8001d7c <HAL_GetTick>
 8004028:	0003      	movs	r3, r0
 800402a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402c:	e009      	b.n	8004042 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402e:	f7fd fea5 	bl	8001d7c <HAL_GetTick>
 8004032:	0002      	movs	r2, r0
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <HAL_RCC_ClockConfig+0x18c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e042      	b.n	80040c8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	220c      	movs	r2, #12
 8004048:	401a      	ands	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1ec      	bne.n	800402e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <HAL_RCC_ClockConfig+0x184>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	4013      	ands	r3, r2
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d211      	bcs.n	8004086 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_RCC_ClockConfig+0x184>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	4393      	bics	r3, r2
 800406a:	0019      	movs	r1, r3
 800406c:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <HAL_RCC_ClockConfig+0x184>)
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_RCC_ClockConfig+0x184>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2201      	movs	r2, #1
 800407a:	4013      	ands	r3, r2
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e020      	b.n	80040c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2204      	movs	r2, #4
 800408c:	4013      	ands	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004090:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a11      	ldr	r2, [pc, #68]	; (80040dc <HAL_RCC_ClockConfig+0x190>)
 8004096:	4013      	ands	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040a4:	f000 f820 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80040a8:	0001      	movs	r1, r0
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x188>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	220f      	movs	r2, #15
 80040b2:	4013      	ands	r3, r2
 80040b4:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <HAL_RCC_ClockConfig+0x194>)
 80040b6:	5cd3      	ldrb	r3, [r2, r3]
 80040b8:	000a      	movs	r2, r1
 80040ba:	40da      	lsrs	r2, r3
 80040bc:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_RCC_ClockConfig+0x198>)
 80040be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040c0:	2003      	movs	r0, #3
 80040c2:	f7fd fe15 	bl	8001cf0 <HAL_InitTick>
  
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b004      	add	sp, #16
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40022000 	.word	0x40022000
 80040d4:	40021000 	.word	0x40021000
 80040d8:	00001388 	.word	0x00001388
 80040dc:	fffff8ff 	.word	0xfffff8ff
 80040e0:	08006344 	.word	0x08006344
 80040e4:	20000008 	.word	0x20000008

080040e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	2300      	movs	r3, #0
 80040fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	220c      	movs	r2, #12
 800410c:	4013      	ands	r3, r2
 800410e:	2b04      	cmp	r3, #4
 8004110:	d002      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x30>
 8004112:	2b08      	cmp	r3, #8
 8004114:	d003      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0x36>
 8004116:	e02c      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_RCC_GetSysClockFreq+0xa0>)
 800411a:	613b      	str	r3, [r7, #16]
      break;
 800411c:	e02c      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	0c9b      	lsrs	r3, r3, #18
 8004122:	220f      	movs	r2, #15
 8004124:	4013      	ands	r3, r2
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004128:	5cd3      	ldrb	r3, [r2, r3]
 800412a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_RCC_GetSysClockFreq+0x9c>)
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	220f      	movs	r2, #15
 8004132:	4013      	ands	r3, r2
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	025b      	lsls	r3, r3, #9
 8004140:	4013      	ands	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4810      	ldr	r0, [pc, #64]	; (8004188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004148:	f7fb fff0 	bl	800012c <__udivsi3>
 800414c:	0003      	movs	r3, r0
 800414e:	001a      	movs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4353      	muls	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e009      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	000a      	movs	r2, r1
 800415c:	0152      	lsls	r2, r2, #5
 800415e:	1a52      	subs	r2, r2, r1
 8004160:	0193      	lsls	r3, r2, #6
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	185b      	adds	r3, r3, r1
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	613b      	str	r3, [r7, #16]
      break;
 8004170:	e002      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004174:	613b      	str	r3, [r7, #16]
      break;
 8004176:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004178:	693b      	ldr	r3, [r7, #16]
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b006      	add	sp, #24
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	40021000 	.word	0x40021000
 8004188:	007a1200 	.word	0x007a1200
 800418c:	0800635c 	.word	0x0800635c
 8004190:	0800636c 	.word	0x0800636c

08004194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004198:	4b02      	ldr	r3, [pc, #8]	; (80041a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	20000008 	.word	0x20000008

080041a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80041ac:	f7ff fff2 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041b0:	0001      	movs	r1, r0
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	2207      	movs	r2, #7
 80041ba:	4013      	ands	r3, r2
 80041bc:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041be:	5cd3      	ldrb	r3, [r2, r3]
 80041c0:	40d9      	lsrs	r1, r3
 80041c2:	000b      	movs	r3, r1
}    
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	40021000 	.word	0x40021000
 80041d0:	08006354 	.word	0x08006354

080041d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	025b      	lsls	r3, r3, #9
 80041ec:	4013      	ands	r3, r2
 80041ee:	d100      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80041f0:	e08e      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2017      	movs	r0, #23
 80041f4:	183b      	adds	r3, r7, r0
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	055b      	lsls	r3, r3, #21
 8004202:	4013      	ands	r3, r2
 8004204:	d110      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	0549      	lsls	r1, r1, #21
 8004210:	430a      	orrs	r2, r1
 8004212:	61da      	str	r2, [r3, #28]
 8004214:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	055b      	lsls	r3, r3, #21
 800421c:	4013      	ands	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004222:	183b      	adds	r3, r7, r0
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	4b54      	ldr	r3, [pc, #336]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4013      	ands	r3, r2
 8004232:	d11a      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004234:	4b51      	ldr	r3, [pc, #324]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b50      	ldr	r3, [pc, #320]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800423a:	2180      	movs	r1, #128	; 0x80
 800423c:	0049      	lsls	r1, r1, #1
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004242:	f7fd fd9b 	bl	8001d7c <HAL_GetTick>
 8004246:	0003      	movs	r3, r0
 8004248:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424a:	e008      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424c:	f7fd fd96 	bl	8001d7c <HAL_GetTick>
 8004250:	0002      	movs	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e087      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425e:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4013      	ands	r3, r2
 8004268:	d0f0      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800426c:	6a1a      	ldr	r2, [r3, #32]
 800426e:	23c0      	movs	r3, #192	; 0xc0
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4013      	ands	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d034      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	23c0      	movs	r3, #192	; 0xc0
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4013      	ands	r3, r2
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	429a      	cmp	r2, r3
 800428a:	d02c      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	4a3b      	ldr	r2, [pc, #236]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004292:	4013      	ands	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004296:	4b38      	ldr	r3, [pc, #224]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	4b37      	ldr	r3, [pc, #220]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	0249      	lsls	r1, r1, #9
 80042a0:	430a      	orrs	r2, r1
 80042a2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a4:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042aa:	4936      	ldr	r1, [pc, #216]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042b0:	4b31      	ldr	r3, [pc, #196]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	4013      	ands	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042be:	f7fd fd5d 	bl	8001d7c <HAL_GetTick>
 80042c2:	0003      	movs	r3, r0
 80042c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fd fd58 	bl	8001d7c <HAL_GetTick>
 80042cc:	0002      	movs	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	4a2d      	ldr	r2, [pc, #180]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e048      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	2202      	movs	r2, #2
 80042e2:	4013      	ands	r3, r2
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4a25      	ldr	r2, [pc, #148]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	0019      	movs	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042f6:	430a      	orrs	r2, r1
 80042f8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042fa:	2317      	movs	r3, #23
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d105      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004304:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800430a:	4920      	ldr	r1, [pc, #128]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430c:	400a      	ands	r2, r1
 800430e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	4013      	ands	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800431a:	4b17      	ldr	r3, [pc, #92]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	2203      	movs	r2, #3
 8004320:	4393      	bics	r3, r2
 8004322:	0019      	movs	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800432a:	430a      	orrs	r2, r1
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2220      	movs	r2, #32
 8004334:	4013      	ands	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	2210      	movs	r2, #16
 800433e:	4393      	bics	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004348:	430a      	orrs	r2, r1
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4013      	ands	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	2240      	movs	r2, #64	; 0x40
 800435e:	4393      	bics	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004368:	430a      	orrs	r2, r1
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b006      	add	sp, #24
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	40021000 	.word	0x40021000
 800437c:	40007000 	.word	0x40007000
 8004380:	fffffcff 	.word	0xfffffcff
 8004384:	fffeffff 	.word	0xfffeffff
 8004388:	00001388 	.word	0x00001388
 800438c:	efffffff 	.word	0xefffffff

08004390 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004390:	b5b0      	push	{r4, r5, r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004398:	230f      	movs	r3, #15
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e081      	b.n	80044ae <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7f5b      	ldrb	r3, [r3, #29]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f7fd fb03 	bl	80019c8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2210      	movs	r2, #16
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d05c      	beq.n	8004490 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	22ca      	movs	r2, #202	; 0xca
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2253      	movs	r2, #83	; 0x53
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043e6:	250f      	movs	r5, #15
 80043e8:	197c      	adds	r4, r7, r5
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f000 fa73 	bl	80048d8 <RTC_EnterInitMode>
 80043f2:	0003      	movs	r3, r0
 80043f4:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80043f6:	0028      	movs	r0, r5
 80043f8:	183b      	adds	r3, r7, r0
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d12c      	bne.n	800445a <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	492b      	ldr	r1, [pc, #172]	; (80044b8 <HAL_RTC_Init+0x128>)
 800440c:	400a      	ands	r2, r1
 800440e:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6899      	ldr	r1, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68d2      	ldr	r2, [r2, #12]
 8004436:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6919      	ldr	r1, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	041a      	lsls	r2, r3, #16
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800444c:	183c      	adds	r4, r7, r0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f000 fa84 	bl	800495e <RTC_ExitInitMode>
 8004456:	0003      	movs	r3, r0
 8004458:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800445a:	230f      	movs	r3, #15
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d110      	bne.n	8004486 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4913      	ldr	r1, [pc, #76]	; (80044bc <HAL_RTC_Init+0x12c>)
 8004470:	400a      	ands	r2, r1
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	22ff      	movs	r2, #255	; 0xff
 800448c:	625a      	str	r2, [r3, #36]	; 0x24
 800448e:	e003      	b.n	8004498 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004490:	230f      	movs	r3, #15
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004498:	230f      	movs	r3, #15
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80044a8:	230f      	movs	r3, #15
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	781b      	ldrb	r3, [r3, #0]
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bdb0      	pop	{r4, r5, r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	ff8fffbf 	.word	0xff8fffbf
 80044bc:	fffbffff 	.word	0xfffbffff

080044c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044c0:	b5b0      	push	{r4, r5, r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	7f1b      	ldrb	r3, [r3, #28]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_RTC_SetTime+0x1c>
 80044d8:	2302      	movs	r3, #2
 80044da:	e08e      	b.n	80045fa <HAL_RTC_SetTime+0x13a>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2202      	movs	r2, #2
 80044e6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d125      	bne.n	800453a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2240      	movs	r2, #64	; 0x40
 80044f6:	4013      	ands	r3, r2
 80044f8:	d102      	bne.n	8004500 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2200      	movs	r2, #0
 80044fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	0018      	movs	r0, r3
 8004506:	f000 fa53 	bl	80049b0 <RTC_ByteToBcd2>
 800450a:	0003      	movs	r3, r0
 800450c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	0018      	movs	r0, r3
 8004514:	f000 fa4c 	bl	80049b0 <RTC_ByteToBcd2>
 8004518:	0003      	movs	r3, r0
 800451a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800451c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	789b      	ldrb	r3, [r3, #2]
 8004522:	0018      	movs	r0, r3
 8004524:	f000 fa44 	bl	80049b0 <RTC_ByteToBcd2>
 8004528:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800452a:	0022      	movs	r2, r4
 800452c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	78db      	ldrb	r3, [r3, #3]
 8004532:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e017      	b.n	800456a <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	4013      	ands	r3, r2
 8004544:	d102      	bne.n	800454c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2200      	movs	r2, #0
 800454a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004558:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800455e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	78db      	ldrb	r3, [r3, #3]
 8004564:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	22ca      	movs	r2, #202	; 0xca
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2253      	movs	r2, #83	; 0x53
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800457a:	2513      	movs	r5, #19
 800457c:	197c      	adds	r4, r7, r5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 f9a9 	bl	80048d8 <RTC_EnterInitMode>
 8004586:	0003      	movs	r3, r0
 8004588:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800458a:	0028      	movs	r0, r5
 800458c:	183b      	adds	r3, r7, r0
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d120      	bne.n	80045d6 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	491a      	ldr	r1, [pc, #104]	; (8004604 <HAL_RTC_SetTime+0x144>)
 800459c:	400a      	ands	r2, r1
 800459e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4917      	ldr	r1, [pc, #92]	; (8004608 <HAL_RTC_SetTime+0x148>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6899      	ldr	r1, [r3, #8]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	431a      	orrs	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045c8:	183c      	adds	r4, r7, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f9c6 	bl	800495e <RTC_ExitInitMode>
 80045d2:	0003      	movs	r3, r0
 80045d4:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80045d6:	2313      	movs	r3, #19
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	22ff      	movs	r2, #255	; 0xff
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]

  return status;
 80045f4:	2313      	movs	r3, #19
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	781b      	ldrb	r3, [r3, #0]
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b006      	add	sp, #24
 8004600:	bdb0      	pop	{r4, r5, r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	007f7f7f 	.word	0x007f7f7f
 8004608:	fffbffff 	.word	0xfffbffff

0800460c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	045b      	lsls	r3, r3, #17
 800462e:	0c5a      	lsrs	r2, r3, #17
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <HAL_RTC_GetTime+0xb8>)
 800463c:	4013      	ands	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	b2db      	uxtb	r3, r3
 8004646:	223f      	movs	r2, #63	; 0x3f
 8004648:	4013      	ands	r3, r2
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	0a1b      	lsrs	r3, r3, #8
 8004654:	b2db      	uxtb	r3, r3
 8004656:	227f      	movs	r2, #127	; 0x7f
 8004658:	4013      	ands	r3, r2
 800465a:	b2da      	uxtb	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	227f      	movs	r2, #127	; 0x7f
 8004666:	4013      	ands	r3, r2
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	0d9b      	lsrs	r3, r3, #22
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2201      	movs	r2, #1
 8004676:	4013      	ands	r3, r2
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11a      	bne.n	80046ba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 f9b2 	bl	80049f2 <RTC_Bcd2ToByte>
 800468e:	0003      	movs	r3, r0
 8004690:	001a      	movs	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 f9a9 	bl	80049f2 <RTC_Bcd2ToByte>
 80046a0:	0003      	movs	r3, r0
 80046a2:	001a      	movs	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	789b      	ldrb	r3, [r3, #2]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 f9a0 	bl	80049f2 <RTC_Bcd2ToByte>
 80046b2:	0003      	movs	r3, r0
 80046b4:	001a      	movs	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b006      	add	sp, #24
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	007f7f7f 	.word	0x007f7f7f

080046c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	7f1b      	ldrb	r3, [r3, #28]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_RTC_SetDate+0x1c>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e07a      	b.n	80047da <HAL_RTC_SetDate+0x112>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2202      	movs	r2, #2
 80046ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10e      	bne.n	8004714 <HAL_RTC_SetDate+0x4c>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	001a      	movs	r2, r3
 80046fc:	2310      	movs	r3, #16
 80046fe:	4013      	ands	r3, r2
 8004700:	d008      	beq.n	8004714 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2210      	movs	r2, #16
 8004708:	4393      	bics	r3, r2
 800470a:	b2db      	uxtb	r3, r3
 800470c:	330a      	adds	r3, #10
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11c      	bne.n	8004754 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	78db      	ldrb	r3, [r3, #3]
 800471e:	0018      	movs	r0, r3
 8004720:	f000 f946 	bl	80049b0 <RTC_ByteToBcd2>
 8004724:	0003      	movs	r3, r0
 8004726:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	0018      	movs	r0, r3
 800472e:	f000 f93f 	bl	80049b0 <RTC_ByteToBcd2>
 8004732:	0003      	movs	r3, r0
 8004734:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004736:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	789b      	ldrb	r3, [r3, #2]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f937 	bl	80049b0 <RTC_ByteToBcd2>
 8004742:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004744:	0022      	movs	r2, r4
 8004746:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e00e      	b.n	8004772 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	78db      	ldrb	r3, [r3, #3]
 8004758:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004760:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004766:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	22ca      	movs	r2, #202	; 0xca
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2253      	movs	r2, #83	; 0x53
 8004780:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004782:	2513      	movs	r5, #19
 8004784:	197c      	adds	r4, r7, r5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	0018      	movs	r0, r3
 800478a:	f000 f8a5 	bl	80048d8 <RTC_EnterInitMode>
 800478e:	0003      	movs	r3, r0
 8004790:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004792:	0028      	movs	r0, r5
 8004794:	183b      	adds	r3, r7, r0
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10c      	bne.n	80047b6 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4910      	ldr	r1, [pc, #64]	; (80047e4 <HAL_RTC_SetDate+0x11c>)
 80047a4:	400a      	ands	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047a8:	183c      	adds	r4, r7, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 f8d6 	bl	800495e <RTC_ExitInitMode>
 80047b2:	0003      	movs	r3, r0
 80047b4:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80047b6:	2313      	movs	r3, #19
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	22ff      	movs	r2, #255	; 0xff
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]

  return status;
 80047d4:	2313      	movs	r3, #19
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	781b      	ldrb	r3, [r3, #0]
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b006      	add	sp, #24
 80047e0:	bdb0      	pop	{r4, r5, r7, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	00ffff3f 	.word	0x00ffff3f

080047e8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4a21      	ldr	r2, [pc, #132]	; (8004884 <HAL_RTC_GetDate+0x9c>)
 8004800:	4013      	ands	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	0a1b      	lsrs	r3, r3, #8
 8004812:	b2db      	uxtb	r3, r3
 8004814:	221f      	movs	r2, #31
 8004816:	4013      	ands	r3, r2
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	223f      	movs	r2, #63	; 0x3f
 8004824:	4013      	ands	r3, r2
 8004826:	b2da      	uxtb	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	0b5b      	lsrs	r3, r3, #13
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2207      	movs	r2, #7
 8004834:	4013      	ands	r3, r2
 8004836:	b2da      	uxtb	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11a      	bne.n	8004878 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	78db      	ldrb	r3, [r3, #3]
 8004846:	0018      	movs	r0, r3
 8004848:	f000 f8d3 	bl	80049f2 <RTC_Bcd2ToByte>
 800484c:	0003      	movs	r3, r0
 800484e:	001a      	movs	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f8ca 	bl	80049f2 <RTC_Bcd2ToByte>
 800485e:	0003      	movs	r3, r0
 8004860:	001a      	movs	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	789b      	ldrb	r3, [r3, #2]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f8c1 	bl	80049f2 <RTC_Bcd2ToByte>
 8004870:	0003      	movs	r3, r0
 8004872:	001a      	movs	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b006      	add	sp, #24
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	00ffff3f 	.word	0x00ffff3f

08004888 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <HAL_RTC_WaitForSynchro+0x4c>)
 800489a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800489c:	f7fd fa6e 	bl	8001d7c <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048a4:	e00a      	b.n	80048bc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048a6:	f7fd fa69 	bl	8001d7c <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	23fa      	movs	r3, #250	; 0xfa
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d901      	bls.n	80048bc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	4013      	ands	r3, r2
 80048c6:	d0ee      	beq.n	80048a6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	0018      	movs	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b004      	add	sp, #16
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	00017959 	.word	0x00017959

080048d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048e4:	230f      	movs	r3, #15
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	4013      	ands	r3, r2
 80048f6:	d12b      	bne.n	8004950 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2180      	movs	r1, #128	; 0x80
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004908:	f7fd fa38 	bl	8001d7c <HAL_GetTick>
 800490c:	0003      	movs	r3, r0
 800490e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004910:	e013      	b.n	800493a <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004912:	f7fd fa33 	bl	8001d7c <HAL_GetTick>
 8004916:	0002      	movs	r2, r0
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	200f      	movs	r0, #15
 800491e:	183b      	adds	r3, r7, r0
 8004920:	1839      	adds	r1, r7, r0
 8004922:	7809      	ldrb	r1, [r1, #0]
 8004924:	7019      	strb	r1, [r3, #0]
 8004926:	23fa      	movs	r3, #250	; 0xfa
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	429a      	cmp	r2, r3
 800492c:	d905      	bls.n	800493a <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2204      	movs	r2, #4
 8004932:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004934:	183b      	adds	r3, r7, r0
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2240      	movs	r2, #64	; 0x40
 8004942:	4013      	ands	r3, r2
 8004944:	d104      	bne.n	8004950 <RTC_EnterInitMode+0x78>
 8004946:	230f      	movs	r3, #15
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d1e0      	bne.n	8004912 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004950:	230f      	movs	r3, #15
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	781b      	ldrb	r3, [r3, #0]
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b004      	add	sp, #16
 800495c:	bd80      	pop	{r7, pc}

0800495e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800495e:	b590      	push	{r4, r7, lr}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004966:	240f      	movs	r4, #15
 8004968:	193b      	adds	r3, r7, r4
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	438a      	bics	r2, r1
 800497c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2220      	movs	r2, #32
 8004986:	4013      	ands	r3, r2
 8004988:	d10b      	bne.n	80049a2 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0018      	movs	r0, r3
 800498e:	f7ff ff7b 	bl	8004888 <HAL_RTC_WaitForSynchro>
 8004992:	1e03      	subs	r3, r0, #0
 8004994:	d005      	beq.n	80049a2 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2204      	movs	r2, #4
 800499a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800499c:	193b      	adds	r3, r7, r4
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80049a2:	230f      	movs	r3, #15
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	781b      	ldrb	r3, [r3, #0]
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b005      	add	sp, #20
 80049ae:	bd90      	pop	{r4, r7, pc}

080049b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	0002      	movs	r2, r0
 80049b8:	1dfb      	adds	r3, r7, #7
 80049ba:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80049c0:	e007      	b.n	80049d2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3301      	adds	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80049c8:	1dfb      	adds	r3, r7, #7
 80049ca:	1dfa      	adds	r2, r7, #7
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	3a0a      	subs	r2, #10
 80049d0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80049d2:	1dfb      	adds	r3, r7, #7
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	d8f3      	bhi.n	80049c2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	b2db      	uxtb	r3, r3
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b004      	add	sp, #16
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	0002      	movs	r2, r0
 80049fa:	1dfb      	adds	r3, r7, #7
 80049fc:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004a02:	1dfb      	adds	r3, r7, #7
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	0013      	movs	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	189b      	adds	r3, r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	1dfb      	adds	r3, r7, #7
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	210f      	movs	r1, #15
 8004a20:	400b      	ands	r3, r1
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	18d3      	adds	r3, r2, r3
 8004a26:	b2db      	uxtb	r3, r3
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e042      	b.n	8004ac8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	223d      	movs	r2, #61	; 0x3d
 8004a46:	5c9b      	ldrb	r3, [r3, r2]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d107      	bne.n	8004a5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	223c      	movs	r2, #60	; 0x3c
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fc ffcd 	bl	80019f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	223d      	movs	r2, #61	; 0x3d
 8004a62:	2102      	movs	r1, #2
 8004a64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	0019      	movs	r1, r3
 8004a70:	0010      	movs	r0, r2
 8004a72:	f000 fa37 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2246      	movs	r2, #70	; 0x46
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	223e      	movs	r2, #62	; 0x3e
 8004a82:	2101      	movs	r1, #1
 8004a84:	5499      	strb	r1, [r3, r2]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	223f      	movs	r2, #63	; 0x3f
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	5499      	strb	r1, [r3, r2]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2240      	movs	r2, #64	; 0x40
 8004a92:	2101      	movs	r1, #1
 8004a94:	5499      	strb	r1, [r3, r2]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2241      	movs	r2, #65	; 0x41
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2242      	movs	r2, #66	; 0x42
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2243      	movs	r2, #67	; 0x43
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2244      	movs	r2, #68	; 0x44
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	5499      	strb	r1, [r3, r2]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2245      	movs	r2, #69	; 0x45
 8004aba:	2101      	movs	r1, #1
 8004abc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	223d      	movs	r2, #61	; 0x3d
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d124      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2202      	movs	r2, #2
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d11d      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2203      	movs	r2, #3
 8004afa:	4252      	negs	r2, r2
 8004afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 f9ce 	bl	8004eb4 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e007      	b.n	8004b2a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 f9c1 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f9cd 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2204      	movs	r2, #4
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d125      	bne.n	8004b8a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2204      	movs	r2, #4
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d11e      	bne.n	8004b8a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2205      	movs	r2, #5
 8004b52:	4252      	negs	r2, r2
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	23c0      	movs	r3, #192	; 0xc0
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4013      	ands	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 f9a1 	bl	8004eb4 <HAL_TIM_IC_CaptureCallback>
 8004b72:	e007      	b.n	8004b84 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 f994 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 f9a0 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2208      	movs	r2, #8
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d124      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d11d      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2209      	movs	r2, #9
 8004bac:	4252      	negs	r2, r2
 8004bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 f975 	bl	8004eb4 <HAL_TIM_IC_CaptureCallback>
 8004bca:	e007      	b.n	8004bdc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f000 f968 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f974 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2210      	movs	r2, #16
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d125      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d11e      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2211      	movs	r2, #17
 8004c04:	4252      	negs	r2, r2
 8004c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	23c0      	movs	r3, #192	; 0xc0
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 f948 	bl	8004eb4 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e007      	b.n	8004c36 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f93b 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f000 f947 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2201      	movs	r2, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10f      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d108      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	4252      	negs	r2, r2
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fc fd35 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b80      	cmp	r3, #128	; 0x80
 8004c76:	d10f      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	2280      	movs	r2, #128	; 0x80
 8004c80:	4013      	ands	r3, r2
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d108      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2281      	movs	r2, #129	; 0x81
 8004c8c:	4252      	negs	r2, r2
 8004c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 faa6 	bl	80051e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d10f      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d108      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2241      	movs	r2, #65	; 0x41
 8004cba:	4252      	negs	r2, r2
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f000 f907 	bl	8004ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d10f      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d108      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2221      	movs	r2, #33	; 0x21
 8004ce8:	4252      	negs	r2, r2
 8004cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 fa70 	bl	80051d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b002      	add	sp, #8
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	230f      	movs	r3, #15
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	223c      	movs	r2, #60	; 0x3c
 8004d12:	5c9b      	ldrb	r3, [r3, r2]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x20>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0bc      	b.n	8004e96 <HAL_TIM_ConfigClockSource+0x19a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	223c      	movs	r2, #60	; 0x3c
 8004d20:	2101      	movs	r1, #1
 8004d22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	223d      	movs	r2, #61	; 0x3d
 8004d28:	2102      	movs	r1, #2
 8004d2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2277      	movs	r2, #119	; 0x77
 8004d38:	4393      	bics	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4a58      	ldr	r2, [pc, #352]	; (8004ea0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	0192      	lsls	r2, r2, #6
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d040      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0xde>
 8004d58:	2280      	movs	r2, #128	; 0x80
 8004d5a:	0192      	lsls	r2, r2, #6
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d900      	bls.n	8004d62 <HAL_TIM_ConfigClockSource+0x66>
 8004d60:	e088      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
 8004d62:	2280      	movs	r2, #128	; 0x80
 8004d64:	0152      	lsls	r2, r2, #5
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d100      	bne.n	8004d6c <HAL_TIM_ConfigClockSource+0x70>
 8004d6a:	e088      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x182>
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	0152      	lsls	r2, r2, #5
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d900      	bls.n	8004d76 <HAL_TIM_ConfigClockSource+0x7a>
 8004d74:	e07e      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
 8004d76:	2b70      	cmp	r3, #112	; 0x70
 8004d78:	d018      	beq.n	8004dac <HAL_TIM_ConfigClockSource+0xb0>
 8004d7a:	d900      	bls.n	8004d7e <HAL_TIM_ConfigClockSource+0x82>
 8004d7c:	e07a      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
 8004d7e:	2b60      	cmp	r3, #96	; 0x60
 8004d80:	d04f      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x126>
 8004d82:	d900      	bls.n	8004d86 <HAL_TIM_ConfigClockSource+0x8a>
 8004d84:	e076      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
 8004d86:	2b50      	cmp	r3, #80	; 0x50
 8004d88:	d03b      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x106>
 8004d8a:	d900      	bls.n	8004d8e <HAL_TIM_ConfigClockSource+0x92>
 8004d8c:	e072      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d057      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x146>
 8004d92:	d900      	bls.n	8004d96 <HAL_TIM_ConfigClockSource+0x9a>
 8004d94:	e06e      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	d063      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x166>
 8004d9a:	d86b      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d060      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x166>
 8004da0:	d868      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d05d      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x166>
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d05b      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x166>
 8004daa:	e063      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	6899      	ldr	r1, [r3, #8]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f000 f98c 	bl	80050d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2277      	movs	r2, #119	; 0x77
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
      break;
 8004dd8:	e052      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6899      	ldr	r1, [r3, #8]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f000 f975 	bl	80050d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	01c9      	lsls	r1, r1, #7
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
      break;
 8004e00:	e03e      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	001a      	movs	r2, r3
 8004e10:	f000 f8e8 	bl	8004fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2150      	movs	r1, #80	; 0x50
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 f942 	bl	80050a4 <TIM_ITRx_SetConfig>
      break;
 8004e20:	e02e      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	001a      	movs	r2, r3
 8004e30:	f000 f906 	bl	8005040 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2160      	movs	r1, #96	; 0x60
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 f932 	bl	80050a4 <TIM_ITRx_SetConfig>
      break;
 8004e40:	e01e      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	001a      	movs	r2, r3
 8004e50:	f000 f8c8 	bl	8004fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f000 f922 	bl	80050a4 <TIM_ITRx_SetConfig>
      break;
 8004e60:	e00e      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	0010      	movs	r0, r2
 8004e6e:	f000 f919 	bl	80050a4 <TIM_ITRx_SetConfig>
      break;
 8004e72:	e005      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e74:	230f      	movs	r3, #15
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
      break;
 8004e7c:	e000      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e7e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	223d      	movs	r2, #61	; 0x3d
 8004e84:	2101      	movs	r1, #1
 8004e86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	223c      	movs	r2, #60	; 0x3c
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	5499      	strb	r1, [r3, r2]

  return status;
 8004e90:	230f      	movs	r3, #15
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	781b      	ldrb	r3, [r3, #0]
}
 8004e96:	0018      	movs	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b004      	add	sp, #16
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	ffff00ff 	.word	0xffff00ff

08004ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b002      	add	sp, #8
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a34      	ldr	r2, [pc, #208]	; (8004fc8 <TIM_Base_SetConfig+0xe4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d008      	beq.n	8004f0e <TIM_Base_SetConfig+0x2a>
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	05db      	lsls	r3, r3, #23
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d003      	beq.n	8004f0e <TIM_Base_SetConfig+0x2a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <TIM_Base_SetConfig+0xe8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d108      	bne.n	8004f20 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2270      	movs	r2, #112	; 0x70
 8004f12:	4393      	bics	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <TIM_Base_SetConfig+0xe4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <TIM_Base_SetConfig+0x76>
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	2380      	movs	r3, #128	; 0x80
 8004f2c:	05db      	lsls	r3, r3, #23
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d013      	beq.n	8004f5a <TIM_Base_SetConfig+0x76>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a25      	ldr	r2, [pc, #148]	; (8004fcc <TIM_Base_SetConfig+0xe8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <TIM_Base_SetConfig+0x76>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a24      	ldr	r2, [pc, #144]	; (8004fd0 <TIM_Base_SetConfig+0xec>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <TIM_Base_SetConfig+0x76>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a23      	ldr	r2, [pc, #140]	; (8004fd4 <TIM_Base_SetConfig+0xf0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_Base_SetConfig+0x76>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <TIM_Base_SetConfig+0xf4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_Base_SetConfig+0x76>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a21      	ldr	r2, [pc, #132]	; (8004fdc <TIM_Base_SetConfig+0xf8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d108      	bne.n	8004f6c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <TIM_Base_SetConfig+0xfc>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	4393      	bics	r3, r2
 8004f72:	001a      	movs	r2, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a0c      	ldr	r2, [pc, #48]	; (8004fc8 <TIM_Base_SetConfig+0xe4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xce>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <TIM_Base_SetConfig+0xf0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_Base_SetConfig+0xce>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <TIM_Base_SetConfig+0xf4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_Base_SetConfig+0xce>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <TIM_Base_SetConfig+0xf8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d103      	bne.n	8004fba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	615a      	str	r2, [r3, #20]
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b004      	add	sp, #16
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40002000 	.word	0x40002000
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800
 8004fe0:	fffffcff 	.word	0xfffffcff

08004fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	001a      	movs	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	22f0      	movs	r2, #240	; 0xf0
 800500e:	4393      	bics	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	220a      	movs	r2, #10
 8005020:	4393      	bics	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	46c0      	nop			; (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	b006      	add	sp, #24
 800503e:	bd80      	pop	{r7, pc}

08005040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	2210      	movs	r2, #16
 8005052:	4393      	bics	r3, r2
 8005054:	001a      	movs	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	4a0d      	ldr	r2, [pc, #52]	; (80050a0 <TIM_TI2_ConfigInputStage+0x60>)
 800506a:	4013      	ands	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	031b      	lsls	r3, r3, #12
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	22a0      	movs	r2, #160	; 0xa0
 800507c:	4393      	bics	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	46bd      	mov	sp, r7
 800509a:	b006      	add	sp, #24
 800509c:	bd80      	pop	{r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	ffff0fff 	.word	0xffff0fff

080050a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2270      	movs	r2, #112	; 0x70
 80050b8:	4393      	bics	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	2207      	movs	r2, #7
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	609a      	str	r2, [r3, #8]
}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b004      	add	sp, #16
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <TIM_ETR_SetConfig+0x3c>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	46bd      	mov	sp, r7
 8005110:	b006      	add	sp, #24
 8005112:	bd80      	pop	{r7, pc}
 8005114:	ffff00ff 	.word	0xffff00ff

08005118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	223c      	movs	r2, #60	; 0x3c
 8005126:	5c9b      	ldrb	r3, [r3, r2]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e047      	b.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	223c      	movs	r2, #60	; 0x3c
 8005134:	2101      	movs	r1, #1
 8005136:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	223d      	movs	r2, #61	; 0x3d
 800513c:	2102      	movs	r1, #2
 800513e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2270      	movs	r2, #112	; 0x70
 8005154:	4393      	bics	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a16      	ldr	r2, [pc, #88]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00f      	beq.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	05db      	lsls	r3, r3, #23
 800517c:	429a      	cmp	r2, r3
 800517e:	d009      	beq.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10c      	bne.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2280      	movs	r2, #128	; 0x80
 8005198:	4393      	bics	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	223d      	movs	r2, #61	; 0x3d
 80051b2:	2101      	movs	r1, #1
 80051b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	223c      	movs	r2, #60	; 0x3c
 80051ba:	2100      	movs	r1, #0
 80051bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b004      	add	sp, #16
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40014000 	.word	0x40014000

080051d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b002      	add	sp, #8
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ec:	46c0      	nop			; (mov r8, r8)
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b002      	add	sp, #8
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e044      	b.n	8005290 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d107      	bne.n	800521e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2278      	movs	r2, #120	; 0x78
 8005212:	2100      	movs	r1, #0
 8005214:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	0018      	movs	r0, r3
 800521a:	f7fc fc11 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2224      	movs	r2, #36	; 0x24
 8005222:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2101      	movs	r1, #1
 8005230:	438a      	bics	r2, r1
 8005232:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0018      	movs	r0, r3
 8005238:	f000 f830 	bl	800529c <UART_SetConfig>
 800523c:	0003      	movs	r3, r0
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e024      	b.n	8005290 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0018      	movs	r0, r3
 8005252:	f000 f963 	bl	800551c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	490d      	ldr	r1, [pc, #52]	; (8005298 <HAL_UART_Init+0xa4>)
 8005262:	400a      	ands	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	212a      	movs	r1, #42	; 0x2a
 8005272:	438a      	bics	r2, r1
 8005274:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2101      	movs	r1, #1
 8005282:	430a      	orrs	r2, r1
 8005284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	0018      	movs	r0, r3
 800528a:	f000 f9fb 	bl	8005684 <UART_CheckIdleState>
 800528e:	0003      	movs	r3, r0
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b002      	add	sp, #8
 8005296:	bd80      	pop	{r7, pc}
 8005298:	ffffb7ff 	.word	0xffffb7ff

0800529c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a4:	231e      	movs	r3, #30
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a8d      	ldr	r2, [pc, #564]	; (8005500 <UART_SetConfig+0x264>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	0019      	movs	r1, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a88      	ldr	r2, [pc, #544]	; (8005504 <UART_SetConfig+0x268>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	0019      	movs	r1, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4a7f      	ldr	r2, [pc, #508]	; (8005508 <UART_SetConfig+0x26c>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	430a      	orrs	r2, r1
 8005316:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a7b      	ldr	r2, [pc, #492]	; (800550c <UART_SetConfig+0x270>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d127      	bne.n	8005372 <UART_SetConfig+0xd6>
 8005322:	4b7b      	ldr	r3, [pc, #492]	; (8005510 <UART_SetConfig+0x274>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	2203      	movs	r2, #3
 8005328:	4013      	ands	r3, r2
 800532a:	2b03      	cmp	r3, #3
 800532c:	d00d      	beq.n	800534a <UART_SetConfig+0xae>
 800532e:	d81b      	bhi.n	8005368 <UART_SetConfig+0xcc>
 8005330:	2b02      	cmp	r3, #2
 8005332:	d014      	beq.n	800535e <UART_SetConfig+0xc2>
 8005334:	d818      	bhi.n	8005368 <UART_SetConfig+0xcc>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <UART_SetConfig+0xa4>
 800533a:	2b01      	cmp	r3, #1
 800533c:	d00a      	beq.n	8005354 <UART_SetConfig+0xb8>
 800533e:	e013      	b.n	8005368 <UART_SetConfig+0xcc>
 8005340:	231f      	movs	r3, #31
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e021      	b.n	800538e <UART_SetConfig+0xf2>
 800534a:	231f      	movs	r3, #31
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2202      	movs	r2, #2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e01c      	b.n	800538e <UART_SetConfig+0xf2>
 8005354:	231f      	movs	r3, #31
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2204      	movs	r2, #4
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	e017      	b.n	800538e <UART_SetConfig+0xf2>
 800535e:	231f      	movs	r3, #31
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	2208      	movs	r2, #8
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e012      	b.n	800538e <UART_SetConfig+0xf2>
 8005368:	231f      	movs	r3, #31
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	2210      	movs	r2, #16
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e00d      	b.n	800538e <UART_SetConfig+0xf2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a67      	ldr	r2, [pc, #412]	; (8005514 <UART_SetConfig+0x278>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d104      	bne.n	8005386 <UART_SetConfig+0xea>
 800537c:	231f      	movs	r3, #31
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e003      	b.n	800538e <UART_SetConfig+0xf2>
 8005386:	231f      	movs	r3, #31
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	2210      	movs	r2, #16
 800538c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	2380      	movs	r3, #128	; 0x80
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	429a      	cmp	r2, r3
 8005398:	d15c      	bne.n	8005454 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800539a:	231f      	movs	r3, #31
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d015      	beq.n	80053d0 <UART_SetConfig+0x134>
 80053a4:	dc18      	bgt.n	80053d8 <UART_SetConfig+0x13c>
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d00d      	beq.n	80053c6 <UART_SetConfig+0x12a>
 80053aa:	dc15      	bgt.n	80053d8 <UART_SetConfig+0x13c>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <UART_SetConfig+0x11a>
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d005      	beq.n	80053c0 <UART_SetConfig+0x124>
 80053b4:	e010      	b.n	80053d8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b6:	f7fe fef7 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 80053ba:	0003      	movs	r3, r0
 80053bc:	61bb      	str	r3, [r7, #24]
        break;
 80053be:	e012      	b.n	80053e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b55      	ldr	r3, [pc, #340]	; (8005518 <UART_SetConfig+0x27c>)
 80053c2:	61bb      	str	r3, [r7, #24]
        break;
 80053c4:	e00f      	b.n	80053e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fe fe8f 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80053ca:	0003      	movs	r3, r0
 80053cc:	61bb      	str	r3, [r7, #24]
        break;
 80053ce:	e00a      	b.n	80053e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	61bb      	str	r3, [r7, #24]
        break;
 80053d6:	e006      	b.n	80053e6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053dc:	231e      	movs	r3, #30
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
        break;
 80053e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d100      	bne.n	80053ee <UART_SetConfig+0x152>
 80053ec:	e07a      	b.n	80054e4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	005a      	lsls	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	18d2      	adds	r2, r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	0019      	movs	r1, r3
 8005400:	0010      	movs	r0, r2
 8005402:	f7fa fe93 	bl	800012c <__udivsi3>
 8005406:	0003      	movs	r3, r0
 8005408:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b0f      	cmp	r3, #15
 800540e:	d91c      	bls.n	800544a <UART_SetConfig+0x1ae>
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	025b      	lsls	r3, r3, #9
 8005416:	429a      	cmp	r2, r3
 8005418:	d217      	bcs.n	800544a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	b29a      	uxth	r2, r3
 800541e:	200e      	movs	r0, #14
 8005420:	183b      	adds	r3, r7, r0
 8005422:	210f      	movs	r1, #15
 8005424:	438a      	bics	r2, r1
 8005426:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	b29b      	uxth	r3, r3
 800542e:	2207      	movs	r2, #7
 8005430:	4013      	ands	r3, r2
 8005432:	b299      	uxth	r1, r3
 8005434:	183b      	adds	r3, r7, r0
 8005436:	183a      	adds	r2, r7, r0
 8005438:	8812      	ldrh	r2, [r2, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	183a      	adds	r2, r7, r0
 8005444:	8812      	ldrh	r2, [r2, #0]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	e04c      	b.n	80054e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800544a:	231e      	movs	r3, #30
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e047      	b.n	80054e4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005454:	231f      	movs	r3, #31
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d015      	beq.n	800548a <UART_SetConfig+0x1ee>
 800545e:	dc18      	bgt.n	8005492 <UART_SetConfig+0x1f6>
 8005460:	2b04      	cmp	r3, #4
 8005462:	d00d      	beq.n	8005480 <UART_SetConfig+0x1e4>
 8005464:	dc15      	bgt.n	8005492 <UART_SetConfig+0x1f6>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <UART_SetConfig+0x1d4>
 800546a:	2b02      	cmp	r3, #2
 800546c:	d005      	beq.n	800547a <UART_SetConfig+0x1de>
 800546e:	e010      	b.n	8005492 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005470:	f7fe fe9a 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 8005474:	0003      	movs	r3, r0
 8005476:	61bb      	str	r3, [r7, #24]
        break;
 8005478:	e012      	b.n	80054a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800547a:	4b27      	ldr	r3, [pc, #156]	; (8005518 <UART_SetConfig+0x27c>)
 800547c:	61bb      	str	r3, [r7, #24]
        break;
 800547e:	e00f      	b.n	80054a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005480:	f7fe fe32 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 8005484:	0003      	movs	r3, r0
 8005486:	61bb      	str	r3, [r7, #24]
        break;
 8005488:	e00a      	b.n	80054a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	61bb      	str	r3, [r7, #24]
        break;
 8005490:	e006      	b.n	80054a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005496:	231e      	movs	r3, #30
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
        break;
 800549e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01e      	beq.n	80054e4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	085a      	lsrs	r2, r3, #1
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	18d2      	adds	r2, r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	0019      	movs	r1, r3
 80054b6:	0010      	movs	r0, r2
 80054b8:	f7fa fe38 	bl	800012c <__udivsi3>
 80054bc:	0003      	movs	r3, r0
 80054be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	d90a      	bls.n	80054dc <UART_SetConfig+0x240>
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	025b      	lsls	r3, r3, #9
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d205      	bcs.n	80054dc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	e003      	b.n	80054e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80054dc:	231e      	movs	r3, #30
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80054f0:	231e      	movs	r3, #30
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	781b      	ldrb	r3, [r3, #0]
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b008      	add	sp, #32
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	ffff69f3 	.word	0xffff69f3
 8005504:	ffffcfff 	.word	0xffffcfff
 8005508:	fffff4ff 	.word	0xfffff4ff
 800550c:	40013800 	.word	0x40013800
 8005510:	40021000 	.word	0x40021000
 8005514:	40004400 	.word	0x40004400
 8005518:	007a1200 	.word	0x007a1200

0800551c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2201      	movs	r2, #1
 800552a:	4013      	ands	r3, r2
 800552c:	d00b      	beq.n	8005546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a4a      	ldr	r2, [pc, #296]	; (8005660 <UART_AdvFeatureConfig+0x144>)
 8005536:	4013      	ands	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	2202      	movs	r2, #2
 800554c:	4013      	ands	r3, r2
 800554e:	d00b      	beq.n	8005568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4a43      	ldr	r2, [pc, #268]	; (8005664 <UART_AdvFeatureConfig+0x148>)
 8005558:	4013      	ands	r3, r2
 800555a:	0019      	movs	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2204      	movs	r2, #4
 800556e:	4013      	ands	r3, r2
 8005570:	d00b      	beq.n	800558a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4a3b      	ldr	r2, [pc, #236]	; (8005668 <UART_AdvFeatureConfig+0x14c>)
 800557a:	4013      	ands	r3, r2
 800557c:	0019      	movs	r1, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2208      	movs	r2, #8
 8005590:	4013      	ands	r3, r2
 8005592:	d00b      	beq.n	80055ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4a34      	ldr	r2, [pc, #208]	; (800566c <UART_AdvFeatureConfig+0x150>)
 800559c:	4013      	ands	r3, r2
 800559e:	0019      	movs	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2210      	movs	r2, #16
 80055b2:	4013      	ands	r3, r2
 80055b4:	d00b      	beq.n	80055ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a2c      	ldr	r2, [pc, #176]	; (8005670 <UART_AdvFeatureConfig+0x154>)
 80055be:	4013      	ands	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2220      	movs	r2, #32
 80055d4:	4013      	ands	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	4a25      	ldr	r2, [pc, #148]	; (8005674 <UART_AdvFeatureConfig+0x158>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	0019      	movs	r1, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2240      	movs	r2, #64	; 0x40
 80055f6:	4013      	ands	r3, r2
 80055f8:	d01d      	beq.n	8005636 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <UART_AdvFeatureConfig+0x15c>)
 8005602:	4013      	ands	r3, r2
 8005604:	0019      	movs	r1, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	035b      	lsls	r3, r3, #13
 800561a:	429a      	cmp	r2, r3
 800561c:	d10b      	bne.n	8005636 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4a15      	ldr	r2, [pc, #84]	; (800567c <UART_AdvFeatureConfig+0x160>)
 8005626:	4013      	ands	r3, r2
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2280      	movs	r2, #128	; 0x80
 800563c:	4013      	ands	r3, r2
 800563e:	d00b      	beq.n	8005658 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <UART_AdvFeatureConfig+0x164>)
 8005648:	4013      	ands	r3, r2
 800564a:	0019      	movs	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b002      	add	sp, #8
 800565e:	bd80      	pop	{r7, pc}
 8005660:	fffdffff 	.word	0xfffdffff
 8005664:	fffeffff 	.word	0xfffeffff
 8005668:	fffbffff 	.word	0xfffbffff
 800566c:	ffff7fff 	.word	0xffff7fff
 8005670:	ffffefff 	.word	0xffffefff
 8005674:	ffffdfff 	.word	0xffffdfff
 8005678:	ffefffff 	.word	0xffefffff
 800567c:	ff9fffff 	.word	0xff9fffff
 8005680:	fff7ffff 	.word	0xfff7ffff

08005684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b092      	sub	sp, #72	; 0x48
 8005688:	af02      	add	r7, sp, #8
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2284      	movs	r2, #132	; 0x84
 8005690:	2100      	movs	r1, #0
 8005692:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005694:	f7fc fb72 	bl	8001d7c <HAL_GetTick>
 8005698:	0003      	movs	r3, r0
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2208      	movs	r2, #8
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d12c      	bne.n	8005704 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	0391      	lsls	r1, r2, #14
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	4a46      	ldr	r2, [pc, #280]	; (80057cc <UART_CheckIdleState+0x148>)
 80056b4:	9200      	str	r2, [sp, #0]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f000 f88c 	bl	80057d4 <UART_WaitOnFlagUntilTimeout>
 80056bc:	1e03      	subs	r3, r0, #0
 80056be:	d021      	beq.n	8005704 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c0:	f3ef 8310 	mrs	r3, PRIMASK
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ca:	2301      	movs	r3, #1
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	f383 8810 	msr	PRIMASK, r3
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	438a      	bics	r2, r1
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	f383 8810 	msr	PRIMASK, r3
}
 80056f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2278      	movs	r2, #120	; 0x78
 80056fc:	2100      	movs	r1, #0
 80056fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e05f      	b.n	80057c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2204      	movs	r2, #4
 800570c:	4013      	ands	r3, r2
 800570e:	2b04      	cmp	r3, #4
 8005710:	d146      	bne.n	80057a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	03d1      	lsls	r1, r2, #15
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4a2c      	ldr	r2, [pc, #176]	; (80057cc <UART_CheckIdleState+0x148>)
 800571c:	9200      	str	r2, [sp, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	f000 f858 	bl	80057d4 <UART_WaitOnFlagUntilTimeout>
 8005724:	1e03      	subs	r3, r0, #0
 8005726:	d03b      	beq.n	80057a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005728:	f3ef 8310 	mrs	r3, PRIMASK
 800572c:	60fb      	str	r3, [r7, #12]
  return(result);
 800572e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
 8005732:	2301      	movs	r3, #1
 8005734:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f383 8810 	msr	PRIMASK, r3
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4921      	ldr	r1, [pc, #132]	; (80057d0 <UART_CheckIdleState+0x14c>)
 800574a:	400a      	ands	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f383 8810 	msr	PRIMASK, r3
}
 8005758:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575a:	f3ef 8310 	mrs	r3, PRIMASK
 800575e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005760:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005762:	633b      	str	r3, [r7, #48]	; 0x30
 8005764:	2301      	movs	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f383 8810 	msr	PRIMASK, r3
}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2101      	movs	r1, #1
 800577c:	438a      	bics	r2, r1
 800577e:	609a      	str	r2, [r3, #8]
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f383 8810 	msr	PRIMASK, r3
}
 800578a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	2120      	movs	r1, #32
 8005792:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2278      	movs	r2, #120	; 0x78
 8005798:	2100      	movs	r1, #0
 800579a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e011      	b.n	80057c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	2120      	movs	r1, #32
 80057ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2278      	movs	r2, #120	; 0x78
 80057be:	2100      	movs	r1, #0
 80057c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	0018      	movs	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b010      	add	sp, #64	; 0x40
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	01ffffff 	.word	0x01ffffff
 80057d0:	fffffedf 	.word	0xfffffedf

080057d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	1dfb      	adds	r3, r7, #7
 80057e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e4:	e04b      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	3301      	adds	r3, #1
 80057ea:	d048      	beq.n	800587e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fc fac6 	bl	8001d7c <HAL_GetTick>
 80057f0:	0002      	movs	r2, r0
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <UART_WaitOnFlagUntilTimeout+0x2e>
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e04b      	b.n	800589e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2204      	movs	r2, #4
 800580e:	4013      	ands	r3, r2
 8005810:	d035      	beq.n	800587e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	2208      	movs	r2, #8
 800581a:	4013      	ands	r3, r2
 800581c:	2b08      	cmp	r3, #8
 800581e:	d111      	bne.n	8005844 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2208      	movs	r2, #8
 8005826:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	0018      	movs	r0, r3
 800582c:	f000 f83c 	bl	80058a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2284      	movs	r2, #132	; 0x84
 8005834:	2108      	movs	r1, #8
 8005836:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2278      	movs	r2, #120	; 0x78
 800583c:	2100      	movs	r1, #0
 800583e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e02c      	b.n	800589e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69da      	ldr	r2, [r3, #28]
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	401a      	ands	r2, r3
 8005850:	2380      	movs	r3, #128	; 0x80
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	429a      	cmp	r2, r3
 8005856:	d112      	bne.n	800587e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2280      	movs	r2, #128	; 0x80
 800585e:	0112      	lsls	r2, r2, #4
 8005860:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	0018      	movs	r0, r3
 8005866:	f000 f81f 	bl	80058a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2284      	movs	r2, #132	; 0x84
 800586e:	2120      	movs	r1, #32
 8005870:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2278      	movs	r2, #120	; 0x78
 8005876:	2100      	movs	r1, #0
 8005878:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e00f      	b.n	800589e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	425a      	negs	r2, r3
 800588e:	4153      	adcs	r3, r2
 8005890:	b2db      	uxtb	r3, r3
 8005892:	001a      	movs	r2, r3
 8005894:	1dfb      	adds	r3, r7, #7
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d0a4      	beq.n	80057e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b004      	add	sp, #16
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08e      	sub	sp, #56	; 0x38
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b0:	f3ef 8310 	mrs	r3, PRIMASK
 80058b4:	617b      	str	r3, [r7, #20]
  return(result);
 80058b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ba:	2301      	movs	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f383 8810 	msr	PRIMASK, r3
}
 80058c4:	46c0      	nop			; (mov r8, r8)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4926      	ldr	r1, [pc, #152]	; (800596c <UART_EndRxTransfer+0xc4>)
 80058d2:	400a      	ands	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f383 8810 	msr	PRIMASK, r3
}
 80058e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e2:	f3ef 8310 	mrs	r3, PRIMASK
 80058e6:	623b      	str	r3, [r7, #32]
  return(result);
 80058e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	633b      	str	r3, [r7, #48]	; 0x30
 80058ec:	2301      	movs	r3, #1
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	f383 8810 	msr	PRIMASK, r3
}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2101      	movs	r1, #1
 8005904:	438a      	bics	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	f383 8810 	msr	PRIMASK, r3
}
 8005912:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005918:	2b01      	cmp	r3, #1
 800591a:	d118      	bne.n	800594e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591c:	f3ef 8310 	mrs	r3, PRIMASK
 8005920:	60bb      	str	r3, [r7, #8]
  return(result);
 8005922:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005926:	2301      	movs	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f383 8810 	msr	PRIMASK, r3
}
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2110      	movs	r1, #16
 800593e:	438a      	bics	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f383 8810 	msr	PRIMASK, r3
}
 800594c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2280      	movs	r2, #128	; 0x80
 8005952:	2120      	movs	r1, #32
 8005954:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b00e      	add	sp, #56	; 0x38
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	fffffedf 	.word	0xfffffedf

08005970 <__errno>:
 8005970:	4b01      	ldr	r3, [pc, #4]	; (8005978 <__errno+0x8>)
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	4770      	bx	lr
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	20000014 	.word	0x20000014

0800597c <__libc_init_array>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	2600      	movs	r6, #0
 8005980:	4d0c      	ldr	r5, [pc, #48]	; (80059b4 <__libc_init_array+0x38>)
 8005982:	4c0d      	ldr	r4, [pc, #52]	; (80059b8 <__libc_init_array+0x3c>)
 8005984:	1b64      	subs	r4, r4, r5
 8005986:	10a4      	asrs	r4, r4, #2
 8005988:	42a6      	cmp	r6, r4
 800598a:	d109      	bne.n	80059a0 <__libc_init_array+0x24>
 800598c:	2600      	movs	r6, #0
 800598e:	f000 fc8b 	bl	80062a8 <_init>
 8005992:	4d0a      	ldr	r5, [pc, #40]	; (80059bc <__libc_init_array+0x40>)
 8005994:	4c0a      	ldr	r4, [pc, #40]	; (80059c0 <__libc_init_array+0x44>)
 8005996:	1b64      	subs	r4, r4, r5
 8005998:	10a4      	asrs	r4, r4, #2
 800599a:	42a6      	cmp	r6, r4
 800599c:	d105      	bne.n	80059aa <__libc_init_array+0x2e>
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	00b3      	lsls	r3, r6, #2
 80059a2:	58eb      	ldr	r3, [r5, r3]
 80059a4:	4798      	blx	r3
 80059a6:	3601      	adds	r6, #1
 80059a8:	e7ee      	b.n	8005988 <__libc_init_array+0xc>
 80059aa:	00b3      	lsls	r3, r6, #2
 80059ac:	58eb      	ldr	r3, [r5, r3]
 80059ae:	4798      	blx	r3
 80059b0:	3601      	adds	r6, #1
 80059b2:	e7f2      	b.n	800599a <__libc_init_array+0x1e>
 80059b4:	080063b0 	.word	0x080063b0
 80059b8:	080063b0 	.word	0x080063b0
 80059bc:	080063b0 	.word	0x080063b0
 80059c0:	080063b4 	.word	0x080063b4

080059c4 <memset>:
 80059c4:	0003      	movs	r3, r0
 80059c6:	1882      	adds	r2, r0, r2
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d100      	bne.n	80059ce <memset+0xa>
 80059cc:	4770      	bx	lr
 80059ce:	7019      	strb	r1, [r3, #0]
 80059d0:	3301      	adds	r3, #1
 80059d2:	e7f9      	b.n	80059c8 <memset+0x4>

080059d4 <siprintf>:
 80059d4:	b40e      	push	{r1, r2, r3}
 80059d6:	b500      	push	{lr}
 80059d8:	490b      	ldr	r1, [pc, #44]	; (8005a08 <siprintf+0x34>)
 80059da:	b09c      	sub	sp, #112	; 0x70
 80059dc:	ab1d      	add	r3, sp, #116	; 0x74
 80059de:	9002      	str	r0, [sp, #8]
 80059e0:	9006      	str	r0, [sp, #24]
 80059e2:	9107      	str	r1, [sp, #28]
 80059e4:	9104      	str	r1, [sp, #16]
 80059e6:	4809      	ldr	r0, [pc, #36]	; (8005a0c <siprintf+0x38>)
 80059e8:	4909      	ldr	r1, [pc, #36]	; (8005a10 <siprintf+0x3c>)
 80059ea:	cb04      	ldmia	r3!, {r2}
 80059ec:	9105      	str	r1, [sp, #20]
 80059ee:	6800      	ldr	r0, [r0, #0]
 80059f0:	a902      	add	r1, sp, #8
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	f000 f870 	bl	8005ad8 <_svfiprintf_r>
 80059f8:	2300      	movs	r3, #0
 80059fa:	9a02      	ldr	r2, [sp, #8]
 80059fc:	7013      	strb	r3, [r2, #0]
 80059fe:	b01c      	add	sp, #112	; 0x70
 8005a00:	bc08      	pop	{r3}
 8005a02:	b003      	add	sp, #12
 8005a04:	4718      	bx	r3
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	7fffffff 	.word	0x7fffffff
 8005a0c:	20000014 	.word	0x20000014
 8005a10:	ffff0208 	.word	0xffff0208

08005a14 <__ssputs_r>:
 8005a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a16:	688e      	ldr	r6, [r1, #8]
 8005a18:	b085      	sub	sp, #20
 8005a1a:	0007      	movs	r7, r0
 8005a1c:	000c      	movs	r4, r1
 8005a1e:	9203      	str	r2, [sp, #12]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	429e      	cmp	r6, r3
 8005a24:	d83c      	bhi.n	8005aa0 <__ssputs_r+0x8c>
 8005a26:	2390      	movs	r3, #144	; 0x90
 8005a28:	898a      	ldrh	r2, [r1, #12]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	421a      	tst	r2, r3
 8005a2e:	d034      	beq.n	8005a9a <__ssputs_r+0x86>
 8005a30:	6909      	ldr	r1, [r1, #16]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	6960      	ldr	r0, [r4, #20]
 8005a36:	1a5b      	subs	r3, r3, r1
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	4343      	muls	r3, r0
 8005a3e:	0fdd      	lsrs	r5, r3, #31
 8005a40:	18ed      	adds	r5, r5, r3
 8005a42:	9b01      	ldr	r3, [sp, #4]
 8005a44:	9802      	ldr	r0, [sp, #8]
 8005a46:	3301      	adds	r3, #1
 8005a48:	181b      	adds	r3, r3, r0
 8005a4a:	106d      	asrs	r5, r5, #1
 8005a4c:	42ab      	cmp	r3, r5
 8005a4e:	d900      	bls.n	8005a52 <__ssputs_r+0x3e>
 8005a50:	001d      	movs	r5, r3
 8005a52:	0553      	lsls	r3, r2, #21
 8005a54:	d532      	bpl.n	8005abc <__ssputs_r+0xa8>
 8005a56:	0029      	movs	r1, r5
 8005a58:	0038      	movs	r0, r7
 8005a5a:	f000 fb53 	bl	8006104 <_malloc_r>
 8005a5e:	1e06      	subs	r6, r0, #0
 8005a60:	d109      	bne.n	8005a76 <__ssputs_r+0x62>
 8005a62:	230c      	movs	r3, #12
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	2340      	movs	r3, #64	; 0x40
 8005a68:	2001      	movs	r0, #1
 8005a6a:	89a2      	ldrh	r2, [r4, #12]
 8005a6c:	4240      	negs	r0, r0
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	b005      	add	sp, #20
 8005a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a76:	9a02      	ldr	r2, [sp, #8]
 8005a78:	6921      	ldr	r1, [r4, #16]
 8005a7a:	f000 faba 	bl	8005ff2 <memcpy>
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <__ssputs_r+0xc0>)
 8005a82:	401a      	ands	r2, r3
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	4313      	orrs	r3, r2
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	9b02      	ldr	r3, [sp, #8]
 8005a8c:	6126      	str	r6, [r4, #16]
 8005a8e:	18f6      	adds	r6, r6, r3
 8005a90:	6026      	str	r6, [r4, #0]
 8005a92:	6165      	str	r5, [r4, #20]
 8005a94:	9e01      	ldr	r6, [sp, #4]
 8005a96:	1aed      	subs	r5, r5, r3
 8005a98:	60a5      	str	r5, [r4, #8]
 8005a9a:	9b01      	ldr	r3, [sp, #4]
 8005a9c:	429e      	cmp	r6, r3
 8005a9e:	d900      	bls.n	8005aa2 <__ssputs_r+0x8e>
 8005aa0:	9e01      	ldr	r6, [sp, #4]
 8005aa2:	0032      	movs	r2, r6
 8005aa4:	9903      	ldr	r1, [sp, #12]
 8005aa6:	6820      	ldr	r0, [r4, #0]
 8005aa8:	f000 faac 	bl	8006004 <memmove>
 8005aac:	68a3      	ldr	r3, [r4, #8]
 8005aae:	2000      	movs	r0, #0
 8005ab0:	1b9b      	subs	r3, r3, r6
 8005ab2:	60a3      	str	r3, [r4, #8]
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	199e      	adds	r6, r3, r6
 8005ab8:	6026      	str	r6, [r4, #0]
 8005aba:	e7da      	b.n	8005a72 <__ssputs_r+0x5e>
 8005abc:	002a      	movs	r2, r5
 8005abe:	0038      	movs	r0, r7
 8005ac0:	f000 fb96 	bl	80061f0 <_realloc_r>
 8005ac4:	1e06      	subs	r6, r0, #0
 8005ac6:	d1e0      	bne.n	8005a8a <__ssputs_r+0x76>
 8005ac8:	0038      	movs	r0, r7
 8005aca:	6921      	ldr	r1, [r4, #16]
 8005acc:	f000 faae 	bl	800602c <_free_r>
 8005ad0:	e7c7      	b.n	8005a62 <__ssputs_r+0x4e>
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	fffffb7f 	.word	0xfffffb7f

08005ad8 <_svfiprintf_r>:
 8005ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ada:	b0a1      	sub	sp, #132	; 0x84
 8005adc:	9003      	str	r0, [sp, #12]
 8005ade:	001d      	movs	r5, r3
 8005ae0:	898b      	ldrh	r3, [r1, #12]
 8005ae2:	000f      	movs	r7, r1
 8005ae4:	0016      	movs	r6, r2
 8005ae6:	061b      	lsls	r3, r3, #24
 8005ae8:	d511      	bpl.n	8005b0e <_svfiprintf_r+0x36>
 8005aea:	690b      	ldr	r3, [r1, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10e      	bne.n	8005b0e <_svfiprintf_r+0x36>
 8005af0:	2140      	movs	r1, #64	; 0x40
 8005af2:	f000 fb07 	bl	8006104 <_malloc_r>
 8005af6:	6038      	str	r0, [r7, #0]
 8005af8:	6138      	str	r0, [r7, #16]
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d105      	bne.n	8005b0a <_svfiprintf_r+0x32>
 8005afe:	230c      	movs	r3, #12
 8005b00:	9a03      	ldr	r2, [sp, #12]
 8005b02:	3801      	subs	r0, #1
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	b021      	add	sp, #132	; 0x84
 8005b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b0a:	2340      	movs	r3, #64	; 0x40
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	ac08      	add	r4, sp, #32
 8005b12:	6163      	str	r3, [r4, #20]
 8005b14:	3320      	adds	r3, #32
 8005b16:	7663      	strb	r3, [r4, #25]
 8005b18:	3310      	adds	r3, #16
 8005b1a:	76a3      	strb	r3, [r4, #26]
 8005b1c:	9507      	str	r5, [sp, #28]
 8005b1e:	0035      	movs	r5, r6
 8005b20:	782b      	ldrb	r3, [r5, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <_svfiprintf_r+0x52>
 8005b26:	2b25      	cmp	r3, #37	; 0x25
 8005b28:	d147      	bne.n	8005bba <_svfiprintf_r+0xe2>
 8005b2a:	1bab      	subs	r3, r5, r6
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	42b5      	cmp	r5, r6
 8005b30:	d00c      	beq.n	8005b4c <_svfiprintf_r+0x74>
 8005b32:	0032      	movs	r2, r6
 8005b34:	0039      	movs	r1, r7
 8005b36:	9803      	ldr	r0, [sp, #12]
 8005b38:	f7ff ff6c 	bl	8005a14 <__ssputs_r>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d100      	bne.n	8005b42 <_svfiprintf_r+0x6a>
 8005b40:	e0ae      	b.n	8005ca0 <_svfiprintf_r+0x1c8>
 8005b42:	6962      	ldr	r2, [r4, #20]
 8005b44:	9b05      	ldr	r3, [sp, #20]
 8005b46:	4694      	mov	ip, r2
 8005b48:	4463      	add	r3, ip
 8005b4a:	6163      	str	r3, [r4, #20]
 8005b4c:	782b      	ldrb	r3, [r5, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d100      	bne.n	8005b54 <_svfiprintf_r+0x7c>
 8005b52:	e0a5      	b.n	8005ca0 <_svfiprintf_r+0x1c8>
 8005b54:	2201      	movs	r2, #1
 8005b56:	2300      	movs	r3, #0
 8005b58:	4252      	negs	r2, r2
 8005b5a:	6062      	str	r2, [r4, #4]
 8005b5c:	a904      	add	r1, sp, #16
 8005b5e:	3254      	adds	r2, #84	; 0x54
 8005b60:	1852      	adds	r2, r2, r1
 8005b62:	1c6e      	adds	r6, r5, #1
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	60e3      	str	r3, [r4, #12]
 8005b68:	60a3      	str	r3, [r4, #8]
 8005b6a:	7013      	strb	r3, [r2, #0]
 8005b6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b6e:	2205      	movs	r2, #5
 8005b70:	7831      	ldrb	r1, [r6, #0]
 8005b72:	4854      	ldr	r0, [pc, #336]	; (8005cc4 <_svfiprintf_r+0x1ec>)
 8005b74:	f000 fa32 	bl	8005fdc <memchr>
 8005b78:	1c75      	adds	r5, r6, #1
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d11f      	bne.n	8005bbe <_svfiprintf_r+0xe6>
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	06d3      	lsls	r3, r2, #27
 8005b82:	d504      	bpl.n	8005b8e <_svfiprintf_r+0xb6>
 8005b84:	2353      	movs	r3, #83	; 0x53
 8005b86:	a904      	add	r1, sp, #16
 8005b88:	185b      	adds	r3, r3, r1
 8005b8a:	2120      	movs	r1, #32
 8005b8c:	7019      	strb	r1, [r3, #0]
 8005b8e:	0713      	lsls	r3, r2, #28
 8005b90:	d504      	bpl.n	8005b9c <_svfiprintf_r+0xc4>
 8005b92:	2353      	movs	r3, #83	; 0x53
 8005b94:	a904      	add	r1, sp, #16
 8005b96:	185b      	adds	r3, r3, r1
 8005b98:	212b      	movs	r1, #43	; 0x2b
 8005b9a:	7019      	strb	r1, [r3, #0]
 8005b9c:	7833      	ldrb	r3, [r6, #0]
 8005b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005ba0:	d016      	beq.n	8005bd0 <_svfiprintf_r+0xf8>
 8005ba2:	0035      	movs	r5, r6
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	200a      	movs	r0, #10
 8005ba8:	68e3      	ldr	r3, [r4, #12]
 8005baa:	782a      	ldrb	r2, [r5, #0]
 8005bac:	1c6e      	adds	r6, r5, #1
 8005bae:	3a30      	subs	r2, #48	; 0x30
 8005bb0:	2a09      	cmp	r2, #9
 8005bb2:	d94e      	bls.n	8005c52 <_svfiprintf_r+0x17a>
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d111      	bne.n	8005bdc <_svfiprintf_r+0x104>
 8005bb8:	e017      	b.n	8005bea <_svfiprintf_r+0x112>
 8005bba:	3501      	adds	r5, #1
 8005bbc:	e7b0      	b.n	8005b20 <_svfiprintf_r+0x48>
 8005bbe:	4b41      	ldr	r3, [pc, #260]	; (8005cc4 <_svfiprintf_r+0x1ec>)
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	1ac0      	subs	r0, r0, r3
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4083      	lsls	r3, r0
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	002e      	movs	r6, r5
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	e7ce      	b.n	8005b6e <_svfiprintf_r+0x96>
 8005bd0:	9b07      	ldr	r3, [sp, #28]
 8005bd2:	1d19      	adds	r1, r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	9107      	str	r1, [sp, #28]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	db01      	blt.n	8005be0 <_svfiprintf_r+0x108>
 8005bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bde:	e004      	b.n	8005bea <_svfiprintf_r+0x112>
 8005be0:	425b      	negs	r3, r3
 8005be2:	60e3      	str	r3, [r4, #12]
 8005be4:	2302      	movs	r3, #2
 8005be6:	4313      	orrs	r3, r2
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	782b      	ldrb	r3, [r5, #0]
 8005bec:	2b2e      	cmp	r3, #46	; 0x2e
 8005bee:	d10a      	bne.n	8005c06 <_svfiprintf_r+0x12e>
 8005bf0:	786b      	ldrb	r3, [r5, #1]
 8005bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf4:	d135      	bne.n	8005c62 <_svfiprintf_r+0x18a>
 8005bf6:	9b07      	ldr	r3, [sp, #28]
 8005bf8:	3502      	adds	r5, #2
 8005bfa:	1d1a      	adds	r2, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	9207      	str	r2, [sp, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db2b      	blt.n	8005c5c <_svfiprintf_r+0x184>
 8005c04:	9309      	str	r3, [sp, #36]	; 0x24
 8005c06:	4e30      	ldr	r6, [pc, #192]	; (8005cc8 <_svfiprintf_r+0x1f0>)
 8005c08:	2203      	movs	r2, #3
 8005c0a:	0030      	movs	r0, r6
 8005c0c:	7829      	ldrb	r1, [r5, #0]
 8005c0e:	f000 f9e5 	bl	8005fdc <memchr>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d006      	beq.n	8005c24 <_svfiprintf_r+0x14c>
 8005c16:	2340      	movs	r3, #64	; 0x40
 8005c18:	1b80      	subs	r0, r0, r6
 8005c1a:	4083      	lsls	r3, r0
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	3501      	adds	r5, #1
 8005c20:	4313      	orrs	r3, r2
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	7829      	ldrb	r1, [r5, #0]
 8005c26:	2206      	movs	r2, #6
 8005c28:	4828      	ldr	r0, [pc, #160]	; (8005ccc <_svfiprintf_r+0x1f4>)
 8005c2a:	1c6e      	adds	r6, r5, #1
 8005c2c:	7621      	strb	r1, [r4, #24]
 8005c2e:	f000 f9d5 	bl	8005fdc <memchr>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d03c      	beq.n	8005cb0 <_svfiprintf_r+0x1d8>
 8005c36:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <_svfiprintf_r+0x1f8>)
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d125      	bne.n	8005c88 <_svfiprintf_r+0x1b0>
 8005c3c:	2207      	movs	r2, #7
 8005c3e:	9b07      	ldr	r3, [sp, #28]
 8005c40:	3307      	adds	r3, #7
 8005c42:	4393      	bics	r3, r2
 8005c44:	3308      	adds	r3, #8
 8005c46:	9307      	str	r3, [sp, #28]
 8005c48:	6963      	ldr	r3, [r4, #20]
 8005c4a:	9a04      	ldr	r2, [sp, #16]
 8005c4c:	189b      	adds	r3, r3, r2
 8005c4e:	6163      	str	r3, [r4, #20]
 8005c50:	e765      	b.n	8005b1e <_svfiprintf_r+0x46>
 8005c52:	4343      	muls	r3, r0
 8005c54:	0035      	movs	r5, r6
 8005c56:	2101      	movs	r1, #1
 8005c58:	189b      	adds	r3, r3, r2
 8005c5a:	e7a6      	b.n	8005baa <_svfiprintf_r+0xd2>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	425b      	negs	r3, r3
 8005c60:	e7d0      	b.n	8005c04 <_svfiprintf_r+0x12c>
 8005c62:	2300      	movs	r3, #0
 8005c64:	200a      	movs	r0, #10
 8005c66:	001a      	movs	r2, r3
 8005c68:	3501      	adds	r5, #1
 8005c6a:	6063      	str	r3, [r4, #4]
 8005c6c:	7829      	ldrb	r1, [r5, #0]
 8005c6e:	1c6e      	adds	r6, r5, #1
 8005c70:	3930      	subs	r1, #48	; 0x30
 8005c72:	2909      	cmp	r1, #9
 8005c74:	d903      	bls.n	8005c7e <_svfiprintf_r+0x1a6>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0c5      	beq.n	8005c06 <_svfiprintf_r+0x12e>
 8005c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c7c:	e7c3      	b.n	8005c06 <_svfiprintf_r+0x12e>
 8005c7e:	4342      	muls	r2, r0
 8005c80:	0035      	movs	r5, r6
 8005c82:	2301      	movs	r3, #1
 8005c84:	1852      	adds	r2, r2, r1
 8005c86:	e7f1      	b.n	8005c6c <_svfiprintf_r+0x194>
 8005c88:	ab07      	add	r3, sp, #28
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	003a      	movs	r2, r7
 8005c8e:	0021      	movs	r1, r4
 8005c90:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <_svfiprintf_r+0x1fc>)
 8005c92:	9803      	ldr	r0, [sp, #12]
 8005c94:	e000      	b.n	8005c98 <_svfiprintf_r+0x1c0>
 8005c96:	bf00      	nop
 8005c98:	9004      	str	r0, [sp, #16]
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	d1d3      	bne.n	8005c48 <_svfiprintf_r+0x170>
 8005ca0:	89bb      	ldrh	r3, [r7, #12]
 8005ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ca4:	065b      	lsls	r3, r3, #25
 8005ca6:	d400      	bmi.n	8005caa <_svfiprintf_r+0x1d2>
 8005ca8:	e72d      	b.n	8005b06 <_svfiprintf_r+0x2e>
 8005caa:	2001      	movs	r0, #1
 8005cac:	4240      	negs	r0, r0
 8005cae:	e72a      	b.n	8005b06 <_svfiprintf_r+0x2e>
 8005cb0:	ab07      	add	r3, sp, #28
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	003a      	movs	r2, r7
 8005cb6:	0021      	movs	r1, r4
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <_svfiprintf_r+0x1fc>)
 8005cba:	9803      	ldr	r0, [sp, #12]
 8005cbc:	f000 f87c 	bl	8005db8 <_printf_i>
 8005cc0:	e7ea      	b.n	8005c98 <_svfiprintf_r+0x1c0>
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	0800637c 	.word	0x0800637c
 8005cc8:	08006382 	.word	0x08006382
 8005ccc:	08006386 	.word	0x08006386
 8005cd0:	00000000 	.word	0x00000000
 8005cd4:	08005a15 	.word	0x08005a15

08005cd8 <_printf_common>:
 8005cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cda:	0015      	movs	r5, r2
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	688a      	ldr	r2, [r1, #8]
 8005ce0:	690b      	ldr	r3, [r1, #16]
 8005ce2:	000c      	movs	r4, r1
 8005ce4:	9000      	str	r0, [sp, #0]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	da00      	bge.n	8005cec <_printf_common+0x14>
 8005cea:	0013      	movs	r3, r2
 8005cec:	0022      	movs	r2, r4
 8005cee:	602b      	str	r3, [r5, #0]
 8005cf0:	3243      	adds	r2, #67	; 0x43
 8005cf2:	7812      	ldrb	r2, [r2, #0]
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	d001      	beq.n	8005cfc <_printf_common+0x24>
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	069b      	lsls	r3, r3, #26
 8005d00:	d502      	bpl.n	8005d08 <_printf_common+0x30>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	3302      	adds	r3, #2
 8005d06:	602b      	str	r3, [r5, #0]
 8005d08:	6822      	ldr	r2, [r4, #0]
 8005d0a:	2306      	movs	r3, #6
 8005d0c:	0017      	movs	r7, r2
 8005d0e:	401f      	ands	r7, r3
 8005d10:	421a      	tst	r2, r3
 8005d12:	d027      	beq.n	8005d64 <_printf_common+0x8c>
 8005d14:	0023      	movs	r3, r4
 8005d16:	3343      	adds	r3, #67	; 0x43
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	1e5a      	subs	r2, r3, #1
 8005d1c:	4193      	sbcs	r3, r2
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	0692      	lsls	r2, r2, #26
 8005d22:	d430      	bmi.n	8005d86 <_printf_common+0xae>
 8005d24:	0022      	movs	r2, r4
 8005d26:	9901      	ldr	r1, [sp, #4]
 8005d28:	9800      	ldr	r0, [sp, #0]
 8005d2a:	9e08      	ldr	r6, [sp, #32]
 8005d2c:	3243      	adds	r2, #67	; 0x43
 8005d2e:	47b0      	blx	r6
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d025      	beq.n	8005d80 <_printf_common+0xa8>
 8005d34:	2306      	movs	r3, #6
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	682a      	ldr	r2, [r5, #0]
 8005d3a:	68e1      	ldr	r1, [r4, #12]
 8005d3c:	2500      	movs	r5, #0
 8005d3e:	4003      	ands	r3, r0
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d103      	bne.n	8005d4c <_printf_common+0x74>
 8005d44:	1a8d      	subs	r5, r1, r2
 8005d46:	43eb      	mvns	r3, r5
 8005d48:	17db      	asrs	r3, r3, #31
 8005d4a:	401d      	ands	r5, r3
 8005d4c:	68a3      	ldr	r3, [r4, #8]
 8005d4e:	6922      	ldr	r2, [r4, #16]
 8005d50:	4293      	cmp	r3, r2
 8005d52:	dd01      	ble.n	8005d58 <_printf_common+0x80>
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	18ed      	adds	r5, r5, r3
 8005d58:	2700      	movs	r7, #0
 8005d5a:	42bd      	cmp	r5, r7
 8005d5c:	d120      	bne.n	8005da0 <_printf_common+0xc8>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	e010      	b.n	8005d84 <_printf_common+0xac>
 8005d62:	3701      	adds	r7, #1
 8005d64:	68e3      	ldr	r3, [r4, #12]
 8005d66:	682a      	ldr	r2, [r5, #0]
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	42bb      	cmp	r3, r7
 8005d6c:	ddd2      	ble.n	8005d14 <_printf_common+0x3c>
 8005d6e:	0022      	movs	r2, r4
 8005d70:	2301      	movs	r3, #1
 8005d72:	9901      	ldr	r1, [sp, #4]
 8005d74:	9800      	ldr	r0, [sp, #0]
 8005d76:	9e08      	ldr	r6, [sp, #32]
 8005d78:	3219      	adds	r2, #25
 8005d7a:	47b0      	blx	r6
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d1f0      	bne.n	8005d62 <_printf_common+0x8a>
 8005d80:	2001      	movs	r0, #1
 8005d82:	4240      	negs	r0, r0
 8005d84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d86:	2030      	movs	r0, #48	; 0x30
 8005d88:	18e1      	adds	r1, r4, r3
 8005d8a:	3143      	adds	r1, #67	; 0x43
 8005d8c:	7008      	strb	r0, [r1, #0]
 8005d8e:	0021      	movs	r1, r4
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	3145      	adds	r1, #69	; 0x45
 8005d94:	7809      	ldrb	r1, [r1, #0]
 8005d96:	18a2      	adds	r2, r4, r2
 8005d98:	3243      	adds	r2, #67	; 0x43
 8005d9a:	3302      	adds	r3, #2
 8005d9c:	7011      	strb	r1, [r2, #0]
 8005d9e:	e7c1      	b.n	8005d24 <_printf_common+0x4c>
 8005da0:	0022      	movs	r2, r4
 8005da2:	2301      	movs	r3, #1
 8005da4:	9901      	ldr	r1, [sp, #4]
 8005da6:	9800      	ldr	r0, [sp, #0]
 8005da8:	9e08      	ldr	r6, [sp, #32]
 8005daa:	321a      	adds	r2, #26
 8005dac:	47b0      	blx	r6
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	d0e6      	beq.n	8005d80 <_printf_common+0xa8>
 8005db2:	3701      	adds	r7, #1
 8005db4:	e7d1      	b.n	8005d5a <_printf_common+0x82>
	...

08005db8 <_printf_i>:
 8005db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dba:	b08b      	sub	sp, #44	; 0x2c
 8005dbc:	9206      	str	r2, [sp, #24]
 8005dbe:	000a      	movs	r2, r1
 8005dc0:	3243      	adds	r2, #67	; 0x43
 8005dc2:	9307      	str	r3, [sp, #28]
 8005dc4:	9005      	str	r0, [sp, #20]
 8005dc6:	9204      	str	r2, [sp, #16]
 8005dc8:	7e0a      	ldrb	r2, [r1, #24]
 8005dca:	000c      	movs	r4, r1
 8005dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005dce:	2a78      	cmp	r2, #120	; 0x78
 8005dd0:	d807      	bhi.n	8005de2 <_printf_i+0x2a>
 8005dd2:	2a62      	cmp	r2, #98	; 0x62
 8005dd4:	d809      	bhi.n	8005dea <_printf_i+0x32>
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	d100      	bne.n	8005ddc <_printf_i+0x24>
 8005dda:	e0c1      	b.n	8005f60 <_printf_i+0x1a8>
 8005ddc:	2a58      	cmp	r2, #88	; 0x58
 8005dde:	d100      	bne.n	8005de2 <_printf_i+0x2a>
 8005de0:	e08c      	b.n	8005efc <_printf_i+0x144>
 8005de2:	0026      	movs	r6, r4
 8005de4:	3642      	adds	r6, #66	; 0x42
 8005de6:	7032      	strb	r2, [r6, #0]
 8005de8:	e022      	b.n	8005e30 <_printf_i+0x78>
 8005dea:	0010      	movs	r0, r2
 8005dec:	3863      	subs	r0, #99	; 0x63
 8005dee:	2815      	cmp	r0, #21
 8005df0:	d8f7      	bhi.n	8005de2 <_printf_i+0x2a>
 8005df2:	f7fa f991 	bl	8000118 <__gnu_thumb1_case_shi>
 8005df6:	0016      	.short	0x0016
 8005df8:	fff6001f 	.word	0xfff6001f
 8005dfc:	fff6fff6 	.word	0xfff6fff6
 8005e00:	001ffff6 	.word	0x001ffff6
 8005e04:	fff6fff6 	.word	0xfff6fff6
 8005e08:	fff6fff6 	.word	0xfff6fff6
 8005e0c:	003600a8 	.word	0x003600a8
 8005e10:	fff6009a 	.word	0xfff6009a
 8005e14:	00b9fff6 	.word	0x00b9fff6
 8005e18:	0036fff6 	.word	0x0036fff6
 8005e1c:	fff6fff6 	.word	0xfff6fff6
 8005e20:	009e      	.short	0x009e
 8005e22:	0026      	movs	r6, r4
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	3642      	adds	r6, #66	; 0x42
 8005e28:	1d11      	adds	r1, r2, #4
 8005e2a:	6019      	str	r1, [r3, #0]
 8005e2c:	6813      	ldr	r3, [r2, #0]
 8005e2e:	7033      	strb	r3, [r6, #0]
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0a7      	b.n	8005f84 <_printf_i+0x1cc>
 8005e34:	6808      	ldr	r0, [r1, #0]
 8005e36:	6819      	ldr	r1, [r3, #0]
 8005e38:	1d0a      	adds	r2, r1, #4
 8005e3a:	0605      	lsls	r5, r0, #24
 8005e3c:	d50b      	bpl.n	8005e56 <_printf_i+0x9e>
 8005e3e:	680d      	ldr	r5, [r1, #0]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	da03      	bge.n	8005e4e <_printf_i+0x96>
 8005e46:	232d      	movs	r3, #45	; 0x2d
 8005e48:	9a04      	ldr	r2, [sp, #16]
 8005e4a:	426d      	negs	r5, r5
 8005e4c:	7013      	strb	r3, [r2, #0]
 8005e4e:	4b61      	ldr	r3, [pc, #388]	; (8005fd4 <_printf_i+0x21c>)
 8005e50:	270a      	movs	r7, #10
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	e01b      	b.n	8005e8e <_printf_i+0xd6>
 8005e56:	680d      	ldr	r5, [r1, #0]
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	0641      	lsls	r1, r0, #25
 8005e5c:	d5f1      	bpl.n	8005e42 <_printf_i+0x8a>
 8005e5e:	b22d      	sxth	r5, r5
 8005e60:	e7ef      	b.n	8005e42 <_printf_i+0x8a>
 8005e62:	680d      	ldr	r5, [r1, #0]
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	1d08      	adds	r0, r1, #4
 8005e68:	6018      	str	r0, [r3, #0]
 8005e6a:	062e      	lsls	r6, r5, #24
 8005e6c:	d501      	bpl.n	8005e72 <_printf_i+0xba>
 8005e6e:	680d      	ldr	r5, [r1, #0]
 8005e70:	e003      	b.n	8005e7a <_printf_i+0xc2>
 8005e72:	066d      	lsls	r5, r5, #25
 8005e74:	d5fb      	bpl.n	8005e6e <_printf_i+0xb6>
 8005e76:	680d      	ldr	r5, [r1, #0]
 8005e78:	b2ad      	uxth	r5, r5
 8005e7a:	4b56      	ldr	r3, [pc, #344]	; (8005fd4 <_printf_i+0x21c>)
 8005e7c:	2708      	movs	r7, #8
 8005e7e:	9303      	str	r3, [sp, #12]
 8005e80:	2a6f      	cmp	r2, #111	; 0x6f
 8005e82:	d000      	beq.n	8005e86 <_printf_i+0xce>
 8005e84:	3702      	adds	r7, #2
 8005e86:	0023      	movs	r3, r4
 8005e88:	2200      	movs	r2, #0
 8005e8a:	3343      	adds	r3, #67	; 0x43
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	60a3      	str	r3, [r4, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	db03      	blt.n	8005e9e <_printf_i+0xe6>
 8005e96:	2204      	movs	r2, #4
 8005e98:	6821      	ldr	r1, [r4, #0]
 8005e9a:	4391      	bics	r1, r2
 8005e9c:	6021      	str	r1, [r4, #0]
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	d102      	bne.n	8005ea8 <_printf_i+0xf0>
 8005ea2:	9e04      	ldr	r6, [sp, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00c      	beq.n	8005ec2 <_printf_i+0x10a>
 8005ea8:	9e04      	ldr	r6, [sp, #16]
 8005eaa:	0028      	movs	r0, r5
 8005eac:	0039      	movs	r1, r7
 8005eae:	f7fa f9c3 	bl	8000238 <__aeabi_uidivmod>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	3e01      	subs	r6, #1
 8005eb6:	5c5b      	ldrb	r3, [r3, r1]
 8005eb8:	7033      	strb	r3, [r6, #0]
 8005eba:	002b      	movs	r3, r5
 8005ebc:	0005      	movs	r5, r0
 8005ebe:	429f      	cmp	r7, r3
 8005ec0:	d9f3      	bls.n	8005eaa <_printf_i+0xf2>
 8005ec2:	2f08      	cmp	r7, #8
 8005ec4:	d109      	bne.n	8005eda <_printf_i+0x122>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	07db      	lsls	r3, r3, #31
 8005eca:	d506      	bpl.n	8005eda <_printf_i+0x122>
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	6922      	ldr	r2, [r4, #16]
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	dc02      	bgt.n	8005eda <_printf_i+0x122>
 8005ed4:	2330      	movs	r3, #48	; 0x30
 8005ed6:	3e01      	subs	r6, #1
 8005ed8:	7033      	strb	r3, [r6, #0]
 8005eda:	9b04      	ldr	r3, [sp, #16]
 8005edc:	1b9b      	subs	r3, r3, r6
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	9b07      	ldr	r3, [sp, #28]
 8005ee2:	0021      	movs	r1, r4
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	9805      	ldr	r0, [sp, #20]
 8005ee8:	9b06      	ldr	r3, [sp, #24]
 8005eea:	aa09      	add	r2, sp, #36	; 0x24
 8005eec:	f7ff fef4 	bl	8005cd8 <_printf_common>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d14c      	bne.n	8005f8e <_printf_i+0x1d6>
 8005ef4:	2001      	movs	r0, #1
 8005ef6:	4240      	negs	r0, r0
 8005ef8:	b00b      	add	sp, #44	; 0x2c
 8005efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efc:	3145      	adds	r1, #69	; 0x45
 8005efe:	700a      	strb	r2, [r1, #0]
 8005f00:	4a34      	ldr	r2, [pc, #208]	; (8005fd4 <_printf_i+0x21c>)
 8005f02:	9203      	str	r2, [sp, #12]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	6821      	ldr	r1, [r4, #0]
 8005f08:	ca20      	ldmia	r2!, {r5}
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	0608      	lsls	r0, r1, #24
 8005f0e:	d516      	bpl.n	8005f3e <_printf_i+0x186>
 8005f10:	07cb      	lsls	r3, r1, #31
 8005f12:	d502      	bpl.n	8005f1a <_printf_i+0x162>
 8005f14:	2320      	movs	r3, #32
 8005f16:	4319      	orrs	r1, r3
 8005f18:	6021      	str	r1, [r4, #0]
 8005f1a:	2710      	movs	r7, #16
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	d1b2      	bne.n	8005e86 <_printf_i+0xce>
 8005f20:	2320      	movs	r3, #32
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	439a      	bics	r2, r3
 8005f26:	6022      	str	r2, [r4, #0]
 8005f28:	e7ad      	b.n	8005e86 <_printf_i+0xce>
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	6809      	ldr	r1, [r1, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	6022      	str	r2, [r4, #0]
 8005f32:	0022      	movs	r2, r4
 8005f34:	2178      	movs	r1, #120	; 0x78
 8005f36:	3245      	adds	r2, #69	; 0x45
 8005f38:	7011      	strb	r1, [r2, #0]
 8005f3a:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <_printf_i+0x220>)
 8005f3c:	e7e1      	b.n	8005f02 <_printf_i+0x14a>
 8005f3e:	0648      	lsls	r0, r1, #25
 8005f40:	d5e6      	bpl.n	8005f10 <_printf_i+0x158>
 8005f42:	b2ad      	uxth	r5, r5
 8005f44:	e7e4      	b.n	8005f10 <_printf_i+0x158>
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	680d      	ldr	r5, [r1, #0]
 8005f4a:	1d10      	adds	r0, r2, #4
 8005f4c:	6949      	ldr	r1, [r1, #20]
 8005f4e:	6018      	str	r0, [r3, #0]
 8005f50:	6813      	ldr	r3, [r2, #0]
 8005f52:	062e      	lsls	r6, r5, #24
 8005f54:	d501      	bpl.n	8005f5a <_printf_i+0x1a2>
 8005f56:	6019      	str	r1, [r3, #0]
 8005f58:	e002      	b.n	8005f60 <_printf_i+0x1a8>
 8005f5a:	066d      	lsls	r5, r5, #25
 8005f5c:	d5fb      	bpl.n	8005f56 <_printf_i+0x19e>
 8005f5e:	8019      	strh	r1, [r3, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	9e04      	ldr	r6, [sp, #16]
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	e7bb      	b.n	8005ee0 <_printf_i+0x128>
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	1d11      	adds	r1, r2, #4
 8005f6c:	6019      	str	r1, [r3, #0]
 8005f6e:	6816      	ldr	r6, [r2, #0]
 8005f70:	2100      	movs	r1, #0
 8005f72:	0030      	movs	r0, r6
 8005f74:	6862      	ldr	r2, [r4, #4]
 8005f76:	f000 f831 	bl	8005fdc <memchr>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d001      	beq.n	8005f82 <_printf_i+0x1ca>
 8005f7e:	1b80      	subs	r0, r0, r6
 8005f80:	6060      	str	r0, [r4, #4]
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	2300      	movs	r3, #0
 8005f88:	9a04      	ldr	r2, [sp, #16]
 8005f8a:	7013      	strb	r3, [r2, #0]
 8005f8c:	e7a8      	b.n	8005ee0 <_printf_i+0x128>
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	0032      	movs	r2, r6
 8005f92:	9906      	ldr	r1, [sp, #24]
 8005f94:	9805      	ldr	r0, [sp, #20]
 8005f96:	9d07      	ldr	r5, [sp, #28]
 8005f98:	47a8      	blx	r5
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	d0aa      	beq.n	8005ef4 <_printf_i+0x13c>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	079b      	lsls	r3, r3, #30
 8005fa2:	d415      	bmi.n	8005fd0 <_printf_i+0x218>
 8005fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa6:	68e0      	ldr	r0, [r4, #12]
 8005fa8:	4298      	cmp	r0, r3
 8005faa:	daa5      	bge.n	8005ef8 <_printf_i+0x140>
 8005fac:	0018      	movs	r0, r3
 8005fae:	e7a3      	b.n	8005ef8 <_printf_i+0x140>
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	9906      	ldr	r1, [sp, #24]
 8005fb6:	9805      	ldr	r0, [sp, #20]
 8005fb8:	9e07      	ldr	r6, [sp, #28]
 8005fba:	3219      	adds	r2, #25
 8005fbc:	47b0      	blx	r6
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d098      	beq.n	8005ef4 <_printf_i+0x13c>
 8005fc2:	3501      	adds	r5, #1
 8005fc4:	68e3      	ldr	r3, [r4, #12]
 8005fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	42ab      	cmp	r3, r5
 8005fcc:	dcf0      	bgt.n	8005fb0 <_printf_i+0x1f8>
 8005fce:	e7e9      	b.n	8005fa4 <_printf_i+0x1ec>
 8005fd0:	2500      	movs	r5, #0
 8005fd2:	e7f7      	b.n	8005fc4 <_printf_i+0x20c>
 8005fd4:	0800638d 	.word	0x0800638d
 8005fd8:	0800639e 	.word	0x0800639e

08005fdc <memchr>:
 8005fdc:	b2c9      	uxtb	r1, r1
 8005fde:	1882      	adds	r2, r0, r2
 8005fe0:	4290      	cmp	r0, r2
 8005fe2:	d101      	bne.n	8005fe8 <memchr+0xc>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	4770      	bx	lr
 8005fe8:	7803      	ldrb	r3, [r0, #0]
 8005fea:	428b      	cmp	r3, r1
 8005fec:	d0fb      	beq.n	8005fe6 <memchr+0xa>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	e7f6      	b.n	8005fe0 <memchr+0x4>

08005ff2 <memcpy>:
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d100      	bne.n	8005ffc <memcpy+0xa>
 8005ffa:	bd10      	pop	{r4, pc}
 8005ffc:	5ccc      	ldrb	r4, [r1, r3]
 8005ffe:	54c4      	strb	r4, [r0, r3]
 8006000:	3301      	adds	r3, #1
 8006002:	e7f8      	b.n	8005ff6 <memcpy+0x4>

08006004 <memmove>:
 8006004:	b510      	push	{r4, lr}
 8006006:	4288      	cmp	r0, r1
 8006008:	d902      	bls.n	8006010 <memmove+0xc>
 800600a:	188b      	adds	r3, r1, r2
 800600c:	4298      	cmp	r0, r3
 800600e:	d303      	bcc.n	8006018 <memmove+0x14>
 8006010:	2300      	movs	r3, #0
 8006012:	e007      	b.n	8006024 <memmove+0x20>
 8006014:	5c8b      	ldrb	r3, [r1, r2]
 8006016:	5483      	strb	r3, [r0, r2]
 8006018:	3a01      	subs	r2, #1
 800601a:	d2fb      	bcs.n	8006014 <memmove+0x10>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	5ccc      	ldrb	r4, [r1, r3]
 8006020:	54c4      	strb	r4, [r0, r3]
 8006022:	3301      	adds	r3, #1
 8006024:	429a      	cmp	r2, r3
 8006026:	d1fa      	bne.n	800601e <memmove+0x1a>
 8006028:	e7f8      	b.n	800601c <memmove+0x18>
	...

0800602c <_free_r>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	0005      	movs	r5, r0
 8006030:	2900      	cmp	r1, #0
 8006032:	d010      	beq.n	8006056 <_free_r+0x2a>
 8006034:	1f0c      	subs	r4, r1, #4
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	da00      	bge.n	800603e <_free_r+0x12>
 800603c:	18e4      	adds	r4, r4, r3
 800603e:	0028      	movs	r0, r5
 8006040:	f000 f918 	bl	8006274 <__malloc_lock>
 8006044:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <_free_r+0x90>)
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <_free_r+0x2c>
 800604c:	6063      	str	r3, [r4, #4]
 800604e:	6014      	str	r4, [r2, #0]
 8006050:	0028      	movs	r0, r5
 8006052:	f000 f917 	bl	8006284 <__malloc_unlock>
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	42a3      	cmp	r3, r4
 800605a:	d908      	bls.n	800606e <_free_r+0x42>
 800605c:	6821      	ldr	r1, [r4, #0]
 800605e:	1860      	adds	r0, r4, r1
 8006060:	4283      	cmp	r3, r0
 8006062:	d1f3      	bne.n	800604c <_free_r+0x20>
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	1841      	adds	r1, r0, r1
 800606a:	6021      	str	r1, [r4, #0]
 800606c:	e7ee      	b.n	800604c <_free_r+0x20>
 800606e:	001a      	movs	r2, r3
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <_free_r+0x4e>
 8006076:	42a3      	cmp	r3, r4
 8006078:	d9f9      	bls.n	800606e <_free_r+0x42>
 800607a:	6811      	ldr	r1, [r2, #0]
 800607c:	1850      	adds	r0, r2, r1
 800607e:	42a0      	cmp	r0, r4
 8006080:	d10b      	bne.n	800609a <_free_r+0x6e>
 8006082:	6820      	ldr	r0, [r4, #0]
 8006084:	1809      	adds	r1, r1, r0
 8006086:	1850      	adds	r0, r2, r1
 8006088:	6011      	str	r1, [r2, #0]
 800608a:	4283      	cmp	r3, r0
 800608c:	d1e0      	bne.n	8006050 <_free_r+0x24>
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	1841      	adds	r1, r0, r1
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	6053      	str	r3, [r2, #4]
 8006098:	e7da      	b.n	8006050 <_free_r+0x24>
 800609a:	42a0      	cmp	r0, r4
 800609c:	d902      	bls.n	80060a4 <_free_r+0x78>
 800609e:	230c      	movs	r3, #12
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	e7d5      	b.n	8006050 <_free_r+0x24>
 80060a4:	6821      	ldr	r1, [r4, #0]
 80060a6:	1860      	adds	r0, r4, r1
 80060a8:	4283      	cmp	r3, r0
 80060aa:	d103      	bne.n	80060b4 <_free_r+0x88>
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	1841      	adds	r1, r0, r1
 80060b2:	6021      	str	r1, [r4, #0]
 80060b4:	6063      	str	r3, [r4, #4]
 80060b6:	6054      	str	r4, [r2, #4]
 80060b8:	e7ca      	b.n	8006050 <_free_r+0x24>
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	2000026c 	.word	0x2000026c

080060c0 <sbrk_aligned>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4e0f      	ldr	r6, [pc, #60]	; (8006100 <sbrk_aligned+0x40>)
 80060c4:	000d      	movs	r5, r1
 80060c6:	6831      	ldr	r1, [r6, #0]
 80060c8:	0004      	movs	r4, r0
 80060ca:	2900      	cmp	r1, #0
 80060cc:	d102      	bne.n	80060d4 <sbrk_aligned+0x14>
 80060ce:	f000 f8bf 	bl	8006250 <_sbrk_r>
 80060d2:	6030      	str	r0, [r6, #0]
 80060d4:	0029      	movs	r1, r5
 80060d6:	0020      	movs	r0, r4
 80060d8:	f000 f8ba 	bl	8006250 <_sbrk_r>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d00a      	beq.n	80060f6 <sbrk_aligned+0x36>
 80060e0:	2303      	movs	r3, #3
 80060e2:	1cc5      	adds	r5, r0, #3
 80060e4:	439d      	bics	r5, r3
 80060e6:	42a8      	cmp	r0, r5
 80060e8:	d007      	beq.n	80060fa <sbrk_aligned+0x3a>
 80060ea:	1a29      	subs	r1, r5, r0
 80060ec:	0020      	movs	r0, r4
 80060ee:	f000 f8af 	bl	8006250 <_sbrk_r>
 80060f2:	1c43      	adds	r3, r0, #1
 80060f4:	d101      	bne.n	80060fa <sbrk_aligned+0x3a>
 80060f6:	2501      	movs	r5, #1
 80060f8:	426d      	negs	r5, r5
 80060fa:	0028      	movs	r0, r5
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	20000270 	.word	0x20000270

08006104 <_malloc_r>:
 8006104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006106:	2203      	movs	r2, #3
 8006108:	1ccb      	adds	r3, r1, #3
 800610a:	4393      	bics	r3, r2
 800610c:	3308      	adds	r3, #8
 800610e:	0006      	movs	r6, r0
 8006110:	001f      	movs	r7, r3
 8006112:	2b0c      	cmp	r3, #12
 8006114:	d232      	bcs.n	800617c <_malloc_r+0x78>
 8006116:	270c      	movs	r7, #12
 8006118:	42b9      	cmp	r1, r7
 800611a:	d831      	bhi.n	8006180 <_malloc_r+0x7c>
 800611c:	0030      	movs	r0, r6
 800611e:	f000 f8a9 	bl	8006274 <__malloc_lock>
 8006122:	4d32      	ldr	r5, [pc, #200]	; (80061ec <_malloc_r+0xe8>)
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	001c      	movs	r4, r3
 8006128:	2c00      	cmp	r4, #0
 800612a:	d12e      	bne.n	800618a <_malloc_r+0x86>
 800612c:	0039      	movs	r1, r7
 800612e:	0030      	movs	r0, r6
 8006130:	f7ff ffc6 	bl	80060c0 <sbrk_aligned>
 8006134:	0004      	movs	r4, r0
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	d11e      	bne.n	8006178 <_malloc_r+0x74>
 800613a:	682c      	ldr	r4, [r5, #0]
 800613c:	0025      	movs	r5, r4
 800613e:	2d00      	cmp	r5, #0
 8006140:	d14a      	bne.n	80061d8 <_malloc_r+0xd4>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	0029      	movs	r1, r5
 8006146:	18e3      	adds	r3, r4, r3
 8006148:	0030      	movs	r0, r6
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	f000 f880 	bl	8006250 <_sbrk_r>
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	4283      	cmp	r3, r0
 8006154:	d143      	bne.n	80061de <_malloc_r+0xda>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	3703      	adds	r7, #3
 800615a:	1aff      	subs	r7, r7, r3
 800615c:	2303      	movs	r3, #3
 800615e:	439f      	bics	r7, r3
 8006160:	3708      	adds	r7, #8
 8006162:	2f0c      	cmp	r7, #12
 8006164:	d200      	bcs.n	8006168 <_malloc_r+0x64>
 8006166:	270c      	movs	r7, #12
 8006168:	0039      	movs	r1, r7
 800616a:	0030      	movs	r0, r6
 800616c:	f7ff ffa8 	bl	80060c0 <sbrk_aligned>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d034      	beq.n	80061de <_malloc_r+0xda>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	19df      	adds	r7, r3, r7
 8006178:	6027      	str	r7, [r4, #0]
 800617a:	e013      	b.n	80061a4 <_malloc_r+0xa0>
 800617c:	2b00      	cmp	r3, #0
 800617e:	dacb      	bge.n	8006118 <_malloc_r+0x14>
 8006180:	230c      	movs	r3, #12
 8006182:	2500      	movs	r5, #0
 8006184:	6033      	str	r3, [r6, #0]
 8006186:	0028      	movs	r0, r5
 8006188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	1bd1      	subs	r1, r2, r7
 800618e:	d420      	bmi.n	80061d2 <_malloc_r+0xce>
 8006190:	290b      	cmp	r1, #11
 8006192:	d917      	bls.n	80061c4 <_malloc_r+0xc0>
 8006194:	19e2      	adds	r2, r4, r7
 8006196:	6027      	str	r7, [r4, #0]
 8006198:	42a3      	cmp	r3, r4
 800619a:	d111      	bne.n	80061c0 <_malloc_r+0xbc>
 800619c:	602a      	str	r2, [r5, #0]
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	6011      	str	r1, [r2, #0]
 80061a2:	6053      	str	r3, [r2, #4]
 80061a4:	0030      	movs	r0, r6
 80061a6:	0025      	movs	r5, r4
 80061a8:	f000 f86c 	bl	8006284 <__malloc_unlock>
 80061ac:	2207      	movs	r2, #7
 80061ae:	350b      	adds	r5, #11
 80061b0:	1d23      	adds	r3, r4, #4
 80061b2:	4395      	bics	r5, r2
 80061b4:	1aea      	subs	r2, r5, r3
 80061b6:	429d      	cmp	r5, r3
 80061b8:	d0e5      	beq.n	8006186 <_malloc_r+0x82>
 80061ba:	1b5b      	subs	r3, r3, r5
 80061bc:	50a3      	str	r3, [r4, r2]
 80061be:	e7e2      	b.n	8006186 <_malloc_r+0x82>
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	e7ec      	b.n	800619e <_malloc_r+0x9a>
 80061c4:	6862      	ldr	r2, [r4, #4]
 80061c6:	42a3      	cmp	r3, r4
 80061c8:	d101      	bne.n	80061ce <_malloc_r+0xca>
 80061ca:	602a      	str	r2, [r5, #0]
 80061cc:	e7ea      	b.n	80061a4 <_malloc_r+0xa0>
 80061ce:	605a      	str	r2, [r3, #4]
 80061d0:	e7e8      	b.n	80061a4 <_malloc_r+0xa0>
 80061d2:	0023      	movs	r3, r4
 80061d4:	6864      	ldr	r4, [r4, #4]
 80061d6:	e7a7      	b.n	8006128 <_malloc_r+0x24>
 80061d8:	002c      	movs	r4, r5
 80061da:	686d      	ldr	r5, [r5, #4]
 80061dc:	e7af      	b.n	800613e <_malloc_r+0x3a>
 80061de:	230c      	movs	r3, #12
 80061e0:	0030      	movs	r0, r6
 80061e2:	6033      	str	r3, [r6, #0]
 80061e4:	f000 f84e 	bl	8006284 <__malloc_unlock>
 80061e8:	e7cd      	b.n	8006186 <_malloc_r+0x82>
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	2000026c 	.word	0x2000026c

080061f0 <_realloc_r>:
 80061f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f2:	0007      	movs	r7, r0
 80061f4:	000e      	movs	r6, r1
 80061f6:	0014      	movs	r4, r2
 80061f8:	2900      	cmp	r1, #0
 80061fa:	d105      	bne.n	8006208 <_realloc_r+0x18>
 80061fc:	0011      	movs	r1, r2
 80061fe:	f7ff ff81 	bl	8006104 <_malloc_r>
 8006202:	0005      	movs	r5, r0
 8006204:	0028      	movs	r0, r5
 8006206:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006208:	2a00      	cmp	r2, #0
 800620a:	d103      	bne.n	8006214 <_realloc_r+0x24>
 800620c:	f7ff ff0e 	bl	800602c <_free_r>
 8006210:	0025      	movs	r5, r4
 8006212:	e7f7      	b.n	8006204 <_realloc_r+0x14>
 8006214:	f000 f83e 	bl	8006294 <_malloc_usable_size_r>
 8006218:	9001      	str	r0, [sp, #4]
 800621a:	4284      	cmp	r4, r0
 800621c:	d803      	bhi.n	8006226 <_realloc_r+0x36>
 800621e:	0035      	movs	r5, r6
 8006220:	0843      	lsrs	r3, r0, #1
 8006222:	42a3      	cmp	r3, r4
 8006224:	d3ee      	bcc.n	8006204 <_realloc_r+0x14>
 8006226:	0021      	movs	r1, r4
 8006228:	0038      	movs	r0, r7
 800622a:	f7ff ff6b 	bl	8006104 <_malloc_r>
 800622e:	1e05      	subs	r5, r0, #0
 8006230:	d0e8      	beq.n	8006204 <_realloc_r+0x14>
 8006232:	9b01      	ldr	r3, [sp, #4]
 8006234:	0022      	movs	r2, r4
 8006236:	429c      	cmp	r4, r3
 8006238:	d900      	bls.n	800623c <_realloc_r+0x4c>
 800623a:	001a      	movs	r2, r3
 800623c:	0031      	movs	r1, r6
 800623e:	0028      	movs	r0, r5
 8006240:	f7ff fed7 	bl	8005ff2 <memcpy>
 8006244:	0031      	movs	r1, r6
 8006246:	0038      	movs	r0, r7
 8006248:	f7ff fef0 	bl	800602c <_free_r>
 800624c:	e7da      	b.n	8006204 <_realloc_r+0x14>
	...

08006250 <_sbrk_r>:
 8006250:	2300      	movs	r3, #0
 8006252:	b570      	push	{r4, r5, r6, lr}
 8006254:	4d06      	ldr	r5, [pc, #24]	; (8006270 <_sbrk_r+0x20>)
 8006256:	0004      	movs	r4, r0
 8006258:	0008      	movs	r0, r1
 800625a:	602b      	str	r3, [r5, #0]
 800625c:	f7fb fc62 	bl	8001b24 <_sbrk>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d103      	bne.n	800626c <_sbrk_r+0x1c>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d000      	beq.n	800626c <_sbrk_r+0x1c>
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	20000274 	.word	0x20000274

08006274 <__malloc_lock>:
 8006274:	b510      	push	{r4, lr}
 8006276:	4802      	ldr	r0, [pc, #8]	; (8006280 <__malloc_lock+0xc>)
 8006278:	f000 f814 	bl	80062a4 <__retarget_lock_acquire_recursive>
 800627c:	bd10      	pop	{r4, pc}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	20000278 	.word	0x20000278

08006284 <__malloc_unlock>:
 8006284:	b510      	push	{r4, lr}
 8006286:	4802      	ldr	r0, [pc, #8]	; (8006290 <__malloc_unlock+0xc>)
 8006288:	f000 f80d 	bl	80062a6 <__retarget_lock_release_recursive>
 800628c:	bd10      	pop	{r4, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	20000278 	.word	0x20000278

08006294 <_malloc_usable_size_r>:
 8006294:	1f0b      	subs	r3, r1, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1f18      	subs	r0, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	da01      	bge.n	80062a2 <_malloc_usable_size_r+0xe>
 800629e:	580b      	ldr	r3, [r1, r0]
 80062a0:	18c0      	adds	r0, r0, r3
 80062a2:	4770      	bx	lr

080062a4 <__retarget_lock_acquire_recursive>:
 80062a4:	4770      	bx	lr

080062a6 <__retarget_lock_release_recursive>:
 80062a6:	4770      	bx	lr

080062a8 <_init>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr

080062b4 <_fini>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr
