
SENSEHAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000650c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d4  080066d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080066d4  080066d4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066d4  080066d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080066dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000078  08006754  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006754  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001439d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a6  00000000  00000000  0003443d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00036de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00037f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014448  00000000  00000000  00038f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016326  00000000  00000000  0004d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079e5c  00000000  00000000  000636ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd52a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  000dd57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065b4 	.word	0x080065b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080065b4 	.word	0x080065b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_fadd>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	46c6      	mov	lr, r8
 8000248:	0243      	lsls	r3, r0, #9
 800024a:	0a5b      	lsrs	r3, r3, #9
 800024c:	024e      	lsls	r6, r1, #9
 800024e:	0045      	lsls	r5, r0, #1
 8000250:	004f      	lsls	r7, r1, #1
 8000252:	00da      	lsls	r2, r3, #3
 8000254:	0fc4      	lsrs	r4, r0, #31
 8000256:	469c      	mov	ip, r3
 8000258:	0a70      	lsrs	r0, r6, #9
 800025a:	4690      	mov	r8, r2
 800025c:	b500      	push	{lr}
 800025e:	0e2d      	lsrs	r5, r5, #24
 8000260:	0e3f      	lsrs	r7, r7, #24
 8000262:	0fc9      	lsrs	r1, r1, #31
 8000264:	09b6      	lsrs	r6, r6, #6
 8000266:	428c      	cmp	r4, r1
 8000268:	d04b      	beq.n	8000302 <__aeabi_fadd+0xbe>
 800026a:	1bea      	subs	r2, r5, r7
 800026c:	2a00      	cmp	r2, #0
 800026e:	dd36      	ble.n	80002de <__aeabi_fadd+0x9a>
 8000270:	2f00      	cmp	r7, #0
 8000272:	d061      	beq.n	8000338 <__aeabi_fadd+0xf4>
 8000274:	2dff      	cmp	r5, #255	; 0xff
 8000276:	d100      	bne.n	800027a <__aeabi_fadd+0x36>
 8000278:	e0ad      	b.n	80003d6 <__aeabi_fadd+0x192>
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	04db      	lsls	r3, r3, #19
 800027e:	431e      	orrs	r6, r3
 8000280:	2a1b      	cmp	r2, #27
 8000282:	dc00      	bgt.n	8000286 <__aeabi_fadd+0x42>
 8000284:	e0d3      	b.n	800042e <__aeabi_fadd+0x1ea>
 8000286:	2001      	movs	r0, #1
 8000288:	4643      	mov	r3, r8
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	0143      	lsls	r3, r0, #5
 800028e:	d400      	bmi.n	8000292 <__aeabi_fadd+0x4e>
 8000290:	e08c      	b.n	80003ac <__aeabi_fadd+0x168>
 8000292:	0180      	lsls	r0, r0, #6
 8000294:	0987      	lsrs	r7, r0, #6
 8000296:	0038      	movs	r0, r7
 8000298:	f000 fcf6 	bl	8000c88 <__clzsi2>
 800029c:	3805      	subs	r0, #5
 800029e:	4087      	lsls	r7, r0
 80002a0:	4285      	cmp	r5, r0
 80002a2:	dc00      	bgt.n	80002a6 <__aeabi_fadd+0x62>
 80002a4:	e0b6      	b.n	8000414 <__aeabi_fadd+0x1d0>
 80002a6:	1a2d      	subs	r5, r5, r0
 80002a8:	48b3      	ldr	r0, [pc, #716]	; (8000578 <__aeabi_fadd+0x334>)
 80002aa:	4038      	ands	r0, r7
 80002ac:	0743      	lsls	r3, r0, #29
 80002ae:	d004      	beq.n	80002ba <__aeabi_fadd+0x76>
 80002b0:	230f      	movs	r3, #15
 80002b2:	4003      	ands	r3, r0
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d000      	beq.n	80002ba <__aeabi_fadd+0x76>
 80002b8:	3004      	adds	r0, #4
 80002ba:	0143      	lsls	r3, r0, #5
 80002bc:	d400      	bmi.n	80002c0 <__aeabi_fadd+0x7c>
 80002be:	e078      	b.n	80003b2 <__aeabi_fadd+0x16e>
 80002c0:	1c6a      	adds	r2, r5, #1
 80002c2:	2dfe      	cmp	r5, #254	; 0xfe
 80002c4:	d065      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80002c6:	0180      	lsls	r0, r0, #6
 80002c8:	0a43      	lsrs	r3, r0, #9
 80002ca:	469c      	mov	ip, r3
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	4663      	mov	r3, ip
 80002d0:	05d0      	lsls	r0, r2, #23
 80002d2:	4318      	orrs	r0, r3
 80002d4:	07e4      	lsls	r4, r4, #31
 80002d6:	4320      	orrs	r0, r4
 80002d8:	bc80      	pop	{r7}
 80002da:	46b8      	mov	r8, r7
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d035      	beq.n	800034e <__aeabi_fadd+0x10a>
 80002e2:	1b7a      	subs	r2, r7, r5
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d000      	beq.n	80002ea <__aeabi_fadd+0xa6>
 80002e8:	e0af      	b.n	800044a <__aeabi_fadd+0x206>
 80002ea:	4643      	mov	r3, r8
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fadd+0xae>
 80002f0:	e0a7      	b.n	8000442 <__aeabi_fadd+0x1fe>
 80002f2:	1e53      	subs	r3, r2, #1
 80002f4:	2a01      	cmp	r2, #1
 80002f6:	d100      	bne.n	80002fa <__aeabi_fadd+0xb6>
 80002f8:	e12f      	b.n	800055a <__aeabi_fadd+0x316>
 80002fa:	2aff      	cmp	r2, #255	; 0xff
 80002fc:	d069      	beq.n	80003d2 <__aeabi_fadd+0x18e>
 80002fe:	001a      	movs	r2, r3
 8000300:	e0aa      	b.n	8000458 <__aeabi_fadd+0x214>
 8000302:	1be9      	subs	r1, r5, r7
 8000304:	2900      	cmp	r1, #0
 8000306:	dd70      	ble.n	80003ea <__aeabi_fadd+0x1a6>
 8000308:	2f00      	cmp	r7, #0
 800030a:	d037      	beq.n	800037c <__aeabi_fadd+0x138>
 800030c:	2dff      	cmp	r5, #255	; 0xff
 800030e:	d062      	beq.n	80003d6 <__aeabi_fadd+0x192>
 8000310:	2380      	movs	r3, #128	; 0x80
 8000312:	04db      	lsls	r3, r3, #19
 8000314:	431e      	orrs	r6, r3
 8000316:	291b      	cmp	r1, #27
 8000318:	dc00      	bgt.n	800031c <__aeabi_fadd+0xd8>
 800031a:	e0b0      	b.n	800047e <__aeabi_fadd+0x23a>
 800031c:	2001      	movs	r0, #1
 800031e:	4440      	add	r0, r8
 8000320:	0143      	lsls	r3, r0, #5
 8000322:	d543      	bpl.n	80003ac <__aeabi_fadd+0x168>
 8000324:	3501      	adds	r5, #1
 8000326:	2dff      	cmp	r5, #255	; 0xff
 8000328:	d033      	beq.n	8000392 <__aeabi_fadd+0x14e>
 800032a:	2301      	movs	r3, #1
 800032c:	4a93      	ldr	r2, [pc, #588]	; (800057c <__aeabi_fadd+0x338>)
 800032e:	4003      	ands	r3, r0
 8000330:	0840      	lsrs	r0, r0, #1
 8000332:	4010      	ands	r0, r2
 8000334:	4318      	orrs	r0, r3
 8000336:	e7b9      	b.n	80002ac <__aeabi_fadd+0x68>
 8000338:	2e00      	cmp	r6, #0
 800033a:	d100      	bne.n	800033e <__aeabi_fadd+0xfa>
 800033c:	e083      	b.n	8000446 <__aeabi_fadd+0x202>
 800033e:	1e51      	subs	r1, r2, #1
 8000340:	2a01      	cmp	r2, #1
 8000342:	d100      	bne.n	8000346 <__aeabi_fadd+0x102>
 8000344:	e0d8      	b.n	80004f8 <__aeabi_fadd+0x2b4>
 8000346:	2aff      	cmp	r2, #255	; 0xff
 8000348:	d045      	beq.n	80003d6 <__aeabi_fadd+0x192>
 800034a:	000a      	movs	r2, r1
 800034c:	e798      	b.n	8000280 <__aeabi_fadd+0x3c>
 800034e:	27fe      	movs	r7, #254	; 0xfe
 8000350:	1c6a      	adds	r2, r5, #1
 8000352:	4217      	tst	r7, r2
 8000354:	d000      	beq.n	8000358 <__aeabi_fadd+0x114>
 8000356:	e086      	b.n	8000466 <__aeabi_fadd+0x222>
 8000358:	2d00      	cmp	r5, #0
 800035a:	d000      	beq.n	800035e <__aeabi_fadd+0x11a>
 800035c:	e0b7      	b.n	80004ce <__aeabi_fadd+0x28a>
 800035e:	4643      	mov	r3, r8
 8000360:	2b00      	cmp	r3, #0
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0x122>
 8000364:	e0f3      	b.n	800054e <__aeabi_fadd+0x30a>
 8000366:	2200      	movs	r2, #0
 8000368:	2e00      	cmp	r6, #0
 800036a:	d0b0      	beq.n	80002ce <__aeabi_fadd+0x8a>
 800036c:	1b98      	subs	r0, r3, r6
 800036e:	0143      	lsls	r3, r0, #5
 8000370:	d400      	bmi.n	8000374 <__aeabi_fadd+0x130>
 8000372:	e0fa      	b.n	800056a <__aeabi_fadd+0x326>
 8000374:	4643      	mov	r3, r8
 8000376:	000c      	movs	r4, r1
 8000378:	1af0      	subs	r0, r6, r3
 800037a:	e797      	b.n	80002ac <__aeabi_fadd+0x68>
 800037c:	2e00      	cmp	r6, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x13e>
 8000380:	e0c8      	b.n	8000514 <__aeabi_fadd+0x2d0>
 8000382:	1e4a      	subs	r2, r1, #1
 8000384:	2901      	cmp	r1, #1
 8000386:	d100      	bne.n	800038a <__aeabi_fadd+0x146>
 8000388:	e0ae      	b.n	80004e8 <__aeabi_fadd+0x2a4>
 800038a:	29ff      	cmp	r1, #255	; 0xff
 800038c:	d023      	beq.n	80003d6 <__aeabi_fadd+0x192>
 800038e:	0011      	movs	r1, r2
 8000390:	e7c1      	b.n	8000316 <__aeabi_fadd+0xd2>
 8000392:	2300      	movs	r3, #0
 8000394:	22ff      	movs	r2, #255	; 0xff
 8000396:	469c      	mov	ip, r3
 8000398:	e799      	b.n	80002ce <__aeabi_fadd+0x8a>
 800039a:	21fe      	movs	r1, #254	; 0xfe
 800039c:	1c6a      	adds	r2, r5, #1
 800039e:	4211      	tst	r1, r2
 80003a0:	d077      	beq.n	8000492 <__aeabi_fadd+0x24e>
 80003a2:	2aff      	cmp	r2, #255	; 0xff
 80003a4:	d0f5      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80003a6:	0015      	movs	r5, r2
 80003a8:	4446      	add	r6, r8
 80003aa:	0870      	lsrs	r0, r6, #1
 80003ac:	0743      	lsls	r3, r0, #29
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fadd+0x16e>
 80003b0:	e77e      	b.n	80002b0 <__aeabi_fadd+0x6c>
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	2dff      	cmp	r5, #255	; 0xff
 80003b6:	d00e      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003b8:	025b      	lsls	r3, r3, #9
 80003ba:	0a5b      	lsrs	r3, r3, #9
 80003bc:	469c      	mov	ip, r3
 80003be:	b2ea      	uxtb	r2, r5
 80003c0:	e785      	b.n	80002ce <__aeabi_fadd+0x8a>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d007      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	03d2      	lsls	r2, r2, #15
 80003ca:	4213      	tst	r3, r2
 80003cc:	d003      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003ce:	4210      	tst	r0, r2
 80003d0:	d101      	bne.n	80003d6 <__aeabi_fadd+0x192>
 80003d2:	000c      	movs	r4, r1
 80003d4:	0003      	movs	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0db      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80003da:	2080      	movs	r0, #128	; 0x80
 80003dc:	03c0      	lsls	r0, r0, #15
 80003de:	4318      	orrs	r0, r3
 80003e0:	0240      	lsls	r0, r0, #9
 80003e2:	0a43      	lsrs	r3, r0, #9
 80003e4:	469c      	mov	ip, r3
 80003e6:	22ff      	movs	r2, #255	; 0xff
 80003e8:	e771      	b.n	80002ce <__aeabi_fadd+0x8a>
 80003ea:	2900      	cmp	r1, #0
 80003ec:	d0d5      	beq.n	800039a <__aeabi_fadd+0x156>
 80003ee:	1b7a      	subs	r2, r7, r5
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d160      	bne.n	80004b6 <__aeabi_fadd+0x272>
 80003f4:	4643      	mov	r3, r8
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d024      	beq.n	8000444 <__aeabi_fadd+0x200>
 80003fa:	1e53      	subs	r3, r2, #1
 80003fc:	2a01      	cmp	r2, #1
 80003fe:	d073      	beq.n	80004e8 <__aeabi_fadd+0x2a4>
 8000400:	2aff      	cmp	r2, #255	; 0xff
 8000402:	d0e7      	beq.n	80003d4 <__aeabi_fadd+0x190>
 8000404:	001a      	movs	r2, r3
 8000406:	2a1b      	cmp	r2, #27
 8000408:	dc00      	bgt.n	800040c <__aeabi_fadd+0x1c8>
 800040a:	e085      	b.n	8000518 <__aeabi_fadd+0x2d4>
 800040c:	2001      	movs	r0, #1
 800040e:	003d      	movs	r5, r7
 8000410:	1980      	adds	r0, r0, r6
 8000412:	e785      	b.n	8000320 <__aeabi_fadd+0xdc>
 8000414:	2320      	movs	r3, #32
 8000416:	003a      	movs	r2, r7
 8000418:	1b45      	subs	r5, r0, r5
 800041a:	0038      	movs	r0, r7
 800041c:	3501      	adds	r5, #1
 800041e:	40ea      	lsrs	r2, r5
 8000420:	1b5d      	subs	r5, r3, r5
 8000422:	40a8      	lsls	r0, r5
 8000424:	1e43      	subs	r3, r0, #1
 8000426:	4198      	sbcs	r0, r3
 8000428:	2500      	movs	r5, #0
 800042a:	4310      	orrs	r0, r2
 800042c:	e73e      	b.n	80002ac <__aeabi_fadd+0x68>
 800042e:	2320      	movs	r3, #32
 8000430:	0030      	movs	r0, r6
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	0031      	movs	r1, r6
 8000436:	4098      	lsls	r0, r3
 8000438:	40d1      	lsrs	r1, r2
 800043a:	1e43      	subs	r3, r0, #1
 800043c:	4198      	sbcs	r0, r3
 800043e:	4308      	orrs	r0, r1
 8000440:	e722      	b.n	8000288 <__aeabi_fadd+0x44>
 8000442:	000c      	movs	r4, r1
 8000444:	0003      	movs	r3, r0
 8000446:	0015      	movs	r5, r2
 8000448:	e7b4      	b.n	80003b4 <__aeabi_fadd+0x170>
 800044a:	2fff      	cmp	r7, #255	; 0xff
 800044c:	d0c1      	beq.n	80003d2 <__aeabi_fadd+0x18e>
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	4640      	mov	r0, r8
 8000452:	04db      	lsls	r3, r3, #19
 8000454:	4318      	orrs	r0, r3
 8000456:	4680      	mov	r8, r0
 8000458:	2a1b      	cmp	r2, #27
 800045a:	dd51      	ble.n	8000500 <__aeabi_fadd+0x2bc>
 800045c:	2001      	movs	r0, #1
 800045e:	000c      	movs	r4, r1
 8000460:	003d      	movs	r5, r7
 8000462:	1a30      	subs	r0, r6, r0
 8000464:	e712      	b.n	800028c <__aeabi_fadd+0x48>
 8000466:	4643      	mov	r3, r8
 8000468:	1b9f      	subs	r7, r3, r6
 800046a:	017b      	lsls	r3, r7, #5
 800046c:	d42b      	bmi.n	80004c6 <__aeabi_fadd+0x282>
 800046e:	2f00      	cmp	r7, #0
 8000470:	d000      	beq.n	8000474 <__aeabi_fadd+0x230>
 8000472:	e710      	b.n	8000296 <__aeabi_fadd+0x52>
 8000474:	2300      	movs	r3, #0
 8000476:	2400      	movs	r4, #0
 8000478:	2200      	movs	r2, #0
 800047a:	469c      	mov	ip, r3
 800047c:	e727      	b.n	80002ce <__aeabi_fadd+0x8a>
 800047e:	2320      	movs	r3, #32
 8000480:	0032      	movs	r2, r6
 8000482:	0030      	movs	r0, r6
 8000484:	40ca      	lsrs	r2, r1
 8000486:	1a59      	subs	r1, r3, r1
 8000488:	4088      	lsls	r0, r1
 800048a:	1e43      	subs	r3, r0, #1
 800048c:	4198      	sbcs	r0, r3
 800048e:	4310      	orrs	r0, r2
 8000490:	e745      	b.n	800031e <__aeabi_fadd+0xda>
 8000492:	2d00      	cmp	r5, #0
 8000494:	d14a      	bne.n	800052c <__aeabi_fadd+0x2e8>
 8000496:	4643      	mov	r3, r8
 8000498:	2b00      	cmp	r3, #0
 800049a:	d063      	beq.n	8000564 <__aeabi_fadd+0x320>
 800049c:	2200      	movs	r2, #0
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x260>
 80004a2:	e714      	b.n	80002ce <__aeabi_fadd+0x8a>
 80004a4:	0030      	movs	r0, r6
 80004a6:	4440      	add	r0, r8
 80004a8:	0143      	lsls	r3, r0, #5
 80004aa:	d400      	bmi.n	80004ae <__aeabi_fadd+0x26a>
 80004ac:	e77e      	b.n	80003ac <__aeabi_fadd+0x168>
 80004ae:	4b32      	ldr	r3, [pc, #200]	; (8000578 <__aeabi_fadd+0x334>)
 80004b0:	3501      	adds	r5, #1
 80004b2:	4018      	ands	r0, r3
 80004b4:	e77a      	b.n	80003ac <__aeabi_fadd+0x168>
 80004b6:	2fff      	cmp	r7, #255	; 0xff
 80004b8:	d08c      	beq.n	80003d4 <__aeabi_fadd+0x190>
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	4641      	mov	r1, r8
 80004be:	04db      	lsls	r3, r3, #19
 80004c0:	4319      	orrs	r1, r3
 80004c2:	4688      	mov	r8, r1
 80004c4:	e79f      	b.n	8000406 <__aeabi_fadd+0x1c2>
 80004c6:	4643      	mov	r3, r8
 80004c8:	000c      	movs	r4, r1
 80004ca:	1af7      	subs	r7, r6, r3
 80004cc:	e6e3      	b.n	8000296 <__aeabi_fadd+0x52>
 80004ce:	4642      	mov	r2, r8
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fadd+0x292>
 80004d4:	e775      	b.n	80003c2 <__aeabi_fadd+0x17e>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d000      	beq.n	80004dc <__aeabi_fadd+0x298>
 80004da:	e77a      	b.n	80003d2 <__aeabi_fadd+0x18e>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	03db      	lsls	r3, r3, #15
 80004e0:	2400      	movs	r4, #0
 80004e2:	469c      	mov	ip, r3
 80004e4:	22ff      	movs	r2, #255	; 0xff
 80004e6:	e6f2      	b.n	80002ce <__aeabi_fadd+0x8a>
 80004e8:	0030      	movs	r0, r6
 80004ea:	4440      	add	r0, r8
 80004ec:	2501      	movs	r5, #1
 80004ee:	0143      	lsls	r3, r0, #5
 80004f0:	d400      	bmi.n	80004f4 <__aeabi_fadd+0x2b0>
 80004f2:	e75b      	b.n	80003ac <__aeabi_fadd+0x168>
 80004f4:	2502      	movs	r5, #2
 80004f6:	e718      	b.n	800032a <__aeabi_fadd+0xe6>
 80004f8:	4643      	mov	r3, r8
 80004fa:	2501      	movs	r5, #1
 80004fc:	1b98      	subs	r0, r3, r6
 80004fe:	e6c5      	b.n	800028c <__aeabi_fadd+0x48>
 8000500:	2320      	movs	r3, #32
 8000502:	4644      	mov	r4, r8
 8000504:	4640      	mov	r0, r8
 8000506:	40d4      	lsrs	r4, r2
 8000508:	1a9a      	subs	r2, r3, r2
 800050a:	4090      	lsls	r0, r2
 800050c:	1e43      	subs	r3, r0, #1
 800050e:	4198      	sbcs	r0, r3
 8000510:	4320      	orrs	r0, r4
 8000512:	e7a4      	b.n	800045e <__aeabi_fadd+0x21a>
 8000514:	000d      	movs	r5, r1
 8000516:	e74d      	b.n	80003b4 <__aeabi_fadd+0x170>
 8000518:	2320      	movs	r3, #32
 800051a:	4641      	mov	r1, r8
 800051c:	4640      	mov	r0, r8
 800051e:	40d1      	lsrs	r1, r2
 8000520:	1a9a      	subs	r2, r3, r2
 8000522:	4090      	lsls	r0, r2
 8000524:	1e43      	subs	r3, r0, #1
 8000526:	4198      	sbcs	r0, r3
 8000528:	4308      	orrs	r0, r1
 800052a:	e770      	b.n	800040e <__aeabi_fadd+0x1ca>
 800052c:	4642      	mov	r2, r8
 800052e:	2a00      	cmp	r2, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x2f0>
 8000532:	e74f      	b.n	80003d4 <__aeabi_fadd+0x190>
 8000534:	2e00      	cmp	r6, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2f6>
 8000538:	e74d      	b.n	80003d6 <__aeabi_fadd+0x192>
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	03d2      	lsls	r2, r2, #15
 800053e:	4213      	tst	r3, r2
 8000540:	d100      	bne.n	8000544 <__aeabi_fadd+0x300>
 8000542:	e748      	b.n	80003d6 <__aeabi_fadd+0x192>
 8000544:	4210      	tst	r0, r2
 8000546:	d000      	beq.n	800054a <__aeabi_fadd+0x306>
 8000548:	e745      	b.n	80003d6 <__aeabi_fadd+0x192>
 800054a:	0003      	movs	r3, r0
 800054c:	e743      	b.n	80003d6 <__aeabi_fadd+0x192>
 800054e:	2e00      	cmp	r6, #0
 8000550:	d090      	beq.n	8000474 <__aeabi_fadd+0x230>
 8000552:	000c      	movs	r4, r1
 8000554:	4684      	mov	ip, r0
 8000556:	2200      	movs	r2, #0
 8000558:	e6b9      	b.n	80002ce <__aeabi_fadd+0x8a>
 800055a:	4643      	mov	r3, r8
 800055c:	000c      	movs	r4, r1
 800055e:	1af0      	subs	r0, r6, r3
 8000560:	3501      	adds	r5, #1
 8000562:	e693      	b.n	800028c <__aeabi_fadd+0x48>
 8000564:	4684      	mov	ip, r0
 8000566:	2200      	movs	r2, #0
 8000568:	e6b1      	b.n	80002ce <__aeabi_fadd+0x8a>
 800056a:	2800      	cmp	r0, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x32c>
 800056e:	e71d      	b.n	80003ac <__aeabi_fadd+0x168>
 8000570:	2300      	movs	r3, #0
 8000572:	2400      	movs	r4, #0
 8000574:	469c      	mov	ip, r3
 8000576:	e6aa      	b.n	80002ce <__aeabi_fadd+0x8a>
 8000578:	fbffffff 	.word	0xfbffffff
 800057c:	7dffffff 	.word	0x7dffffff

08000580 <__aeabi_fmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	464f      	mov	r7, r9
 8000584:	4646      	mov	r6, r8
 8000586:	46d6      	mov	lr, sl
 8000588:	0244      	lsls	r4, r0, #9
 800058a:	0045      	lsls	r5, r0, #1
 800058c:	b5c0      	push	{r6, r7, lr}
 800058e:	0a64      	lsrs	r4, r4, #9
 8000590:	1c0f      	adds	r7, r1, #0
 8000592:	0e2d      	lsrs	r5, r5, #24
 8000594:	0fc6      	lsrs	r6, r0, #31
 8000596:	2d00      	cmp	r5, #0
 8000598:	d100      	bne.n	800059c <__aeabi_fmul+0x1c>
 800059a:	e08d      	b.n	80006b8 <__aeabi_fmul+0x138>
 800059c:	2dff      	cmp	r5, #255	; 0xff
 800059e:	d100      	bne.n	80005a2 <__aeabi_fmul+0x22>
 80005a0:	e092      	b.n	80006c8 <__aeabi_fmul+0x148>
 80005a2:	2300      	movs	r3, #0
 80005a4:	2080      	movs	r0, #128	; 0x80
 80005a6:	4699      	mov	r9, r3
 80005a8:	469a      	mov	sl, r3
 80005aa:	00e4      	lsls	r4, r4, #3
 80005ac:	04c0      	lsls	r0, r0, #19
 80005ae:	4304      	orrs	r4, r0
 80005b0:	3d7f      	subs	r5, #127	; 0x7f
 80005b2:	0278      	lsls	r0, r7, #9
 80005b4:	0a43      	lsrs	r3, r0, #9
 80005b6:	4698      	mov	r8, r3
 80005b8:	007b      	lsls	r3, r7, #1
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	0fff      	lsrs	r7, r7, #31
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fmul+0x44>
 80005c2:	e070      	b.n	80006a6 <__aeabi_fmul+0x126>
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fmul+0x4a>
 80005c8:	e086      	b.n	80006d8 <__aeabi_fmul+0x158>
 80005ca:	4642      	mov	r2, r8
 80005cc:	00d0      	lsls	r0, r2, #3
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	3b7f      	subs	r3, #127	; 0x7f
 80005d2:	18ed      	adds	r5, r5, r3
 80005d4:	2300      	movs	r3, #0
 80005d6:	04d2      	lsls	r2, r2, #19
 80005d8:	4302      	orrs	r2, r0
 80005da:	4690      	mov	r8, r2
 80005dc:	469c      	mov	ip, r3
 80005de:	0031      	movs	r1, r6
 80005e0:	464b      	mov	r3, r9
 80005e2:	4079      	eors	r1, r7
 80005e4:	1c68      	adds	r0, r5, #1
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d81c      	bhi.n	8000624 <__aeabi_fmul+0xa4>
 80005ea:	4a76      	ldr	r2, [pc, #472]	; (80007c4 <__aeabi_fmul+0x244>)
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	58d3      	ldr	r3, [r2, r3]
 80005f0:	469f      	mov	pc, r3
 80005f2:	0039      	movs	r1, r7
 80005f4:	4644      	mov	r4, r8
 80005f6:	46e2      	mov	sl, ip
 80005f8:	4653      	mov	r3, sl
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d00f      	beq.n	800061e <__aeabi_fmul+0x9e>
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d100      	bne.n	8000604 <__aeabi_fmul+0x84>
 8000602:	e0d7      	b.n	80007b4 <__aeabi_fmul+0x234>
 8000604:	2b01      	cmp	r3, #1
 8000606:	d137      	bne.n	8000678 <__aeabi_fmul+0xf8>
 8000608:	2000      	movs	r0, #0
 800060a:	2400      	movs	r4, #0
 800060c:	05c0      	lsls	r0, r0, #23
 800060e:	4320      	orrs	r0, r4
 8000610:	07c9      	lsls	r1, r1, #31
 8000612:	4308      	orrs	r0, r1
 8000614:	bce0      	pop	{r5, r6, r7}
 8000616:	46ba      	mov	sl, r7
 8000618:	46b1      	mov	r9, r6
 800061a:	46a8      	mov	r8, r5
 800061c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061e:	20ff      	movs	r0, #255	; 0xff
 8000620:	2400      	movs	r4, #0
 8000622:	e7f3      	b.n	800060c <__aeabi_fmul+0x8c>
 8000624:	0c26      	lsrs	r6, r4, #16
 8000626:	0424      	lsls	r4, r4, #16
 8000628:	0c22      	lsrs	r2, r4, #16
 800062a:	4644      	mov	r4, r8
 800062c:	0424      	lsls	r4, r4, #16
 800062e:	0c24      	lsrs	r4, r4, #16
 8000630:	4643      	mov	r3, r8
 8000632:	0027      	movs	r7, r4
 8000634:	0c1b      	lsrs	r3, r3, #16
 8000636:	4357      	muls	r7, r2
 8000638:	4374      	muls	r4, r6
 800063a:	435a      	muls	r2, r3
 800063c:	435e      	muls	r6, r3
 800063e:	1912      	adds	r2, r2, r4
 8000640:	0c3b      	lsrs	r3, r7, #16
 8000642:	189b      	adds	r3, r3, r2
 8000644:	429c      	cmp	r4, r3
 8000646:	d903      	bls.n	8000650 <__aeabi_fmul+0xd0>
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	0252      	lsls	r2, r2, #9
 800064c:	4694      	mov	ip, r2
 800064e:	4466      	add	r6, ip
 8000650:	043f      	lsls	r7, r7, #16
 8000652:	041a      	lsls	r2, r3, #16
 8000654:	0c3f      	lsrs	r7, r7, #16
 8000656:	19d2      	adds	r2, r2, r7
 8000658:	0194      	lsls	r4, r2, #6
 800065a:	1e67      	subs	r7, r4, #1
 800065c:	41bc      	sbcs	r4, r7
 800065e:	0c1b      	lsrs	r3, r3, #16
 8000660:	0e92      	lsrs	r2, r2, #26
 8000662:	199b      	adds	r3, r3, r6
 8000664:	4314      	orrs	r4, r2
 8000666:	019b      	lsls	r3, r3, #6
 8000668:	431c      	orrs	r4, r3
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	d400      	bmi.n	8000670 <__aeabi_fmul+0xf0>
 800066e:	e09b      	b.n	80007a8 <__aeabi_fmul+0x228>
 8000670:	2301      	movs	r3, #1
 8000672:	0862      	lsrs	r2, r4, #1
 8000674:	401c      	ands	r4, r3
 8000676:	4314      	orrs	r4, r2
 8000678:	0002      	movs	r2, r0
 800067a:	327f      	adds	r2, #127	; 0x7f
 800067c:	2a00      	cmp	r2, #0
 800067e:	dd64      	ble.n	800074a <__aeabi_fmul+0x1ca>
 8000680:	0763      	lsls	r3, r4, #29
 8000682:	d004      	beq.n	800068e <__aeabi_fmul+0x10e>
 8000684:	230f      	movs	r3, #15
 8000686:	4023      	ands	r3, r4
 8000688:	2b04      	cmp	r3, #4
 800068a:	d000      	beq.n	800068e <__aeabi_fmul+0x10e>
 800068c:	3404      	adds	r4, #4
 800068e:	0123      	lsls	r3, r4, #4
 8000690:	d503      	bpl.n	800069a <__aeabi_fmul+0x11a>
 8000692:	0002      	movs	r2, r0
 8000694:	4b4c      	ldr	r3, [pc, #304]	; (80007c8 <__aeabi_fmul+0x248>)
 8000696:	3280      	adds	r2, #128	; 0x80
 8000698:	401c      	ands	r4, r3
 800069a:	2afe      	cmp	r2, #254	; 0xfe
 800069c:	dcbf      	bgt.n	800061e <__aeabi_fmul+0x9e>
 800069e:	01a4      	lsls	r4, r4, #6
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	b2d0      	uxtb	r0, r2
 80006a4:	e7b2      	b.n	800060c <__aeabi_fmul+0x8c>
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d13d      	bne.n	8000728 <__aeabi_fmul+0x1a8>
 80006ac:	464a      	mov	r2, r9
 80006ae:	3301      	adds	r3, #1
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4691      	mov	r9, r2
 80006b4:	469c      	mov	ip, r3
 80006b6:	e792      	b.n	80005de <__aeabi_fmul+0x5e>
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d129      	bne.n	8000710 <__aeabi_fmul+0x190>
 80006bc:	2304      	movs	r3, #4
 80006be:	4699      	mov	r9, r3
 80006c0:	3b03      	subs	r3, #3
 80006c2:	2500      	movs	r5, #0
 80006c4:	469a      	mov	sl, r3
 80006c6:	e774      	b.n	80005b2 <__aeabi_fmul+0x32>
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	d11b      	bne.n	8000704 <__aeabi_fmul+0x184>
 80006cc:	2308      	movs	r3, #8
 80006ce:	4699      	mov	r9, r3
 80006d0:	3b06      	subs	r3, #6
 80006d2:	25ff      	movs	r5, #255	; 0xff
 80006d4:	469a      	mov	sl, r3
 80006d6:	e76c      	b.n	80005b2 <__aeabi_fmul+0x32>
 80006d8:	4643      	mov	r3, r8
 80006da:	35ff      	adds	r5, #255	; 0xff
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10b      	bne.n	80006f8 <__aeabi_fmul+0x178>
 80006e0:	2302      	movs	r3, #2
 80006e2:	464a      	mov	r2, r9
 80006e4:	431a      	orrs	r2, r3
 80006e6:	4691      	mov	r9, r2
 80006e8:	469c      	mov	ip, r3
 80006ea:	e778      	b.n	80005de <__aeabi_fmul+0x5e>
 80006ec:	4653      	mov	r3, sl
 80006ee:	0031      	movs	r1, r6
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fmul+0x176>
 80006f4:	e783      	b.n	80005fe <__aeabi_fmul+0x7e>
 80006f6:	e792      	b.n	800061e <__aeabi_fmul+0x9e>
 80006f8:	2303      	movs	r3, #3
 80006fa:	464a      	mov	r2, r9
 80006fc:	431a      	orrs	r2, r3
 80006fe:	4691      	mov	r9, r2
 8000700:	469c      	mov	ip, r3
 8000702:	e76c      	b.n	80005de <__aeabi_fmul+0x5e>
 8000704:	230c      	movs	r3, #12
 8000706:	4699      	mov	r9, r3
 8000708:	3b09      	subs	r3, #9
 800070a:	25ff      	movs	r5, #255	; 0xff
 800070c:	469a      	mov	sl, r3
 800070e:	e750      	b.n	80005b2 <__aeabi_fmul+0x32>
 8000710:	0020      	movs	r0, r4
 8000712:	f000 fab9 	bl	8000c88 <__clzsi2>
 8000716:	2576      	movs	r5, #118	; 0x76
 8000718:	1f43      	subs	r3, r0, #5
 800071a:	409c      	lsls	r4, r3
 800071c:	2300      	movs	r3, #0
 800071e:	426d      	negs	r5, r5
 8000720:	4699      	mov	r9, r3
 8000722:	469a      	mov	sl, r3
 8000724:	1a2d      	subs	r5, r5, r0
 8000726:	e744      	b.n	80005b2 <__aeabi_fmul+0x32>
 8000728:	4640      	mov	r0, r8
 800072a:	f000 faad 	bl	8000c88 <__clzsi2>
 800072e:	4642      	mov	r2, r8
 8000730:	1f43      	subs	r3, r0, #5
 8000732:	409a      	lsls	r2, r3
 8000734:	2300      	movs	r3, #0
 8000736:	1a2d      	subs	r5, r5, r0
 8000738:	4690      	mov	r8, r2
 800073a:	469c      	mov	ip, r3
 800073c:	3d76      	subs	r5, #118	; 0x76
 800073e:	e74e      	b.n	80005de <__aeabi_fmul+0x5e>
 8000740:	2480      	movs	r4, #128	; 0x80
 8000742:	2100      	movs	r1, #0
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	03e4      	lsls	r4, r4, #15
 8000748:	e760      	b.n	800060c <__aeabi_fmul+0x8c>
 800074a:	2301      	movs	r3, #1
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	2b1b      	cmp	r3, #27
 8000750:	dd00      	ble.n	8000754 <__aeabi_fmul+0x1d4>
 8000752:	e759      	b.n	8000608 <__aeabi_fmul+0x88>
 8000754:	0022      	movs	r2, r4
 8000756:	309e      	adds	r0, #158	; 0x9e
 8000758:	40da      	lsrs	r2, r3
 800075a:	4084      	lsls	r4, r0
 800075c:	0013      	movs	r3, r2
 800075e:	1e62      	subs	r2, r4, #1
 8000760:	4194      	sbcs	r4, r2
 8000762:	431c      	orrs	r4, r3
 8000764:	0763      	lsls	r3, r4, #29
 8000766:	d004      	beq.n	8000772 <__aeabi_fmul+0x1f2>
 8000768:	230f      	movs	r3, #15
 800076a:	4023      	ands	r3, r4
 800076c:	2b04      	cmp	r3, #4
 800076e:	d000      	beq.n	8000772 <__aeabi_fmul+0x1f2>
 8000770:	3404      	adds	r4, #4
 8000772:	0163      	lsls	r3, r4, #5
 8000774:	d51a      	bpl.n	80007ac <__aeabi_fmul+0x22c>
 8000776:	2001      	movs	r0, #1
 8000778:	2400      	movs	r4, #0
 800077a:	e747      	b.n	800060c <__aeabi_fmul+0x8c>
 800077c:	2080      	movs	r0, #128	; 0x80
 800077e:	03c0      	lsls	r0, r0, #15
 8000780:	4204      	tst	r4, r0
 8000782:	d009      	beq.n	8000798 <__aeabi_fmul+0x218>
 8000784:	4643      	mov	r3, r8
 8000786:	4203      	tst	r3, r0
 8000788:	d106      	bne.n	8000798 <__aeabi_fmul+0x218>
 800078a:	4644      	mov	r4, r8
 800078c:	4304      	orrs	r4, r0
 800078e:	0264      	lsls	r4, r4, #9
 8000790:	0039      	movs	r1, r7
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	0a64      	lsrs	r4, r4, #9
 8000796:	e739      	b.n	800060c <__aeabi_fmul+0x8c>
 8000798:	2080      	movs	r0, #128	; 0x80
 800079a:	03c0      	lsls	r0, r0, #15
 800079c:	4304      	orrs	r4, r0
 800079e:	0264      	lsls	r4, r4, #9
 80007a0:	0031      	movs	r1, r6
 80007a2:	20ff      	movs	r0, #255	; 0xff
 80007a4:	0a64      	lsrs	r4, r4, #9
 80007a6:	e731      	b.n	800060c <__aeabi_fmul+0x8c>
 80007a8:	0028      	movs	r0, r5
 80007aa:	e765      	b.n	8000678 <__aeabi_fmul+0xf8>
 80007ac:	01a4      	lsls	r4, r4, #6
 80007ae:	2000      	movs	r0, #0
 80007b0:	0a64      	lsrs	r4, r4, #9
 80007b2:	e72b      	b.n	800060c <__aeabi_fmul+0x8c>
 80007b4:	2080      	movs	r0, #128	; 0x80
 80007b6:	03c0      	lsls	r0, r0, #15
 80007b8:	4304      	orrs	r4, r0
 80007ba:	0264      	lsls	r4, r4, #9
 80007bc:	20ff      	movs	r0, #255	; 0xff
 80007be:	0a64      	lsrs	r4, r4, #9
 80007c0:	e724      	b.n	800060c <__aeabi_fmul+0x8c>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	08006628 	.word	0x08006628
 80007c8:	f7ffffff 	.word	0xf7ffffff

080007cc <__aeabi_fsub>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	46ce      	mov	lr, r9
 80007d0:	4647      	mov	r7, r8
 80007d2:	0243      	lsls	r3, r0, #9
 80007d4:	0a5b      	lsrs	r3, r3, #9
 80007d6:	024e      	lsls	r6, r1, #9
 80007d8:	00da      	lsls	r2, r3, #3
 80007da:	4694      	mov	ip, r2
 80007dc:	0a72      	lsrs	r2, r6, #9
 80007de:	4691      	mov	r9, r2
 80007e0:	0045      	lsls	r5, r0, #1
 80007e2:	004a      	lsls	r2, r1, #1
 80007e4:	b580      	push	{r7, lr}
 80007e6:	0e2d      	lsrs	r5, r5, #24
 80007e8:	001f      	movs	r7, r3
 80007ea:	0fc4      	lsrs	r4, r0, #31
 80007ec:	0e12      	lsrs	r2, r2, #24
 80007ee:	0fc9      	lsrs	r1, r1, #31
 80007f0:	09b6      	lsrs	r6, r6, #6
 80007f2:	2aff      	cmp	r2, #255	; 0xff
 80007f4:	d05b      	beq.n	80008ae <__aeabi_fsub+0xe2>
 80007f6:	2001      	movs	r0, #1
 80007f8:	4041      	eors	r1, r0
 80007fa:	428c      	cmp	r4, r1
 80007fc:	d039      	beq.n	8000872 <__aeabi_fsub+0xa6>
 80007fe:	1aa8      	subs	r0, r5, r2
 8000800:	2800      	cmp	r0, #0
 8000802:	dd5a      	ble.n	80008ba <__aeabi_fsub+0xee>
 8000804:	2a00      	cmp	r2, #0
 8000806:	d06a      	beq.n	80008de <__aeabi_fsub+0x112>
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d100      	bne.n	800080e <__aeabi_fsub+0x42>
 800080c:	e0d9      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4316      	orrs	r6, r2
 8000814:	281b      	cmp	r0, #27
 8000816:	dc00      	bgt.n	800081a <__aeabi_fsub+0x4e>
 8000818:	e0e9      	b.n	80009ee <__aeabi_fsub+0x222>
 800081a:	2001      	movs	r0, #1
 800081c:	4663      	mov	r3, ip
 800081e:	1a18      	subs	r0, r3, r0
 8000820:	0143      	lsls	r3, r0, #5
 8000822:	d400      	bmi.n	8000826 <__aeabi_fsub+0x5a>
 8000824:	e0b4      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000826:	0180      	lsls	r0, r0, #6
 8000828:	0987      	lsrs	r7, r0, #6
 800082a:	0038      	movs	r0, r7
 800082c:	f000 fa2c 	bl	8000c88 <__clzsi2>
 8000830:	3805      	subs	r0, #5
 8000832:	4087      	lsls	r7, r0
 8000834:	4285      	cmp	r5, r0
 8000836:	dc00      	bgt.n	800083a <__aeabi_fsub+0x6e>
 8000838:	e0cc      	b.n	80009d4 <__aeabi_fsub+0x208>
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	48b5      	ldr	r0, [pc, #724]	; (8000b14 <__aeabi_fsub+0x348>)
 800083e:	4038      	ands	r0, r7
 8000840:	0743      	lsls	r3, r0, #29
 8000842:	d004      	beq.n	800084e <__aeabi_fsub+0x82>
 8000844:	230f      	movs	r3, #15
 8000846:	4003      	ands	r3, r0
 8000848:	2b04      	cmp	r3, #4
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x82>
 800084c:	3004      	adds	r0, #4
 800084e:	0143      	lsls	r3, r0, #5
 8000850:	d400      	bmi.n	8000854 <__aeabi_fsub+0x88>
 8000852:	e0a0      	b.n	8000996 <__aeabi_fsub+0x1ca>
 8000854:	1c6a      	adds	r2, r5, #1
 8000856:	2dfe      	cmp	r5, #254	; 0xfe
 8000858:	d100      	bne.n	800085c <__aeabi_fsub+0x90>
 800085a:	e08d      	b.n	8000978 <__aeabi_fsub+0x1ac>
 800085c:	0180      	lsls	r0, r0, #6
 800085e:	0a47      	lsrs	r7, r0, #9
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	05d0      	lsls	r0, r2, #23
 8000864:	4338      	orrs	r0, r7
 8000866:	07e4      	lsls	r4, r4, #31
 8000868:	4320      	orrs	r0, r4
 800086a:	bcc0      	pop	{r6, r7}
 800086c:	46b9      	mov	r9, r7
 800086e:	46b0      	mov	r8, r6
 8000870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000872:	1aa8      	subs	r0, r5, r2
 8000874:	4680      	mov	r8, r0
 8000876:	2800      	cmp	r0, #0
 8000878:	dd45      	ble.n	8000906 <__aeabi_fsub+0x13a>
 800087a:	2a00      	cmp	r2, #0
 800087c:	d070      	beq.n	8000960 <__aeabi_fsub+0x194>
 800087e:	2dff      	cmp	r5, #255	; 0xff
 8000880:	d100      	bne.n	8000884 <__aeabi_fsub+0xb8>
 8000882:	e09e      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	04db      	lsls	r3, r3, #19
 8000888:	431e      	orrs	r6, r3
 800088a:	4643      	mov	r3, r8
 800088c:	2b1b      	cmp	r3, #27
 800088e:	dc00      	bgt.n	8000892 <__aeabi_fsub+0xc6>
 8000890:	e0d2      	b.n	8000a38 <__aeabi_fsub+0x26c>
 8000892:	2001      	movs	r0, #1
 8000894:	4460      	add	r0, ip
 8000896:	0143      	lsls	r3, r0, #5
 8000898:	d57a      	bpl.n	8000990 <__aeabi_fsub+0x1c4>
 800089a:	3501      	adds	r5, #1
 800089c:	2dff      	cmp	r5, #255	; 0xff
 800089e:	d06b      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 80008a0:	2301      	movs	r3, #1
 80008a2:	4a9d      	ldr	r2, [pc, #628]	; (8000b18 <__aeabi_fsub+0x34c>)
 80008a4:	4003      	ands	r3, r0
 80008a6:	0840      	lsrs	r0, r0, #1
 80008a8:	4010      	ands	r0, r2
 80008aa:	4318      	orrs	r0, r3
 80008ac:	e7c8      	b.n	8000840 <__aeabi_fsub+0x74>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d020      	beq.n	80008f4 <__aeabi_fsub+0x128>
 80008b2:	428c      	cmp	r4, r1
 80008b4:	d023      	beq.n	80008fe <__aeabi_fsub+0x132>
 80008b6:	0028      	movs	r0, r5
 80008b8:	38ff      	subs	r0, #255	; 0xff
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d039      	beq.n	8000932 <__aeabi_fsub+0x166>
 80008be:	1b57      	subs	r7, r2, r5
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d000      	beq.n	80008c6 <__aeabi_fsub+0xfa>
 80008c4:	e09d      	b.n	8000a02 <__aeabi_fsub+0x236>
 80008c6:	4663      	mov	r3, ip
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_fsub+0x102>
 80008cc:	e0db      	b.n	8000a86 <__aeabi_fsub+0x2ba>
 80008ce:	1e7b      	subs	r3, r7, #1
 80008d0:	2f01      	cmp	r7, #1
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x10a>
 80008d4:	e10d      	b.n	8000af2 <__aeabi_fsub+0x326>
 80008d6:	2fff      	cmp	r7, #255	; 0xff
 80008d8:	d071      	beq.n	80009be <__aeabi_fsub+0x1f2>
 80008da:	001f      	movs	r7, r3
 80008dc:	e098      	b.n	8000a10 <__aeabi_fsub+0x244>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fsub+0x118>
 80008e2:	e0a7      	b.n	8000a34 <__aeabi_fsub+0x268>
 80008e4:	1e42      	subs	r2, r0, #1
 80008e6:	2801      	cmp	r0, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_fsub+0x120>
 80008ea:	e0e6      	b.n	8000aba <__aeabi_fsub+0x2ee>
 80008ec:	28ff      	cmp	r0, #255	; 0xff
 80008ee:	d068      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80008f0:	0010      	movs	r0, r2
 80008f2:	e78f      	b.n	8000814 <__aeabi_fsub+0x48>
 80008f4:	2001      	movs	r0, #1
 80008f6:	4041      	eors	r1, r0
 80008f8:	42a1      	cmp	r1, r4
 80008fa:	d000      	beq.n	80008fe <__aeabi_fsub+0x132>
 80008fc:	e77f      	b.n	80007fe <__aeabi_fsub+0x32>
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	4240      	negs	r0, r0
 8000902:	4680      	mov	r8, r0
 8000904:	44a8      	add	r8, r5
 8000906:	4640      	mov	r0, r8
 8000908:	2800      	cmp	r0, #0
 800090a:	d038      	beq.n	800097e <__aeabi_fsub+0x1b2>
 800090c:	1b51      	subs	r1, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fsub+0x148>
 8000912:	e0ae      	b.n	8000a72 <__aeabi_fsub+0x2a6>
 8000914:	2aff      	cmp	r2, #255	; 0xff
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x14e>
 8000918:	e0df      	b.n	8000ada <__aeabi_fsub+0x30e>
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	4660      	mov	r0, ip
 800091e:	04db      	lsls	r3, r3, #19
 8000920:	4318      	orrs	r0, r3
 8000922:	4684      	mov	ip, r0
 8000924:	291b      	cmp	r1, #27
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0x15e>
 8000928:	e0d9      	b.n	8000ade <__aeabi_fsub+0x312>
 800092a:	2001      	movs	r0, #1
 800092c:	0015      	movs	r5, r2
 800092e:	1980      	adds	r0, r0, r6
 8000930:	e7b1      	b.n	8000896 <__aeabi_fsub+0xca>
 8000932:	20fe      	movs	r0, #254	; 0xfe
 8000934:	1c6a      	adds	r2, r5, #1
 8000936:	4210      	tst	r0, r2
 8000938:	d171      	bne.n	8000a1e <__aeabi_fsub+0x252>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d000      	beq.n	8000940 <__aeabi_fsub+0x174>
 800093e:	e0a6      	b.n	8000a8e <__aeabi_fsub+0x2c2>
 8000940:	4663      	mov	r3, ip
 8000942:	2b00      	cmp	r3, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_fsub+0x17c>
 8000946:	e0d9      	b.n	8000afc <__aeabi_fsub+0x330>
 8000948:	2200      	movs	r2, #0
 800094a:	2e00      	cmp	r6, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x184>
 800094e:	e788      	b.n	8000862 <__aeabi_fsub+0x96>
 8000950:	1b98      	subs	r0, r3, r6
 8000952:	0143      	lsls	r3, r0, #5
 8000954:	d400      	bmi.n	8000958 <__aeabi_fsub+0x18c>
 8000956:	e0e1      	b.n	8000b1c <__aeabi_fsub+0x350>
 8000958:	4663      	mov	r3, ip
 800095a:	000c      	movs	r4, r1
 800095c:	1af0      	subs	r0, r6, r3
 800095e:	e76f      	b.n	8000840 <__aeabi_fsub+0x74>
 8000960:	2e00      	cmp	r6, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x19a>
 8000964:	e0b7      	b.n	8000ad6 <__aeabi_fsub+0x30a>
 8000966:	0002      	movs	r2, r0
 8000968:	3a01      	subs	r2, #1
 800096a:	2801      	cmp	r0, #1
 800096c:	d100      	bne.n	8000970 <__aeabi_fsub+0x1a4>
 800096e:	e09c      	b.n	8000aaa <__aeabi_fsub+0x2de>
 8000970:	28ff      	cmp	r0, #255	; 0xff
 8000972:	d026      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 8000974:	4690      	mov	r8, r2
 8000976:	e788      	b.n	800088a <__aeabi_fsub+0xbe>
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	2700      	movs	r7, #0
 800097c:	e771      	b.n	8000862 <__aeabi_fsub+0x96>
 800097e:	20fe      	movs	r0, #254	; 0xfe
 8000980:	1c6a      	adds	r2, r5, #1
 8000982:	4210      	tst	r0, r2
 8000984:	d064      	beq.n	8000a50 <__aeabi_fsub+0x284>
 8000986:	2aff      	cmp	r2, #255	; 0xff
 8000988:	d0f6      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 800098a:	0015      	movs	r5, r2
 800098c:	4466      	add	r6, ip
 800098e:	0870      	lsrs	r0, r6, #1
 8000990:	0743      	lsls	r3, r0, #29
 8000992:	d000      	beq.n	8000996 <__aeabi_fsub+0x1ca>
 8000994:	e756      	b.n	8000844 <__aeabi_fsub+0x78>
 8000996:	08c3      	lsrs	r3, r0, #3
 8000998:	2dff      	cmp	r5, #255	; 0xff
 800099a:	d012      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 800099c:	025b      	lsls	r3, r3, #9
 800099e:	0a5f      	lsrs	r7, r3, #9
 80009a0:	b2ea      	uxtb	r2, r5
 80009a2:	e75e      	b.n	8000862 <__aeabi_fsub+0x96>
 80009a4:	4662      	mov	r2, ip
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x1e0>
 80009aa:	e096      	b.n	8000ada <__aeabi_fsub+0x30e>
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d008      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	03d2      	lsls	r2, r2, #15
 80009b4:	4213      	tst	r3, r2
 80009b6:	d004      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80009b8:	4648      	mov	r0, r9
 80009ba:	4210      	tst	r0, r2
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fsub+0x1f6>
 80009be:	000c      	movs	r4, r1
 80009c0:	464b      	mov	r3, r9
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0d8      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 80009c6:	2780      	movs	r7, #128	; 0x80
 80009c8:	03ff      	lsls	r7, r7, #15
 80009ca:	431f      	orrs	r7, r3
 80009cc:	027f      	lsls	r7, r7, #9
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	0a7f      	lsrs	r7, r7, #9
 80009d2:	e746      	b.n	8000862 <__aeabi_fsub+0x96>
 80009d4:	2320      	movs	r3, #32
 80009d6:	003a      	movs	r2, r7
 80009d8:	1b45      	subs	r5, r0, r5
 80009da:	0038      	movs	r0, r7
 80009dc:	3501      	adds	r5, #1
 80009de:	40ea      	lsrs	r2, r5
 80009e0:	1b5d      	subs	r5, r3, r5
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	1e43      	subs	r3, r0, #1
 80009e6:	4198      	sbcs	r0, r3
 80009e8:	2500      	movs	r5, #0
 80009ea:	4310      	orrs	r0, r2
 80009ec:	e728      	b.n	8000840 <__aeabi_fsub+0x74>
 80009ee:	2320      	movs	r3, #32
 80009f0:	1a1b      	subs	r3, r3, r0
 80009f2:	0032      	movs	r2, r6
 80009f4:	409e      	lsls	r6, r3
 80009f6:	40c2      	lsrs	r2, r0
 80009f8:	0030      	movs	r0, r6
 80009fa:	1e43      	subs	r3, r0, #1
 80009fc:	4198      	sbcs	r0, r3
 80009fe:	4310      	orrs	r0, r2
 8000a00:	e70c      	b.n	800081c <__aeabi_fsub+0x50>
 8000a02:	2aff      	cmp	r2, #255	; 0xff
 8000a04:	d0db      	beq.n	80009be <__aeabi_fsub+0x1f2>
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	4660      	mov	r0, ip
 8000a0a:	04db      	lsls	r3, r3, #19
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	4684      	mov	ip, r0
 8000a10:	2f1b      	cmp	r7, #27
 8000a12:	dd56      	ble.n	8000ac2 <__aeabi_fsub+0x2f6>
 8000a14:	2001      	movs	r0, #1
 8000a16:	000c      	movs	r4, r1
 8000a18:	0015      	movs	r5, r2
 8000a1a:	1a30      	subs	r0, r6, r0
 8000a1c:	e700      	b.n	8000820 <__aeabi_fsub+0x54>
 8000a1e:	4663      	mov	r3, ip
 8000a20:	1b9f      	subs	r7, r3, r6
 8000a22:	017b      	lsls	r3, r7, #5
 8000a24:	d43d      	bmi.n	8000aa2 <__aeabi_fsub+0x2d6>
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0x260>
 8000a2a:	e6fe      	b.n	800082a <__aeabi_fsub+0x5e>
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2700      	movs	r7, #0
 8000a32:	e716      	b.n	8000862 <__aeabi_fsub+0x96>
 8000a34:	0005      	movs	r5, r0
 8000a36:	e7af      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000a38:	0032      	movs	r2, r6
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	4641      	mov	r1, r8
 8000a3e:	40da      	lsrs	r2, r3
 8000a40:	2320      	movs	r3, #32
 8000a42:	1a5b      	subs	r3, r3, r1
 8000a44:	409e      	lsls	r6, r3
 8000a46:	0030      	movs	r0, r6
 8000a48:	1e43      	subs	r3, r0, #1
 8000a4a:	4198      	sbcs	r0, r3
 8000a4c:	4310      	orrs	r0, r2
 8000a4e:	e721      	b.n	8000894 <__aeabi_fsub+0xc8>
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d1a7      	bne.n	80009a4 <__aeabi_fsub+0x1d8>
 8000a54:	4663      	mov	r3, ip
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d059      	beq.n	8000b0e <__aeabi_fsub+0x342>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x296>
 8000a60:	e6ff      	b.n	8000862 <__aeabi_fsub+0x96>
 8000a62:	0030      	movs	r0, r6
 8000a64:	4460      	add	r0, ip
 8000a66:	0143      	lsls	r3, r0, #5
 8000a68:	d592      	bpl.n	8000990 <__aeabi_fsub+0x1c4>
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <__aeabi_fsub+0x348>)
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	4018      	ands	r0, r3
 8000a70:	e78e      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000a72:	4663      	mov	r3, ip
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d047      	beq.n	8000b08 <__aeabi_fsub+0x33c>
 8000a78:	1e4b      	subs	r3, r1, #1
 8000a7a:	2901      	cmp	r1, #1
 8000a7c:	d015      	beq.n	8000aaa <__aeabi_fsub+0x2de>
 8000a7e:	29ff      	cmp	r1, #255	; 0xff
 8000a80:	d02b      	beq.n	8000ada <__aeabi_fsub+0x30e>
 8000a82:	0019      	movs	r1, r3
 8000a84:	e74e      	b.n	8000924 <__aeabi_fsub+0x158>
 8000a86:	000c      	movs	r4, r1
 8000a88:	464b      	mov	r3, r9
 8000a8a:	003d      	movs	r5, r7
 8000a8c:	e784      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d18b      	bne.n	80009ac <__aeabi_fsub+0x1e0>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d192      	bne.n	80009be <__aeabi_fsub+0x1f2>
 8000a98:	2780      	movs	r7, #128	; 0x80
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	03ff      	lsls	r7, r7, #15
 8000aa0:	e6df      	b.n	8000862 <__aeabi_fsub+0x96>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	1af7      	subs	r7, r6, r3
 8000aa8:	e6bf      	b.n	800082a <__aeabi_fsub+0x5e>
 8000aaa:	0030      	movs	r0, r6
 8000aac:	4460      	add	r0, ip
 8000aae:	2501      	movs	r5, #1
 8000ab0:	0143      	lsls	r3, r0, #5
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_fsub+0x2ea>
 8000ab4:	e76c      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000ab6:	2502      	movs	r5, #2
 8000ab8:	e6f2      	b.n	80008a0 <__aeabi_fsub+0xd4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2501      	movs	r5, #1
 8000abe:	1b98      	subs	r0, r3, r6
 8000ac0:	e6ae      	b.n	8000820 <__aeabi_fsub+0x54>
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	4664      	mov	r4, ip
 8000ac6:	4660      	mov	r0, ip
 8000ac8:	40fc      	lsrs	r4, r7
 8000aca:	1bdf      	subs	r7, r3, r7
 8000acc:	40b8      	lsls	r0, r7
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	4320      	orrs	r0, r4
 8000ad4:	e79f      	b.n	8000a16 <__aeabi_fsub+0x24a>
 8000ad6:	0005      	movs	r5, r0
 8000ad8:	e75e      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000ada:	464b      	mov	r3, r9
 8000adc:	e771      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 8000ade:	2320      	movs	r3, #32
 8000ae0:	4665      	mov	r5, ip
 8000ae2:	4660      	mov	r0, ip
 8000ae4:	40cd      	lsrs	r5, r1
 8000ae6:	1a59      	subs	r1, r3, r1
 8000ae8:	4088      	lsls	r0, r1
 8000aea:	1e43      	subs	r3, r0, #1
 8000aec:	4198      	sbcs	r0, r3
 8000aee:	4328      	orrs	r0, r5
 8000af0:	e71c      	b.n	800092c <__aeabi_fsub+0x160>
 8000af2:	4663      	mov	r3, ip
 8000af4:	000c      	movs	r4, r1
 8000af6:	2501      	movs	r5, #1
 8000af8:	1af0      	subs	r0, r6, r3
 8000afa:	e691      	b.n	8000820 <__aeabi_fsub+0x54>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d095      	beq.n	8000a2c <__aeabi_fsub+0x260>
 8000b00:	000c      	movs	r4, r1
 8000b02:	464f      	mov	r7, r9
 8000b04:	2200      	movs	r2, #0
 8000b06:	e6ac      	b.n	8000862 <__aeabi_fsub+0x96>
 8000b08:	464b      	mov	r3, r9
 8000b0a:	000d      	movs	r5, r1
 8000b0c:	e744      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000b0e:	464f      	mov	r7, r9
 8000b10:	2200      	movs	r2, #0
 8000b12:	e6a6      	b.n	8000862 <__aeabi_fsub+0x96>
 8000b14:	fbffffff 	.word	0xfbffffff
 8000b18:	7dffffff 	.word	0x7dffffff
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x356>
 8000b20:	e736      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000b22:	2400      	movs	r4, #0
 8000b24:	2700      	movs	r7, #0
 8000b26:	e69c      	b.n	8000862 <__aeabi_fsub+0x96>

08000b28 <__aeabi_f2iz>:
 8000b28:	0241      	lsls	r1, r0, #9
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0fc3      	lsrs	r3, r0, #31
 8000b2e:	0a49      	lsrs	r1, r1, #9
 8000b30:	2000      	movs	r0, #0
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	2a7e      	cmp	r2, #126	; 0x7e
 8000b36:	dd03      	ble.n	8000b40 <__aeabi_f2iz+0x18>
 8000b38:	2a9d      	cmp	r2, #157	; 0x9d
 8000b3a:	dd02      	ble.n	8000b42 <__aeabi_f2iz+0x1a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <__aeabi_f2iz+0x3c>)
 8000b3e:	1898      	adds	r0, r3, r2
 8000b40:	4770      	bx	lr
 8000b42:	2080      	movs	r0, #128	; 0x80
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	4301      	orrs	r1, r0
 8000b48:	2a95      	cmp	r2, #149	; 0x95
 8000b4a:	dc07      	bgt.n	8000b5c <__aeabi_f2iz+0x34>
 8000b4c:	2096      	movs	r0, #150	; 0x96
 8000b4e:	1a82      	subs	r2, r0, r2
 8000b50:	40d1      	lsrs	r1, r2
 8000b52:	4248      	negs	r0, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_f2iz+0x18>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_f2iz+0x18>
 8000b5c:	3a96      	subs	r2, #150	; 0x96
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	e7f7      	b.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	7fffffff 	.word	0x7fffffff

08000b68 <__aeabi_i2f>:
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d013      	beq.n	8000b96 <__aeabi_i2f+0x2e>
 8000b6e:	17c3      	asrs	r3, r0, #31
 8000b70:	18c6      	adds	r6, r0, r3
 8000b72:	405e      	eors	r6, r3
 8000b74:	0fc4      	lsrs	r4, r0, #31
 8000b76:	0030      	movs	r0, r6
 8000b78:	f000 f886 	bl	8000c88 <__clzsi2>
 8000b7c:	239e      	movs	r3, #158	; 0x9e
 8000b7e:	0005      	movs	r5, r0
 8000b80:	1a1b      	subs	r3, r3, r0
 8000b82:	2b96      	cmp	r3, #150	; 0x96
 8000b84:	dc0f      	bgt.n	8000ba6 <__aeabi_i2f+0x3e>
 8000b86:	2808      	cmp	r0, #8
 8000b88:	dd01      	ble.n	8000b8e <__aeabi_i2f+0x26>
 8000b8a:	3d08      	subs	r5, #8
 8000b8c:	40ae      	lsls	r6, r5
 8000b8e:	0276      	lsls	r6, r6, #9
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e002      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	2600      	movs	r6, #0
 8000b9c:	05c0      	lsls	r0, r0, #23
 8000b9e:	4330      	orrs	r0, r6
 8000ba0:	07e4      	lsls	r4, r4, #31
 8000ba2:	4320      	orrs	r0, r4
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba6:	2b99      	cmp	r3, #153	; 0x99
 8000ba8:	dd0c      	ble.n	8000bc4 <__aeabi_i2f+0x5c>
 8000baa:	2205      	movs	r2, #5
 8000bac:	0031      	movs	r1, r6
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	40d1      	lsrs	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	0001      	movs	r1, r0
 8000bb6:	0030      	movs	r0, r6
 8000bb8:	311b      	adds	r1, #27
 8000bba:	4088      	lsls	r0, r1
 8000bbc:	1e41      	subs	r1, r0, #1
 8000bbe:	4188      	sbcs	r0, r1
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	0016      	movs	r6, r2
 8000bc4:	2d05      	cmp	r5, #5
 8000bc6:	dc12      	bgt.n	8000bee <__aeabi_i2f+0x86>
 8000bc8:	0031      	movs	r1, r6
 8000bca:	4f0d      	ldr	r7, [pc, #52]	; (8000c00 <__aeabi_i2f+0x98>)
 8000bcc:	4039      	ands	r1, r7
 8000bce:	0772      	lsls	r2, r6, #29
 8000bd0:	d009      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	4030      	ands	r0, r6
 8000bd6:	2804      	cmp	r0, #4
 8000bd8:	d005      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bda:	3104      	adds	r1, #4
 8000bdc:	014a      	lsls	r2, r1, #5
 8000bde:	d502      	bpl.n	8000be6 <__aeabi_i2f+0x7e>
 8000be0:	239f      	movs	r3, #159	; 0x9f
 8000be2:	4039      	ands	r1, r7
 8000be4:	1b5b      	subs	r3, r3, r5
 8000be6:	0189      	lsls	r1, r1, #6
 8000be8:	0a4e      	lsrs	r6, r1, #9
 8000bea:	b2d8      	uxtb	r0, r3
 8000bec:	e7d6      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bee:	1f6a      	subs	r2, r5, #5
 8000bf0:	4096      	lsls	r6, r2
 8000bf2:	0031      	movs	r1, r6
 8000bf4:	4f02      	ldr	r7, [pc, #8]	; (8000c00 <__aeabi_i2f+0x98>)
 8000bf6:	4039      	ands	r1, r7
 8000bf8:	0772      	lsls	r2, r6, #29
 8000bfa:	d0f4      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bfc:	e7e9      	b.n	8000bd2 <__aeabi_i2f+0x6a>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	fbffffff 	.word	0xfbffffff

08000c04 <__aeabi_ui2f>:
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	1e05      	subs	r5, r0, #0
 8000c08:	d00e      	beq.n	8000c28 <__aeabi_ui2f+0x24>
 8000c0a:	f000 f83d 	bl	8000c88 <__clzsi2>
 8000c0e:	239e      	movs	r3, #158	; 0x9e
 8000c10:	0004      	movs	r4, r0
 8000c12:	1a1b      	subs	r3, r3, r0
 8000c14:	2b96      	cmp	r3, #150	; 0x96
 8000c16:	dc0c      	bgt.n	8000c32 <__aeabi_ui2f+0x2e>
 8000c18:	2808      	cmp	r0, #8
 8000c1a:	dd01      	ble.n	8000c20 <__aeabi_ui2f+0x1c>
 8000c1c:	3c08      	subs	r4, #8
 8000c1e:	40a5      	lsls	r5, r4
 8000c20:	026d      	lsls	r5, r5, #9
 8000c22:	0a6d      	lsrs	r5, r5, #9
 8000c24:	b2d8      	uxtb	r0, r3
 8000c26:	e001      	b.n	8000c2c <__aeabi_ui2f+0x28>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	05c0      	lsls	r0, r0, #23
 8000c2e:	4328      	orrs	r0, r5
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
 8000c32:	2b99      	cmp	r3, #153	; 0x99
 8000c34:	dd09      	ble.n	8000c4a <__aeabi_ui2f+0x46>
 8000c36:	0002      	movs	r2, r0
 8000c38:	0029      	movs	r1, r5
 8000c3a:	321b      	adds	r2, #27
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	1e4a      	subs	r2, r1, #1
 8000c40:	4191      	sbcs	r1, r2
 8000c42:	2205      	movs	r2, #5
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	40d5      	lsrs	r5, r2
 8000c48:	430d      	orrs	r5, r1
 8000c4a:	2c05      	cmp	r4, #5
 8000c4c:	dc12      	bgt.n	8000c74 <__aeabi_ui2f+0x70>
 8000c4e:	0029      	movs	r1, r5
 8000c50:	4e0c      	ldr	r6, [pc, #48]	; (8000c84 <__aeabi_ui2f+0x80>)
 8000c52:	4031      	ands	r1, r6
 8000c54:	076a      	lsls	r2, r5, #29
 8000c56:	d009      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c58:	200f      	movs	r0, #15
 8000c5a:	4028      	ands	r0, r5
 8000c5c:	2804      	cmp	r0, #4
 8000c5e:	d005      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c60:	3104      	adds	r1, #4
 8000c62:	014a      	lsls	r2, r1, #5
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_ui2f+0x68>
 8000c66:	239f      	movs	r3, #159	; 0x9f
 8000c68:	4031      	ands	r1, r6
 8000c6a:	1b1b      	subs	r3, r3, r4
 8000c6c:	0189      	lsls	r1, r1, #6
 8000c6e:	0a4d      	lsrs	r5, r1, #9
 8000c70:	b2d8      	uxtb	r0, r3
 8000c72:	e7db      	b.n	8000c2c <__aeabi_ui2f+0x28>
 8000c74:	1f62      	subs	r2, r4, #5
 8000c76:	4095      	lsls	r5, r2
 8000c78:	0029      	movs	r1, r5
 8000c7a:	4e02      	ldr	r6, [pc, #8]	; (8000c84 <__aeabi_ui2f+0x80>)
 8000c7c:	4031      	ands	r1, r6
 8000c7e:	076a      	lsls	r2, r5, #29
 8000c80:	d0f4      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c82:	e7e9      	b.n	8000c58 <__aeabi_ui2f+0x54>
 8000c84:	fbffffff 	.word	0xfbffffff

08000c88 <__clzsi2>:
 8000c88:	211c      	movs	r1, #28
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d301      	bcc.n	8000c96 <__clzsi2+0xe>
 8000c92:	0c00      	lsrs	r0, r0, #16
 8000c94:	3910      	subs	r1, #16
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	d301      	bcc.n	8000ca0 <__clzsi2+0x18>
 8000c9c:	0a00      	lsrs	r0, r0, #8
 8000c9e:	3908      	subs	r1, #8
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d301      	bcc.n	8000caa <__clzsi2+0x22>
 8000ca6:	0900      	lsrs	r0, r0, #4
 8000ca8:	3904      	subs	r1, #4
 8000caa:	a202      	add	r2, pc, #8	; (adr r2, 8000cb4 <__clzsi2+0x2c>)
 8000cac:	5c10      	ldrb	r0, [r2, r0]
 8000cae:	1840      	adds	r0, r0, r1
 8000cb0:	4770      	bx	lr
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	02020304 	.word	0x02020304
 8000cb8:	01010101 	.word	0x01010101
	...

08000cc4 <bytestowrite>:
  * @param  size: Size of the data.
  * @param  offset: Start byte offset in the page.
  * @retval Number of bytes remaining to write.
  */
static uint16_t bytestowrite(uint16_t size, uint16_t offset)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	1c0a      	adds	r2, r1, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
  if ((size + offset) < PAGE_SIZE) return size;
 8000cd6:	1dbb      	adds	r3, r7, #6
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	18d3      	adds	r3, r2, r3
 8000ce0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce2:	dc02      	bgt.n	8000cea <bytestowrite+0x26>
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	e004      	b.n	8000cf4 <bytestowrite+0x30>
  else return PAGE_SIZE - offset;
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29b      	uxth	r3, r3
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <EEPROM_Write>:
  float float_variable = thing.a;
  return float_variable;
}

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfe:	b08f      	sub	sp, #60	; 0x3c
 8000d00:	af04      	add	r7, sp, #16
 8000d02:	0004      	movs	r4, r0
 8000d04:	0008      	movs	r0, r1
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	0019      	movs	r1, r3
 8000d0a:	250e      	movs	r5, #14
 8000d0c:	197b      	adds	r3, r7, r5
 8000d0e:	1c22      	adds	r2, r4, #0
 8000d10:	801a      	strh	r2, [r3, #0]
 8000d12:	240c      	movs	r4, #12
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	1c02      	adds	r2, r0, #0
 8000d18:	801a      	strh	r2, [r3, #0]
 8000d1a:	1dbb      	adds	r3, r7, #6
 8000d1c:	1c0a      	adds	r2, r1, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
  // Find out the number of bit, where the page addressing starts
  int paddrposition = log(PAGE_SIZE) / log(2);
 8000d20:	2306      	movs	r3, #6
 8000d22:	61fb      	str	r3, [r7, #28]

  // Calculate the start page and the end page
  uint16_t startPage = page;
 8000d24:	2326      	movs	r3, #38	; 0x26
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	197a      	adds	r2, r7, r5
 8000d2a:	8812      	ldrh	r2, [r2, #0]
 8000d2c:	801a      	strh	r2, [r3, #0]
  uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da00      	bge.n	8000d3e <EEPROM_Write+0x42>
 8000d3c:	333f      	adds	r3, #63	; 0x3f
 8000d3e:	119b      	asrs	r3, r3, #6
 8000d40:	b299      	uxth	r1, r3
 8000d42:	201a      	movs	r0, #26
 8000d44:	183b      	adds	r3, r7, r0
 8000d46:	220e      	movs	r2, #14
 8000d48:	18ba      	adds	r2, r7, r2
 8000d4a:	8812      	ldrh	r2, [r2, #0]
 8000d4c:	188a      	adds	r2, r1, r2
 8000d4e:	801a      	strh	r2, [r3, #0]

  // Number of pages to be written
  uint16_t numofpages = (endPage - startPage) + 1;
 8000d50:	183a      	adds	r2, r7, r0
 8000d52:	2326      	movs	r3, #38	; 0x26
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	8812      	ldrh	r2, [r2, #0]
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	2318      	movs	r3, #24
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	3201      	adds	r2, #1
 8000d64:	801a      	strh	r2, [r3, #0]
  uint16_t pos = 0;
 8000d66:	2324      	movs	r3, #36	; 0x24
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]

  // Write the data
  for (int i = 0; i < numofpages; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
 8000d72:	e04d      	b.n	8000e10 <EEPROM_Write+0x114>
  {
        // Calculate the address of the memory location
    // Here we add the page address with the byte address
    uint16_t MemAddress = startPage << paddrposition | offset;
 8000d74:	2626      	movs	r6, #38	; 0x26
 8000d76:	19bb      	adds	r3, r7, r6
 8000d78:	881a      	ldrh	r2, [r3, #0]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	210c      	movs	r1, #12
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2000      	movs	r0, #0
 8000d88:	5e1b      	ldrsh	r3, [r3, r0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	2316      	movs	r3, #22
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	801a      	strh	r2, [r3, #0]
    uint16_t bytesremaining = bytestowrite(size, offset);  // Calculate the remaining bytes to be written
 8000d94:	2514      	movs	r5, #20
 8000d96:	197c      	adds	r4, r7, r5
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	881a      	ldrh	r2, [r3, #0]
 8000d9c:	1dbb      	adds	r3, r7, #6
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff ff8e 	bl	8000cc4 <bytestowrite>
 8000da8:	0003      	movs	r3, r0
 8000daa:	8023      	strh	r3, [r4, #0]

    HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // Write the data to the EEPROM
 8000dac:	2424      	movs	r4, #36	; 0x24
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	2216      	movs	r2, #22
 8000db8:	18ba      	adds	r2, r7, r2
 8000dba:	8811      	ldrh	r1, [r2, #0]
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <EEPROM_Write+0x12c>)
 8000dbe:	22fa      	movs	r2, #250	; 0xfa
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	9202      	str	r2, [sp, #8]
 8000dc4:	197a      	adds	r2, r7, r5
 8000dc6:	8812      	ldrh	r2, [r2, #0]
 8000dc8:	9201      	str	r2, [sp, #4]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2302      	movs	r3, #2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	21a0      	movs	r1, #160	; 0xa0
 8000dd2:	f002 f88b 	bl	8002eec <HAL_I2C_Mem_Write>

    startPage += 1;  // Increment the page, so that a new page address can be selected for further write
 8000dd6:	19bb      	adds	r3, r7, r6
 8000dd8:	19ba      	adds	r2, r7, r6
 8000dda:	8812      	ldrh	r2, [r2, #0]
 8000ddc:	3201      	adds	r2, #1
 8000dde:	801a      	strh	r2, [r3, #0]
    offset = 0;   // Since we will be writing to a new page, so offset will be 0
 8000de0:	210c      	movs	r1, #12
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	801a      	strh	r2, [r3, #0]
    size = size - bytesremaining;  // Reduce the size of the bytes
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	1db9      	adds	r1, r7, #6
 8000dec:	197a      	adds	r2, r7, r5
 8000dee:	8809      	ldrh	r1, [r1, #0]
 8000df0:	8812      	ldrh	r2, [r2, #0]
 8000df2:	1a8a      	subs	r2, r1, r2
 8000df4:	801a      	strh	r2, [r3, #0]
    pos += bytesremaining;  // Update the position for the data buffer
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	1939      	adds	r1, r7, r4
 8000dfa:	197a      	adds	r2, r7, r5
 8000dfc:	8809      	ldrh	r1, [r1, #0]
 8000dfe:	8812      	ldrh	r2, [r2, #0]
 8000e00:	188a      	adds	r2, r1, r2
 8000e02:	801a      	strh	r2, [r3, #0]

    HAL_Delay(5);  // Write cycle delay (5ms)
 8000e04:	2005      	movs	r0, #5
 8000e06:	f001 f883 	bl	8001f10 <HAL_Delay>
  for (int i = 0; i < numofpages; i++)
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	2318      	movs	r3, #24
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbab      	blt.n	8000d74 <EEPROM_Write+0x78>
  }
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00b      	add	sp, #44	; 0x2c
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	200000dc 	.word	0x200000dc

08000e2c <EEPROM_Read>:
  * @param  data: Pointer to the data to write in bytes.
  * @param  size: Size of the data.
  * @retval None.
  */
void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b08f      	sub	sp, #60	; 0x3c
 8000e30:	af04      	add	r7, sp, #16
 8000e32:	0004      	movs	r4, r0
 8000e34:	0008      	movs	r0, r1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	0019      	movs	r1, r3
 8000e3a:	250e      	movs	r5, #14
 8000e3c:	197b      	adds	r3, r7, r5
 8000e3e:	1c22      	adds	r2, r4, #0
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	240c      	movs	r4, #12
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	1dbb      	adds	r3, r7, #6
 8000e4c:	1c0a      	adds	r2, r1, #0
 8000e4e:	801a      	strh	r2, [r3, #0]
  int paddrposition = log(PAGE_SIZE) / log(2);
 8000e50:	2306      	movs	r3, #6
 8000e52:	61fb      	str	r3, [r7, #28]

  uint16_t startPage = page;
 8000e54:	2326      	movs	r3, #38	; 0x26
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	197a      	adds	r2, r7, r5
 8000e5a:	8812      	ldrh	r2, [r2, #0]
 8000e5c:	801a      	strh	r2, [r3, #0]
  uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000e5e:	1dbb      	adds	r3, r7, #6
 8000e60:	881a      	ldrh	r2, [r3, #0]
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	18d3      	adds	r3, r2, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da00      	bge.n	8000e6e <EEPROM_Read+0x42>
 8000e6c:	333f      	adds	r3, #63	; 0x3f
 8000e6e:	119b      	asrs	r3, r3, #6
 8000e70:	b299      	uxth	r1, r3
 8000e72:	201a      	movs	r0, #26
 8000e74:	183b      	adds	r3, r7, r0
 8000e76:	220e      	movs	r2, #14
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	8812      	ldrh	r2, [r2, #0]
 8000e7c:	188a      	adds	r2, r1, r2
 8000e7e:	801a      	strh	r2, [r3, #0]

  uint16_t numofpages = (endPage - startPage) + 1;
 8000e80:	183a      	adds	r2, r7, r0
 8000e82:	2326      	movs	r3, #38	; 0x26
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	8812      	ldrh	r2, [r2, #0]
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	2318      	movs	r3, #24
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	3201      	adds	r2, #1
 8000e94:	801a      	strh	r2, [r3, #0]
  uint16_t pos = 0;
 8000e96:	2324      	movs	r3, #36	; 0x24
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	801a      	strh	r2, [r3, #0]

  for (int i = 0; i < numofpages; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
 8000ea2:	e04a      	b.n	8000f3a <EEPROM_Read+0x10e>
  {
    uint16_t MemAddress = startPage << paddrposition | offset;
 8000ea4:	2626      	movs	r6, #38	; 0x26
 8000ea6:	19bb      	adds	r3, r7, r6
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	210c      	movs	r1, #12
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	5e1b      	ldrsh	r3, [r3, r0]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	2316      	movs	r3, #22
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	801a      	strh	r2, [r3, #0]
    uint16_t bytesremaining = bytestowrite(size, offset);
 8000ec4:	2514      	movs	r5, #20
 8000ec6:	197c      	adds	r4, r7, r5
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	881a      	ldrh	r2, [r3, #0]
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fef6 	bl	8000cc4 <bytestowrite>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	8023      	strh	r3, [r4, #0]
    HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000edc:	2424      	movs	r4, #36	; 0x24
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	18d3      	adds	r3, r2, r3
 8000ee6:	2216      	movs	r2, #22
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	8811      	ldrh	r1, [r2, #0]
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <EEPROM_Read+0x124>)
 8000eee:	22fa      	movs	r2, #250	; 0xfa
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	9202      	str	r2, [sp, #8]
 8000ef4:	197a      	adds	r2, r7, r5
 8000ef6:	8812      	ldrh	r2, [r2, #0]
 8000ef8:	9201      	str	r2, [sp, #4]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2302      	movs	r3, #2
 8000efe:	000a      	movs	r2, r1
 8000f00:	21a0      	movs	r1, #160	; 0xa0
 8000f02:	f002 f921 	bl	8003148 <HAL_I2C_Mem_Read>
    startPage += 1;
 8000f06:	19bb      	adds	r3, r7, r6
 8000f08:	19ba      	adds	r2, r7, r6
 8000f0a:	8812      	ldrh	r2, [r2, #0]
 8000f0c:	3201      	adds	r2, #1
 8000f0e:	801a      	strh	r2, [r3, #0]
    offset = 0;
 8000f10:	210c      	movs	r1, #12
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	801a      	strh	r2, [r3, #0]
    size = size - bytesremaining;
 8000f18:	1dbb      	adds	r3, r7, #6
 8000f1a:	1db9      	adds	r1, r7, #6
 8000f1c:	197a      	adds	r2, r7, r5
 8000f1e:	8809      	ldrh	r1, [r1, #0]
 8000f20:	8812      	ldrh	r2, [r2, #0]
 8000f22:	1a8a      	subs	r2, r1, r2
 8000f24:	801a      	strh	r2, [r3, #0]
    pos += bytesremaining;
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	1939      	adds	r1, r7, r4
 8000f2a:	197a      	adds	r2, r7, r5
 8000f2c:	8809      	ldrh	r1, [r1, #0]
 8000f2e:	8812      	ldrh	r2, [r2, #0]
 8000f30:	188a      	adds	r2, r1, r2
 8000f32:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < numofpages; i++)
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	3301      	adds	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
 8000f3a:	2318      	movs	r3, #24
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	6a3a      	ldr	r2, [r7, #32]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbae      	blt.n	8000ea4 <EEPROM_Read+0x78>
  }
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b00b      	add	sp, #44	; 0x2c
 8000f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f50:	200000dc 	.word	0x200000dc

08000f54 <EEPROM_PageErase>:
  * @param  page: Number of page to erase
  *         In order to erase multiple pages, just use this function in the for loop
  * @retval None
  */
void EEPROM_PageErase(uint16_t page)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b098      	sub	sp, #96	; 0x60
 8000f58:	af04      	add	r7, sp, #16
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	1dbb      	adds	r3, r7, #6
 8000f5e:	801a      	strh	r2, [r3, #0]
  // Calculate the memory address based on the page number
  int paddrposition = log(PAGE_SIZE) / log(2);
 8000f60:	2306      	movs	r3, #6
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint16_t MemAddress = page << paddrposition;
 8000f64:	1dbb      	adds	r3, r7, #6
 8000f66:	881a      	ldrh	r2, [r3, #0]
 8000f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	244a      	movs	r4, #74	; 0x4a
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	801a      	strh	r2, [r3, #0]

  // Create a buffer to store the reset values
  uint8_t data[PAGE_SIZE];
  memset(data, 0xff, PAGE_SIZE);
 8000f72:	2508      	movs	r5, #8
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	2240      	movs	r2, #64	; 0x40
 8000f78:	21ff      	movs	r1, #255	; 0xff
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f004 fea8 	bl	8005cd0 <memset>

  // Write the data to the EEPROM
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	881a      	ldrh	r2, [r3, #0]
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <EEPROM_PageErase+0x58>)
 8000f86:	23fa      	movs	r3, #250	; 0xfa
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2340      	movs	r3, #64	; 0x40
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	197b      	adds	r3, r7, r5
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2302      	movs	r3, #2
 8000f96:	21a0      	movs	r1, #160	; 0xa0
 8000f98:	f001 ffa8 	bl	8002eec <HAL_I2C_Mem_Write>

  HAL_Delay(5);  // Write cycle delay (5ms)
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f000 ffb7 	bl	8001f10 <HAL_Delay>
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b014      	add	sp, #80	; 0x50
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	200000dc 	.word	0x200000dc

08000fb0 <LDR_Init>:
static float c;

/**
 * @brief Initialize the LDR with calibration constants
 */
void LDR_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    m = 2.675f;
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <LDR_Init+0x18>)
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <LDR_Init+0x1c>)
 8000fb8:	601a      	str	r2, [r3, #0]
    c = -66.88f;
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <LDR_Init+0x20>)
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <LDR_Init+0x24>)
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	20000094 	.word	0x20000094
 8000fcc:	402b3333 	.word	0x402b3333
 8000fd0:	20000098 	.word	0x20000098
 8000fd4:	c285c28f 	.word	0xc285c28f

08000fd8 <LDR_ReadADC>:
/**
 * @brief Read ADC value from the LDR
 * @param hadc Pointer to an ADC_HandleTypeDef structure that contains the configuration information for the specified ADC
 * @return 32-bit unsigned integer ADC value
 */
uint32_t LDR_ReadADC(ADC_HandleTypeDef *hadc) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    uint32_t adc_value;

    // Start ADC conversion
    HAL_ADC_Start(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 f8f8 	bl	80021d8 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	210a      	movs	r1, #10
 8000fec:	0018      	movs	r0, r3
 8000fee:	f001 f987 	bl	8002300 <HAL_ADC_PollForConversion>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d105      	bne.n	8001002 <LDR_ReadADC+0x2a>
        // Read ADC value
        adc_value = HAL_ADC_GetValue(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fa19 	bl	8002430 <HAL_ADC_GetValue>
 8000ffe:	0003      	movs	r3, r0
 8001000:	60fb      	str	r3, [r7, #12]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	0018      	movs	r0, r3
 8001006:	f001 f93b 	bl	8002280 <HAL_ADC_Stop>

    return adc_value;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}

08001014 <LDR_ReadAnalogLightIntensity>:
/**
 * @brief Read analog light intensity using the LDR
 * @param hadc Pointer to an ADC_HandleTypeDef structure that contains the configuration information for the specified ADC
 * @return Floating-point light intensity value
 */
float LDR_ReadAnalogLightIntensity(ADC_HandleTypeDef *hadc) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    uint32_t adc_value = LDR_ReadADC(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff ffda 	bl	8000fd8 <LDR_ReadADC>
 8001024:	0003      	movs	r3, r0
 8001026:	60fb      	str	r3, [r7, #12]
    return m * adc_value + c;
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff fdeb 	bl	8000c04 <__aeabi_ui2f>
 800102e:	1c02      	adds	r2, r0, #0
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <LDR_ReadAnalogLightIntensity+0x44>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1c19      	adds	r1, r3, #0
 8001036:	1c10      	adds	r0, r2, #0
 8001038:	f7ff faa2 	bl	8000580 <__aeabi_fmul>
 800103c:	1c03      	adds	r3, r0, #0
 800103e:	1c1a      	adds	r2, r3, #0
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <LDR_ReadAnalogLightIntensity+0x48>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1c19      	adds	r1, r3, #0
 8001046:	1c10      	adds	r0, r2, #0
 8001048:	f7ff f8fc 	bl	8000244 <__aeabi_fadd>
 800104c:	1c03      	adds	r3, r0, #0
}
 800104e:	1c18      	adds	r0, r3, #0
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000094 	.word	0x20000094
 800105c:	20000098 	.word	0x20000098

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 fef0 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f862 	bl	8001130 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fa58 	bl	8001520 <MX_GPIO_Init>
  MX_ADC_Init();
 8001070:	f000 f8d2 	bl	8001218 <MX_ADC_Init>
  MX_I2C1_Init();
 8001074:	f000 f92c 	bl	80012d0 <MX_I2C1_Init>
  MX_RTC_Init();
 8001078:	f000 f96a 	bl	8001350 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800107c:	f000 fa20 	bl	80014c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001080:	f000 f9c8 	bl	8001414 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Set calibration constants for the LDR
  LDR_Init();
 8001084:	f7ff ff94 	bl	8000fb0 <LDR_Init>

  //Set Time and Date
    status = RTC_SetTime(&hrtc, hours, minutes, seconds);
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <main+0x98>)
 800108a:	7819      	ldrb	r1, [r3, #0]
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <main+0x9c>)
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <main+0xa0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <main+0xa4>)
 8001096:	f000 fbec 	bl	8001872 <RTC_SetTime>
 800109a:	0003      	movs	r3, r0
 800109c:	001a      	movs	r2, r3
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <main+0xa8>)
 80010a0:	701a      	strb	r2, [r3, #0]

    if (status != HAL_OK) {
        // Handle error will be implemented later
    }

    RTC_SetDate(&hrtc, day, month, year);
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <main+0xac>)
 80010a4:	7819      	ldrb	r1, [r3, #0]
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <main+0xb0>)
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0xb4>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <main+0xa4>)
 80010b0:	f000 fc45 	bl	800193e <RTC_SetDate>

    //Initiliaze temperature sensor
    if (TMP102_Init(&hi2c1) != HAL_OK) {
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <main+0xb8>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fe30 	bl	8001d1c <TMP102_Init>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d007      	beq.n	80010d0 <main+0x70>
          // Handle error (e.g., turn on an LED or print a message)
    	  strcpy((char*)temp_string,"Error Tx\r\n");
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <main+0xbc>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <main+0xc0>)
 80010c4:	ca03      	ldmia	r2!, {r0, r1}
 80010c6:	c303      	stmia	r3!, {r0, r1}
 80010c8:	8811      	ldrh	r1, [r2, #0]
 80010ca:	8019      	strh	r1, [r3, #0]
 80010cc:	7892      	ldrb	r2, [r2, #2]
 80010ce:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Back -up for demo in case interrupts dont work
	  //Remember to implement function to update the usb_plugged flag
	  check_GPIO_state();
 80010d0:	f000 fba8 	bl	8001824 <check_GPIO_state>
	  if(usb_plugged){
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <main+0xc4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <main+0x8a>
		  HAL_Delay(30000);
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <main+0xc8>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 ff16 	bl	8001f10 <HAL_Delay>
		  read_and_transmit_all_data();
 80010e4:	f000 fb58 	bl	8001798 <read_and_transmit_all_data>
 80010e8:	e001      	b.n	80010ee <main+0x8e>
	  }
	  else{
		  read_and_store_data();
 80010ea:	f000 fa73 	bl	80015d4 <read_and_store_data>
	  }

	  HAL_Delay(10000);
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <main+0xcc>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 ff0d 	bl	8001f10 <HAL_Delay>
	  check_GPIO_state();
 80010f6:	e7eb      	b.n	80010d0 <main+0x70>
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000001 	.word	0x20000001
 8001100:	20000220 	.word	0x20000220
 8001104:	20000130 	.word	0x20000130
 8001108:	2000025a 	.word	0x2000025a
 800110c:	20000002 	.word	0x20000002
 8001110:	20000003 	.word	0x20000003
 8001114:	20000004 	.word	0x20000004
 8001118:	200000dc 	.word	0x200000dc
 800111c:	20000244 	.word	0x20000244
 8001120:	080065cc 	.word	0x080065cc
 8001124:	2000025f 	.word	0x2000025f
 8001128:	00007530 	.word	0x00007530
 800112c:	00002710 	.word	0x00002710

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b097      	sub	sp, #92	; 0x5c
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	2428      	movs	r4, #40	; 0x28
 8001138:	193b      	adds	r3, r7, r4
 800113a:	0018      	movs	r0, r3
 800113c:	2330      	movs	r3, #48	; 0x30
 800113e:	001a      	movs	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	f004 fdc5 	bl	8005cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001146:	2318      	movs	r3, #24
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	0018      	movs	r0, r3
 800114c:	2310      	movs	r3, #16
 800114e:	001a      	movs	r2, r3
 8001150:	2100      	movs	r1, #0
 8001152:	f004 fdbd 	bl	8005cd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	0018      	movs	r0, r3
 800115a:	2314      	movs	r3, #20
 800115c:	001a      	movs	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	f004 fdb6 	bl	8005cd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001164:	0021      	movs	r1, r4
 8001166:	187b      	adds	r3, r7, r1
 8001168:	221a      	movs	r2, #26
 800116a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2201      	movs	r2, #1
 8001170:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2201      	movs	r2, #1
 8001176:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2210      	movs	r2, #16
 800117c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2210      	movs	r2, #16
 8001182:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2201      	movs	r2, #1
 8001188:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2202      	movs	r2, #2
 800118e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	22a0      	movs	r2, #160	; 0xa0
 800119a:	0392      	lsls	r2, r2, #14
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2200      	movs	r2, #0
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	0018      	movs	r0, r3
 80011a8:	f002 fc94 	bl	8003ad4 <HAL_RCC_OscConfig>
 80011ac:	1e03      	subs	r3, r0, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011b0:	f000 fb5a 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	2118      	movs	r1, #24
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2202      	movs	r2, #2
 80011c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2101      	movs	r1, #1
 80011d2:	0018      	movs	r0, r3
 80011d4:	f002 ff98 	bl	8004108 <HAL_RCC_ClockConfig>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011dc:	f000 fb44 	bl	8001868 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <SystemClock_Config+0xe4>)
 80011e4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	0018      	movs	r0, r3
 80011fe:	f003 f8c7 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001206:	f000 fb2f 	bl	8001868 <Error_Handler>
  }
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b017      	add	sp, #92	; 0x5c
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	00010021 	.word	0x00010021

08001218 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	0018      	movs	r0, r3
 8001222:	230c      	movs	r3, #12
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f004 fd52 	bl	8005cd0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MX_ADC_Init+0xb0>)
 800122e:	4a27      	ldr	r2, [pc, #156]	; (80012cc <MX_ADC_Init+0xb4>)
 8001230:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_ADC_Init+0xb0>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001246:	2201      	movs	r2, #1
 8001248:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_ADC_Init+0xb0>)
 800124c:	2204      	movs	r2, #4
 800124e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001258:	2200      	movs	r2, #0
 800125a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_ADC_Init+0xb0>)
 800125e:	2201      	movs	r2, #1
 8001260:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001264:	2200      	movs	r2, #0
 8001266:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_ADC_Init+0xb0>)
 800126a:	22c2      	movs	r2, #194	; 0xc2
 800126c:	32ff      	adds	r2, #255	; 0xff
 800126e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001278:	2224      	movs	r2, #36	; 0x24
 800127a:	2100      	movs	r1, #0
 800127c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001280:	2201      	movs	r2, #1
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_ADC_Init+0xb0>)
 8001286:	0018      	movs	r0, r3
 8001288:	f000 fe66 	bl	8001f58 <HAL_ADC_Init>
 800128c:	1e03      	subs	r3, r0, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001290:	f000 faea 	bl	8001868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2205      	movs	r2, #5
 8001298:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	0152      	lsls	r2, r2, #5
 80012a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	0552      	lsls	r2, r2, #21
 80012a8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012aa:	1d3a      	adds	r2, r7, #4
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_ADC_Init+0xb0>)
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f001 f8c9 	bl	8002448 <HAL_ADC_ConfigChannel>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80012ba:	f000 fad5 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b004      	add	sp, #16
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	2000009c 	.word	0x2000009c
 80012cc:	40012400 	.word	0x40012400

080012d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_I2C1_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <MX_I2C1_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_I2C1_Init+0x74>)
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <MX_I2C1_Init+0x7c>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_I2C1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_I2C1_Init+0x74>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_I2C1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_I2C1_Init+0x74>)
 800130c:	0018      	movs	r0, r3
 800130e:	f001 fd57 	bl	8002dc0 <HAL_I2C_Init>
 8001312:	1e03      	subs	r3, r0, #0
 8001314:	d001      	beq.n	800131a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001316:	f000 faa7 	bl	8001868 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_I2C1_Init+0x74>)
 800131c:	2100      	movs	r1, #0
 800131e:	0018      	movs	r0, r3
 8001320:	f002 fb40 	bl	80039a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001328:	f000 fa9e 	bl	8001868 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <MX_I2C1_Init+0x74>)
 800132e:	2100      	movs	r1, #0
 8001330:	0018      	movs	r0, r3
 8001332:	f002 fb83 	bl	8003a3c <HAL_I2CEx_ConfigDigitalFilter>
 8001336:	1e03      	subs	r3, r0, #0
 8001338:	d001      	beq.n	800133e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 fa95 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000dc 	.word	0x200000dc
 8001348:	40005400 	.word	0x40005400
 800134c:	2000090e 	.word	0x2000090e

08001350 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	0018      	movs	r0, r3
 800135a:	2314      	movs	r3, #20
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f004 fcb6 	bl	8005cd0 <memset>
  RTC_DateTypeDef sDate = {0};
 8001364:	003b      	movs	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_RTC_Init+0xbc>)
 800136c:	4a28      	ldr	r2, [pc, #160]	; (8001410 <MX_RTC_Init+0xc0>)
 800136e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_RTC_Init+0xbc>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_RTC_Init+0xbc>)
 8001378:	227f      	movs	r2, #127	; 0x7f
 800137a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <MX_RTC_Init+0xbc>)
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_RTC_Init+0xbc>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_RTC_Init+0xbc>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_RTC_Init+0xbc>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_RTC_Init+0xbc>)
 8001396:	0018      	movs	r0, r3
 8001398:	f003 f8d8 	bl	800454c <HAL_RTC_Init>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80013a0:	f000 fa62 	bl	8001868 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013c2:	1d39      	adds	r1, r7, #4
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_RTC_Init+0xbc>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	0018      	movs	r0, r3
 80013ca:	f003 f957 	bl	800467c <HAL_RTC_SetTime>
 80013ce:	1e03      	subs	r3, r0, #0
 80013d0:	d001      	beq.n	80013d6 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80013d2:	f000 fa49 	bl	8001868 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013d6:	003b      	movs	r3, r7
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80013dc:	003b      	movs	r3, r7
 80013de:	2201      	movs	r2, #1
 80013e0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80013e2:	003b      	movs	r3, r7
 80013e4:	2201      	movs	r2, #1
 80013e6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80013e8:	003b      	movs	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013ee:	0039      	movs	r1, r7
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_RTC_Init+0xbc>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	0018      	movs	r0, r3
 80013f6:	f003 fa45 	bl	8004884 <HAL_RTC_SetDate>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d001      	beq.n	8001402 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80013fe:	f000 fa33 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b006      	add	sp, #24
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	20000130 	.word	0x20000130
 8001410:	40002800 	.word	0x40002800

08001414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	2308      	movs	r3, #8
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	0018      	movs	r0, r3
 8001420:	2310      	movs	r3, #16
 8001422:	001a      	movs	r2, r3
 8001424:	2100      	movs	r1, #0
 8001426:	f004 fc53 	bl	8005cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142a:	003b      	movs	r3, r7
 800142c:	0018      	movs	r0, r3
 800142e:	2308      	movs	r3, #8
 8001430:	001a      	movs	r2, r3
 8001432:	2100      	movs	r1, #0
 8001434:	f004 fc4c 	bl	8005cd0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_TIM2_Init+0xa0>)
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	05d2      	lsls	r2, r2, #23
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_TIM2_Init+0xa0>)
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <MX_TIM2_Init+0xa4>)
 8001444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_TIM2_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 144000;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_TIM2_Init+0xa0>)
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <MX_TIM2_Init+0xa8>)
 8001450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_TIM2_Init+0xa0>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_TIM2_Init+0xa0>)
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM2_Init+0xa0>)
 8001460:	0018      	movs	r0, r3
 8001462:	f003 fbc3 	bl	8004bec <HAL_TIM_Base_Init>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800146a:	f000 f9fd 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	2108      	movs	r1, #8
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	0152      	lsls	r2, r2, #5
 8001476:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001478:	187a      	adds	r2, r7, r1
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_TIM2_Init+0xa0>)
 800147c:	0011      	movs	r1, r2
 800147e:	0018      	movs	r0, r3
 8001480:	f003 fd1a 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001488:	f000 f9ee 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	003b      	movs	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	003b      	movs	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001498:	003a      	movs	r2, r7
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_TIM2_Init+0xa0>)
 800149c:	0011      	movs	r1, r2
 800149e:	0018      	movs	r0, r3
 80014a0:	f003 ff20 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80014a8:	f000 f9de 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b006      	add	sp, #24
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000150 	.word	0x20000150
 80014b8:	00002710 	.word	0x00002710
 80014bc:	00023280 	.word	0x00023280

080014c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <MX_USART1_UART_Init+0x5c>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014cc:	2296      	movs	r2, #150	; 0x96
 80014ce:	0212      	lsls	r2, r2, #8
 80014d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USART1_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <MX_USART1_UART_Init+0x58>)
 8001504:	0018      	movs	r0, r3
 8001506:	f003 ff5b 	bl	80053c0 <HAL_UART_Init>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 f9ab 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000198 	.word	0x20000198
 800151c:	40013800 	.word	0x40013800

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b08b      	sub	sp, #44	; 0x2c
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	2414      	movs	r4, #20
 8001528:	193b      	adds	r3, r7, r4
 800152a:	0018      	movs	r0, r3
 800152c:	2314      	movs	r3, #20
 800152e:	001a      	movs	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	f004 fbcd 	bl	8005cd0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <MX_GPIO_Init+0xac>)
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_GPIO_Init+0xac>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	0309      	lsls	r1, r1, #12
 8001540:	430a      	orrs	r2, r1
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_GPIO_Init+0xac>)
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	031b      	lsls	r3, r3, #12
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_GPIO_Init+0xac>)
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_GPIO_Init+0xac>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	03c9      	lsls	r1, r1, #15
 800155c:	430a      	orrs	r2, r1
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_GPIO_Init+0xac>)
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	03db      	lsls	r3, r3, #15
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_GPIO_Init+0xac>)
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_GPIO_Init+0xac>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0289      	lsls	r1, r1, #10
 8001578:	430a      	orrs	r2, r1
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_GPIO_Init+0xac>)
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	029b      	lsls	r3, r3, #10
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_GPIO_Init+0xac>)
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_GPIO_Init+0xac>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	02c9      	lsls	r1, r1, #11
 8001594:	430a      	orrs	r2, r1
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_GPIO_Init+0xac>)
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	02db      	lsls	r3, r3, #11
 80015a0:	4013      	ands	r3, r2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a6:	193b      	adds	r3, r7, r4
 80015a8:	2204      	movs	r2, #4
 80015aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	193b      	adds	r3, r7, r4
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	2202      	movs	r2, #2
 80015b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <MX_GPIO_Init+0xb0>)
 80015bc:	0019      	movs	r1, r3
 80015be:	0010      	movs	r0, r2
 80015c0:	f001 fa70 	bl	8002aa4 <HAL_GPIO_Init>

}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b00b      	add	sp, #44	; 0x2c
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000400 	.word	0x48000400

080015d4 <read_and_store_data>:


}*/

void read_and_store_data(void)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b097      	sub	sp, #92	; 0x5c
 80015d8:	af02      	add	r7, sp, #8
    // If the EEPROM is full, don't perform any write operations
    if(eeprom_full) {
 80015da:	4b58      	ldr	r3, [pc, #352]	; (800173c <read_and_store_data+0x168>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d000      	beq.n	80015e4 <read_and_store_data+0x10>
 80015e2:	e0a6      	b.n	8001732 <read_and_store_data+0x15e>
        return;
    }
	  //Read Light Intensity
	  light_intensity = LDR_ReadAnalogLightIntensity(&hadc);
 80015e4:	4b56      	ldr	r3, [pc, #344]	; (8001740 <read_and_store_data+0x16c>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff fd14 	bl	8001014 <LDR_ReadAnalogLightIntensity>
 80015ec:	1c02      	adds	r2, r0, #0
 80015ee:	4b55      	ldr	r3, [pc, #340]	; (8001744 <read_and_store_data+0x170>)
 80015f0:	601a      	str	r2, [r3, #0]

	  int light_whole = (int)light_intensity;
 80015f2:	4b54      	ldr	r3, [pc, #336]	; (8001744 <read_and_store_data+0x170>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1c18      	adds	r0, r3, #0
 80015f8:	f7ff fa96 	bl	8000b28 <__aeabi_f2iz>
 80015fc:	0003      	movs	r3, r0
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int light_frac = (int)(100 * (light_intensity - light_whole));
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <read_and_store_data+0x170>)
 8001602:	681c      	ldr	r4, [r3, #0]
 8001604:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001606:	f7ff faaf 	bl	8000b68 <__aeabi_i2f>
 800160a:	1c03      	adds	r3, r0, #0
 800160c:	1c19      	adds	r1, r3, #0
 800160e:	1c20      	adds	r0, r4, #0
 8001610:	f7ff f8dc 	bl	80007cc <__aeabi_fsub>
 8001614:	1c03      	adds	r3, r0, #0
 8001616:	494c      	ldr	r1, [pc, #304]	; (8001748 <read_and_store_data+0x174>)
 8001618:	1c18      	adds	r0, r3, #0
 800161a:	f7fe ffb1 	bl	8000580 <__aeabi_fmul>
 800161e:	1c03      	adds	r3, r0, #0
 8001620:	1c18      	adds	r0, r3, #0
 8001622:	f7ff fa81 	bl	8000b28 <__aeabi_f2iz>
 8001626:	0003      	movs	r3, r0
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
	  sprintf(light_string, "%d.%02d", light_whole, light_frac);
 800162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800162c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800162e:	4947      	ldr	r1, [pc, #284]	; (800174c <read_and_store_data+0x178>)
 8001630:	4847      	ldr	r0, [pc, #284]	; (8001750 <read_and_store_data+0x17c>)
 8001632:	f004 fb55 	bl	8005ce0 <siprintf>

	  //Read Temperature
	  temperature = TMP102_ReadTemperature(&hi2c1);
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <read_and_store_data+0x180>)
 8001638:	0018      	movs	r0, r3
 800163a:	f000 fba1 	bl	8001d80 <TMP102_ReadTemperature>
 800163e:	1c02      	adds	r2, r0, #0
 8001640:	4b45      	ldr	r3, [pc, #276]	; (8001758 <read_and_store_data+0x184>)
 8001642:	601a      	str	r2, [r3, #0]
	  int temp_whole = (int)temperature;
 8001644:	4b44      	ldr	r3, [pc, #272]	; (8001758 <read_and_store_data+0x184>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1c18      	adds	r0, r3, #0
 800164a:	f7ff fa6d 	bl	8000b28 <__aeabi_f2iz>
 800164e:	0003      	movs	r3, r0
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
	  int temp_frac = (int)(100 * (temperature - temp_whole));
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <read_and_store_data+0x184>)
 8001654:	681c      	ldr	r4, [r3, #0]
 8001656:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001658:	f7ff fa86 	bl	8000b68 <__aeabi_i2f>
 800165c:	1c03      	adds	r3, r0, #0
 800165e:	1c19      	adds	r1, r3, #0
 8001660:	1c20      	adds	r0, r4, #0
 8001662:	f7ff f8b3 	bl	80007cc <__aeabi_fsub>
 8001666:	1c03      	adds	r3, r0, #0
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <read_and_store_data+0x174>)
 800166a:	1c18      	adds	r0, r3, #0
 800166c:	f7fe ff88 	bl	8000580 <__aeabi_fmul>
 8001670:	1c03      	adds	r3, r0, #0
 8001672:	1c18      	adds	r0, r3, #0
 8001674:	f7ff fa58 	bl	8000b28 <__aeabi_f2iz>
 8001678:	0003      	movs	r3, r0
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
	  sprintf(temp_string, "%d.%02d", temp_whole, temp_frac);
 800167c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800167e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001680:	4932      	ldr	r1, [pc, #200]	; (800174c <read_and_store_data+0x178>)
 8001682:	4836      	ldr	r0, [pc, #216]	; (800175c <read_and_store_data+0x188>)
 8001684:	f004 fb2c 	bl	8005ce0 <siprintf>

	   //Get the date
	   RTC_GetDate(&hrtc, &dayread, &monthread, &yearread);
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <read_and_store_data+0x18c>)
 800168a:	4a36      	ldr	r2, [pc, #216]	; (8001764 <read_and_store_data+0x190>)
 800168c:	4936      	ldr	r1, [pc, #216]	; (8001768 <read_and_store_data+0x194>)
 800168e:	4837      	ldr	r0, [pc, #220]	; (800176c <read_and_store_data+0x198>)
 8001690:	f000 f97f 	bl	8001992 <RTC_GetDate>
	   // Convert the integers to a string
	   sprintf(date_string, "%02d-%02d-%02d", dayread, monthread, yearread);
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <read_and_store_data+0x194>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	001a      	movs	r2, r3
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <read_and_store_data+0x190>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	001c      	movs	r4, r3
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <read_and_store_data+0x18c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4932      	ldr	r1, [pc, #200]	; (8001770 <read_and_store_data+0x19c>)
 80016a6:	4833      	ldr	r0, [pc, #204]	; (8001774 <read_and_store_data+0x1a0>)
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	0023      	movs	r3, r4
 80016ac:	f004 fb18 	bl	8005ce0 <siprintf>

	   //Get the time
	   status = RTC_GetTime(&hrtc, &read_hours, &read_minutes, &read_seconds);
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <read_and_store_data+0x1a4>)
 80016b2:	4a32      	ldr	r2, [pc, #200]	; (800177c <read_and_store_data+0x1a8>)
 80016b4:	4932      	ldr	r1, [pc, #200]	; (8001780 <read_and_store_data+0x1ac>)
 80016b6:	482d      	ldr	r0, [pc, #180]	; (800176c <read_and_store_data+0x198>)
 80016b8:	f000 f911 	bl	80018de <RTC_GetTime>
 80016bc:	0003      	movs	r3, r0
 80016be:	001a      	movs	r2, r3
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <read_and_store_data+0x1b0>)
 80016c2:	701a      	strb	r2, [r3, #0]
	   if (status != HAL_OK) {
	       // Handle error
	   }

	   // Convert the integers to a string
	   sprintf(time_string, "%02d:%02d:%02d", read_hours, read_minutes, read_seconds);
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <read_and_store_data+0x1ac>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	001a      	movs	r2, r3
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <read_and_store_data+0x1a8>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	001c      	movs	r4, r3
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <read_and_store_data+0x1a4>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	492c      	ldr	r1, [pc, #176]	; (8001788 <read_and_store_data+0x1b4>)
 80016d6:	482d      	ldr	r0, [pc, #180]	; (800178c <read_and_store_data+0x1b8>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	0023      	movs	r3, r4
 80016dc:	f004 fb00 	bl	8005ce0 <siprintf>

	    // Create a complete message string
	    //char message[message_size + 1]; // +1 for the null terminator

	    char message[64];
	    sprintf(message, "Date: %s Time: %s Temp: %s Light: %s\r\n", date_string, time_string, temp_string, light_string);
 80016e0:	4c2a      	ldr	r4, [pc, #168]	; (800178c <read_and_store_data+0x1b8>)
 80016e2:	4a24      	ldr	r2, [pc, #144]	; (8001774 <read_and_store_data+0x1a0>)
 80016e4:	492a      	ldr	r1, [pc, #168]	; (8001790 <read_and_store_data+0x1bc>)
 80016e6:	0038      	movs	r0, r7
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <read_and_store_data+0x17c>)
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <read_and_store_data+0x188>)
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	0023      	movs	r3, r4
 80016f2:	f004 faf5 	bl	8005ce0 <siprintf>

	    // Check if the message can fit into the current page. If not, go to the next page.
	    if(current_page < PAGE_NUM) {
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <read_and_store_data+0x1c0>)
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	429a      	cmp	r2, r3
 8001700:	d213      	bcs.n	800172a <read_and_store_data+0x156>
	    	// Write the message to the EEPROM
	    	EEPROM_Write(current_page, 0, (uint8_t *)message, strlen(message));
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <read_and_store_data+0x1c0>)
 8001704:	881c      	ldrh	r4, [r3, #0]
 8001706:	003b      	movs	r3, r7
 8001708:	0018      	movs	r0, r3
 800170a:	f7fe fcfd 	bl	8000108 <strlen>
 800170e:	0003      	movs	r3, r0
 8001710:	b29b      	uxth	r3, r3
 8001712:	003a      	movs	r2, r7
 8001714:	2100      	movs	r1, #0
 8001716:	0020      	movs	r0, r4
 8001718:	f7ff faf0 	bl	8000cfc <EEPROM_Write>
	    	current_page++;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <read_and_store_data+0x1c0>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <read_and_store_data+0x1c0>)
 8001726:	801a      	strh	r2, [r3, #0]
 8001728:	e004      	b.n	8001734 <read_and_store_data+0x160>

	    }

	    else{
	    	eeprom_full = true;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <read_and_store_data+0x168>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e000      	b.n	8001734 <read_and_store_data+0x160>
        return;
 8001732:	46c0      	nop			; (mov r8, r8)
	    } else {
	        // EEPROM is full, set the flag to prevent further writing
	        eeprom_full = true;
	    }
	     */
}
 8001734:	46bd      	mov	sp, r7
 8001736:	b015      	add	sp, #84	; 0x54
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	2000025e 	.word	0x2000025e
 8001740:	2000009c 	.word	0x2000009c
 8001744:	2000023c 	.word	0x2000023c
 8001748:	42c80000 	.word	0x42c80000
 800174c:	080065d8 	.word	0x080065d8
 8001750:	20000250 	.word	0x20000250
 8001754:	200000dc 	.word	0x200000dc
 8001758:	20000240 	.word	0x20000240
 800175c:	20000244 	.word	0x20000244
 8001760:	2000022f 	.word	0x2000022f
 8001764:	2000022e 	.word	0x2000022e
 8001768:	2000022d 	.word	0x2000022d
 800176c:	20000130 	.word	0x20000130
 8001770:	080065e0 	.word	0x080065e0
 8001774:	20000230 	.word	0x20000230
 8001778:	20000223 	.word	0x20000223
 800177c:	20000222 	.word	0x20000222
 8001780:	20000221 	.word	0x20000221
 8001784:	2000025a 	.word	0x2000025a
 8001788:	080065f0 	.word	0x080065f0
 800178c:	20000224 	.word	0x20000224
 8001790:	08006600 	.word	0x08006600
 8001794:	2000025c 	.word	0x2000025c

08001798 <read_and_transmit_all_data>:

} */


void read_and_transmit_all_data(void)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b095      	sub	sp, #84	; 0x54
 800179c:	af00      	add	r7, sp, #0

    // Buffer to hold the data read from the EEPROM
    uint8_t data[PAGE_SIZE + 1];  // +1 for the null terminator

    // Loop through all pages
    for(uint16_t page = 0; page < PAGE_NUM; page++) {
 800179e:	234e      	movs	r3, #78	; 0x4e
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	e01a      	b.n	80017de <read_and_transmit_all_data+0x46>
        // Read data from the current page of the EEPROM
        EEPROM_Read(page, 0, data, PAGE_SIZE);
 80017a8:	1d3a      	adds	r2, r7, #4
 80017aa:	244e      	movs	r4, #78	; 0x4e
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	8818      	ldrh	r0, [r3, #0]
 80017b0:	2340      	movs	r3, #64	; 0x40
 80017b2:	2100      	movs	r1, #0
 80017b4:	f7ff fb3a 	bl	8000e2c <EEPROM_Read>

        // Ensure that the data is null-terminated
        data[PAGE_SIZE] = '\0';
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	2100      	movs	r1, #0
 80017be:	5499      	strb	r1, [r3, r2]

        // Transmit the data over UART
        HAL_UART_Transmit(&huart1, data, PAGE_SIZE, 1000);
 80017c0:	23fa      	movs	r3, #250	; 0xfa
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	1d39      	adds	r1, r7, #4
 80017c6:	4815      	ldr	r0, [pc, #84]	; (800181c <read_and_transmit_all_data+0x84>)
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	f003 fe4d 	bl	8005468 <HAL_UART_Transmit>


        // Delay between each UART transmission
        HAL_Delay(10);
 80017ce:	200a      	movs	r0, #10
 80017d0:	f000 fb9e 	bl	8001f10 <HAL_Delay>
    for(uint16_t page = 0; page < PAGE_NUM; page++) {
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	193b      	adds	r3, r7, r4
 80017da:	3201      	adds	r2, #1
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	234e      	movs	r3, #78	; 0x4e
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	881a      	ldrh	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3dd      	bcc.n	80017a8 <read_and_transmit_all_data+0x10>
    }

    //Erase everything after transmission
    for (int i=0; i<512; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80017f0:	e007      	b.n	8001802 <read_and_transmit_all_data+0x6a>
    {
  	  EEPROM_PageErase(i);
 80017f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fbac 	bl	8000f54 <EEPROM_PageErase>
    for (int i=0; i<512; i++)
 80017fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017fe:	3301      	adds	r3, #1
 8001800:	64bb      	str	r3, [r7, #72]	; 0x48
 8001802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf2      	blt.n	80017f2 <read_and_transmit_all_data+0x5a>
    }
    eeprom_full = false;
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <read_and_transmit_all_data+0x88>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b015      	add	sp, #84	; 0x54
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20000198 	.word	0x20000198
 8001820:	2000025e 	.word	0x2000025e

08001824 <check_GPIO_state>:
	}
}


void check_GPIO_state(void)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
    GPIO_PinState PinState;

    // Check the state of the GPIO pin
    PinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 800182a:	1dfc      	adds	r4, r7, #7
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <check_GPIO_state+0x3c>)
 800182e:	2104      	movs	r1, #4
 8001830:	0018      	movs	r0, r3
 8001832:	f001 faa7 	bl	8002d84 <HAL_GPIO_ReadPin>
 8001836:	0003      	movs	r3, r0
 8001838:	7023      	strb	r3, [r4, #0]

    if (PinState == GPIO_PIN_SET)
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d103      	bne.n	800184a <check_GPIO_state+0x26>
    {
        // If the pin is set, then do something here
    	usb_plugged = true;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <check_GPIO_state+0x40>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
    else if (PinState == GPIO_PIN_RESET)
    {
        // If the pin is reset, then do something else here
    	usb_plugged = false;
    }
}
 8001848:	e006      	b.n	8001858 <check_GPIO_state+0x34>
    else if (PinState == GPIO_PIN_RESET)
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <check_GPIO_state+0x34>
    	usb_plugged = false;
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <check_GPIO_state+0x40>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b003      	add	sp, #12
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	48000400 	.word	0x48000400
 8001864:	2000025f 	.word	0x2000025f

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>

08001872 <RTC_SetTime>:
 * @param hours Hours value to set (0-23)
 * @param minutes Minutes value to set (0-59)
 * @param seconds Seconds value to set (0-59)
 * @return HAL status (HAL_OK, HAL_ERROR, HAL_BUSY, or HAL_TIMEOUT)
 */
HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8001872:	b590      	push	{r4, r7, lr}
 8001874:	b089      	sub	sp, #36	; 0x24
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	000c      	movs	r4, r1
 800187c:	0010      	movs	r0, r2
 800187e:	0019      	movs	r1, r3
 8001880:	1cfb      	adds	r3, r7, #3
 8001882:	1c22      	adds	r2, r4, #0
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	1cbb      	adds	r3, r7, #2
 8001888:	1c02      	adds	r2, r0, #0
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	1c7b      	adds	r3, r7, #1
 800188e:	1c0a      	adds	r2, r1, #0
 8001890:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8001892:	240c      	movs	r4, #12
 8001894:	193b      	adds	r3, r7, r4
 8001896:	0018      	movs	r0, r3
 8001898:	2314      	movs	r3, #20
 800189a:	001a      	movs	r2, r3
 800189c:	2100      	movs	r1, #0
 800189e:	f004 fa17 	bl	8005cd0 <memset>

    sTime.Hours = hours;
 80018a2:	0021      	movs	r1, r4
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	1cfa      	adds	r2, r7, #3
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	1cba      	adds	r2, r7, #2
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	1c7a      	adds	r2, r7, #1
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]

    return HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80018c8:	1879      	adds	r1, r7, r1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	0018      	movs	r0, r3
 80018d0:	f002 fed4 	bl	800467c <HAL_RTC_SetTime>
 80018d4:	0003      	movs	r3, r0
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b009      	add	sp, #36	; 0x24
 80018dc:	bd90      	pop	{r4, r7, pc}

080018de <RTC_GetTime>:
 * @param hours Pointer to an uint8_t variable to store the hours value
 * @param minutes Pointer to an uint8_t variable to store the minutes value
 * @param seconds Pointer to an uint8_t variable to store the seconds value
 * @return HAL status (HAL_OK, HAL_ERROR, HAL_BUSY, or HAL_TIMEOUT)
 */
HAL_StatusTypeDef RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 80018de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e0:	b08b      	sub	sp, #44	; 0x2c
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef sTime = {0};
 80018ec:	2510      	movs	r5, #16
 80018ee:	197b      	adds	r3, r7, r5
 80018f0:	0018      	movs	r0, r3
 80018f2:	2314      	movs	r3, #20
 80018f4:	001a      	movs	r2, r3
 80018f6:	2100      	movs	r1, #0
 80018f8:	f004 f9ea 	bl	8005cd0 <memset>

    HAL_StatusTypeDef status = HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80018fc:	2627      	movs	r6, #39	; 0x27
 80018fe:	19bc      	adds	r4, r7, r6
 8001900:	1979      	adds	r1, r7, r5
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f002 ff5e 	bl	80047c8 <HAL_RTC_GetTime>
 800190c:	0003      	movs	r3, r0
 800190e:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK) {
 8001910:	19bb      	adds	r3, r7, r6
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10b      	bne.n	8001930 <RTC_GetTime+0x52>
        *hours = sTime.Hours;
 8001918:	197b      	adds	r3, r7, r5
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	701a      	strb	r2, [r3, #0]
        *minutes = sTime.Minutes;
 8001920:	197b      	adds	r3, r7, r5
 8001922:	785a      	ldrb	r2, [r3, #1]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	701a      	strb	r2, [r3, #0]
        *seconds = sTime.Seconds;
 8001928:	197b      	adds	r3, r7, r5
 800192a:	789a      	ldrb	r2, [r3, #2]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001930:	2327      	movs	r3, #39	; 0x27
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b00b      	add	sp, #44	; 0x2c
 800193c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800193e <RTC_SetDate>:
@param hrtc Pointer to an RTC_HandleTypeDef structure that contains the configuration information for the specified RTC
@param day The day of the month
@param month The month
@param year The year (from 0 to 99)
*/
void RTC_SetDate(RTC_HandleTypeDef *hrtc, uint8_t day, uint8_t month, uint8_t year) {
 800193e:	b590      	push	{r4, r7, lr}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	000c      	movs	r4, r1
 8001948:	0010      	movs	r0, r2
 800194a:	0019      	movs	r1, r3
 800194c:	1cfb      	adds	r3, r7, #3
 800194e:	1c22      	adds	r2, r4, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	1cbb      	adds	r3, r7, #2
 8001954:	1c02      	adds	r2, r0, #0
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	1c7b      	adds	r3, r7, #1
 800195a:	1c0a      	adds	r2, r1, #0
 800195c:	701a      	strb	r2, [r3, #0]
RTC_DateTypeDef date = {0};
 800195e:	210c      	movs	r1, #12
 8001960:	187b      	adds	r3, r7, r1
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
date.Date = day;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	1cfa      	adds	r2, r7, #3
 800196a:	7812      	ldrb	r2, [r2, #0]
 800196c:	709a      	strb	r2, [r3, #2]
date.Month = month;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	1cba      	adds	r2, r7, #2
 8001972:	7812      	ldrb	r2, [r2, #0]
 8001974:	705a      	strb	r2, [r3, #1]
date.Year = year;
 8001976:	187b      	adds	r3, r7, r1
 8001978:	1c7a      	adds	r2, r7, #1
 800197a:	7812      	ldrb	r2, [r2, #0]
 800197c:	70da      	strb	r2, [r3, #3]
HAL_RTC_SetDate(hrtc, &date, RTC_FORMAT_BIN);
 800197e:	1879      	adds	r1, r7, r1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	0018      	movs	r0, r3
 8001986:	f002 ff7d 	bl	8004884 <HAL_RTC_SetDate>
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b005      	add	sp, #20
 8001990:	bd90      	pop	{r4, r7, pc}

08001992 <RTC_GetDate>:
@param hrtc Pointer to an RTC_HandleTypeDef structure that contains the configuration information for the specified RTC
@param day Pointer to store the day of the month
@param month Pointer to store the month
@param year Pointer to store the year
*/
void RTC_GetDate(RTC_HandleTypeDef *hrtc, uint8_t *day, uint8_t *month, uint8_t *year) {
 8001992:	b590      	push	{r4, r7, lr}
 8001994:	b087      	sub	sp, #28
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	603b      	str	r3, [r7, #0]
RTC_DateTypeDef date = {0};
 80019a0:	2414      	movs	r4, #20
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
HAL_RTC_GetDate(hrtc, &date, RTC_FORMAT_BIN);
 80019a8:	1939      	adds	r1, r7, r4
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	0018      	movs	r0, r3
 80019b0:	f002 fff8 	bl	80049a4 <HAL_RTC_GetDate>
*day = date.Date;
 80019b4:	0021      	movs	r1, r4
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	789a      	ldrb	r2, [r3, #2]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	701a      	strb	r2, [r3, #0]
*month = date.Month;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	785a      	ldrb	r2, [r3, #1]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	701a      	strb	r2, [r3, #0]
*year = date.Year;
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	78da      	ldrb	r2, [r3, #3]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	701a      	strb	r2, [r3, #0]
}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b007      	add	sp, #28
 80019d4:	bd90      	pop	{r4, r7, pc}
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x44>)
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_MspInit+0x44>)
 80019e4:	2101      	movs	r1, #1
 80019e6:	430a      	orrs	r2, r1
 80019e8:	619a      	str	r2, [r3, #24]
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x44>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x44>)
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_MspInit+0x44>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0549      	lsls	r1, r1, #21
 8001a00:	430a      	orrs	r2, r1
 8001a02:	61da      	str	r2, [r3, #28]
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_MspInit+0x44>)
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	055b      	lsls	r3, r3, #21
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b08b      	sub	sp, #44	; 0x2c
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	2414      	movs	r4, #20
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	2314      	movs	r3, #20
 8001a30:	001a      	movs	r2, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	f004 f94c 	bl	8005cd0 <memset>
  if(hadc->Instance==ADC1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_ADC_MspInit+0x84>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12b      	bne.n	8001a9a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_ADC_MspInit+0x88>)
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_ADC_MspInit+0x88>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0089      	lsls	r1, r1, #2
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	619a      	str	r2, [r3, #24]
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_ADC_MspInit+0x88>)
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_ADC_MspInit+0x88>)
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_ADC_MspInit+0x88>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0289      	lsls	r1, r1, #10
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	615a      	str	r2, [r3, #20]
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_ADC_MspInit+0x88>)
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a7a:	193b      	adds	r3, r7, r4
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	2203      	movs	r2, #3
 8001a84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	193a      	adds	r2, r7, r4
 8001a8e:	2390      	movs	r3, #144	; 0x90
 8001a90:	05db      	lsls	r3, r3, #23
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f001 f805 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b00b      	add	sp, #44	; 0x2c
 8001aa0:	bd90      	pop	{r4, r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40012400 	.word	0x40012400
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b08b      	sub	sp, #44	; 0x2c
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	2414      	movs	r4, #20
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	0018      	movs	r0, r3
 8001aba:	2314      	movs	r3, #20
 8001abc:	001a      	movs	r2, r3
 8001abe:	2100      	movs	r1, #0
 8001ac0:	f004 f906 	bl	8005cd0 <memset>
  if(hi2c->Instance==I2C1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_I2C_MspInit+0x90>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d131      	bne.n	8001b32 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_I2C_MspInit+0x94>)
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_I2C_MspInit+0x94>)
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	02c9      	lsls	r1, r1, #11
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_I2C_MspInit+0x94>)
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	02db      	lsls	r3, r3, #11
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aea:	0021      	movs	r1, r4
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	22c0      	movs	r2, #192	; 0xc0
 8001af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2212      	movs	r2, #18
 8001af6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2203      	movs	r2, #3
 8001b02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2201      	movs	r2, #1
 8001b08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_I2C_MspInit+0x98>)
 8001b0e:	0019      	movs	r1, r3
 8001b10:	0010      	movs	r0, r2
 8001b12:	f000 ffc7 	bl	8002aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_I2C_MspInit+0x94>)
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_I2C_MspInit+0x94>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0389      	lsls	r1, r1, #14
 8001b20:	430a      	orrs	r2, r1
 8001b22:	61da      	str	r2, [r3, #28]
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_I2C_MspInit+0x94>)
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	039b      	lsls	r3, r3, #14
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b00b      	add	sp, #44	; 0x2c
 8001b38:	bd90      	pop	{r4, r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000400 	.word	0x48000400

08001b48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_RTC_MspInit+0x28>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d106      	bne.n	8001b68 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RTC_MspInit+0x2c>)
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RTC_MspInit+0x2c>)
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0209      	lsls	r1, r1, #8
 8001b64:	430a      	orrs	r2, r1
 8001b66:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40002800 	.word	0x40002800
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	05db      	lsls	r3, r3, #23
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d113      	bne.n	8001bb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_TIM_Base_MspInit+0x44>)
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_TIM_Base_MspInit+0x44>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	430a      	orrs	r2, r1
 8001b96:	61da      	str	r2, [r3, #28]
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_TIM_Base_MspInit+0x44>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	200f      	movs	r0, #15
 8001baa:	f000 ff49 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 ff5b 	bl	8002a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b004      	add	sp, #16
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	2414      	movs	r4, #20
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	0018      	movs	r0, r3
 8001bce:	2314      	movs	r3, #20
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f004 f87c 	bl	8005cd0 <memset>
  if(huart->Instance==USART1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_UART_MspInit+0x94>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d133      	bne.n	8001c4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_UART_MspInit+0x98>)
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_UART_MspInit+0x98>)
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	01c9      	lsls	r1, r1, #7
 8001bec:	430a      	orrs	r2, r1
 8001bee:	619a      	str	r2, [r3, #24]
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_UART_MspInit+0x98>)
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_UART_MspInit+0x98>)
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_UART_MspInit+0x98>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	0289      	lsls	r1, r1, #10
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_UART_MspInit+0x98>)
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	029b      	lsls	r3, r3, #10
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	22c0      	movs	r2, #192	; 0xc0
 8001c1e:	00d2      	lsls	r2, r2, #3
 8001c20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	0021      	movs	r1, r4
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	2202      	movs	r2, #2
 8001c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2203      	movs	r2, #3
 8001c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2201      	movs	r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	187a      	adds	r2, r7, r1
 8001c3e:	2390      	movs	r3, #144	; 0x90
 8001c40:	05db      	lsls	r3, r3, #23
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 ff2d 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b00b      	add	sp, #44	; 0x2c
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40021000 	.word	0x40021000

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c80:	f000 f92a 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <TIM2_IRQHandler+0x14>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f002 fffa 	bl	8004c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	20000150 	.word	0x20000150

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	18d3      	adds	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f003 ffd2 	bl	8005c7c <__errno>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	425b      	negs	r3, r3
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	18d2      	adds	r2, r2, r3
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <_sbrk+0x64>)
 8001cf4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b006      	add	sp, #24
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20002000 	.word	0x20002000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	20000260 	.word	0x20000260
 8001d0c:	20000280 	.word	0x20000280

08001d10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <TMP102_Init>:
 * @brief Initialize the TMP102 temperature sensor.
 * @param hi2c Pointer to an I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef TMP102_Init(I2C_HandleTypeDef *hi2c) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	6078      	str	r0, [r7, #4]
    i2c_handle = hi2c;
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <TMP102_Init+0x60>)
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]

    uint16_t config = TMP102_CONFIG_CONTINUOUS_CONVERSION;
 8001d2a:	210e      	movs	r1, #14
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	801a      	strh	r2, [r3, #0]
    uint8_t data[2] = {config >> 8, config & 0xFF};
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	200c      	movs	r0, #12
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	0001      	movs	r1, r0
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	705a      	strb	r2, [r3, #1]

    // Write config to the TMP102
    if (HAL_I2C_Mem_Write(i2c_handle, TMP102_I2C_ADDRESS << 1, TMP102_REG_CONFIG, 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <TMP102_Init+0x60>)
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	425b      	negs	r3, r3
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2301      	movs	r3, #1
 8001d62:	2201      	movs	r2, #1
 8001d64:	2190      	movs	r1, #144	; 0x90
 8001d66:	f001 f8c1 	bl	8002eec <HAL_I2C_Mem_Write>
 8001d6a:	1e03      	subs	r3, r0, #0
 8001d6c:	d001      	beq.n	8001d72 <TMP102_Init+0x56>
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <TMP102_Init+0x58>
    }

    return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b004      	add	sp, #16
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000264 	.word	0x20000264

08001d80 <TMP102_ReadTemperature>:
 * @brief Read temperature from the TMP102 sensor.
 * @param hi2c Pointer to an I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C peripheral.
 * @return Temperature in degrees Celsius as a float.
 */
float TMP102_ReadTemperature(I2C_HandleTypeDef *hi2c) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	6078      	str	r0, [r7, #4]
    uint8_t data[2];

    // Read temperature data from the TMP102
    if (HAL_I2C_Mem_Read(i2c_handle, TMP102_I2C_ADDRESS << 1, TMP102_REG_TEMPERATURE, 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <TMP102_ReadTemperature+0x6c>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	425b      	negs	r3, r3
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	2302      	movs	r3, #2
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	230c      	movs	r3, #12
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2190      	movs	r1, #144	; 0x90
 8001da2:	f001 f9d1 	bl	8003148 <HAL_I2C_Mem_Read>
 8001da6:	1e03      	subs	r3, r0, #0
 8001da8:	d001      	beq.n	8001dae <TMP102_ReadTemperature+0x2e>
        return NAN;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <TMP102_ReadTemperature+0x70>)
 8001dac:	e01a      	b.n	8001de4 <TMP102_ReadTemperature+0x64>
    }

    int16_t raw_temperature = (data[0] << 4) | (data[1] >> 4);
 8001dae:	220c      	movs	r2, #12
 8001db0:	18bb      	adds	r3, r7, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	b219      	sxth	r1, r3
 8001db8:	18bb      	adds	r3, r7, r2
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	200e      	movs	r0, #14
 8001dc4:	183b      	adds	r3, r7, r0
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	801a      	strh	r2, [r3, #0]

    // Convert raw temperature data to Celsius
    return (float) raw_temperature * 0.0625f;
 8001dca:	183b      	adds	r3, r7, r0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	5e9b      	ldrsh	r3, [r3, r2]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7fe fec9 	bl	8000b68 <__aeabi_i2f>
 8001dd6:	1c03      	adds	r3, r0, #0
 8001dd8:	21f6      	movs	r1, #246	; 0xf6
 8001dda:	0589      	lsls	r1, r1, #22
 8001ddc:	1c18      	adds	r0, r3, #0
 8001dde:	f7fe fbcf 	bl	8000580 <__aeabi_fmul>
 8001de2:	1c03      	adds	r3, r0, #0
}
 8001de4:	1c18      	adds	r0, r3, #0
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b004      	add	sp, #16
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000264 	.word	0x20000264
 8001df0:	7fc00000 	.word	0x7fc00000

08001df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001df6:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001df8:	f7ff ff8a 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dfe:	490d      	ldr	r1, [pc, #52]	; (8001e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <LoopForever+0xe>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e14:	4c0a      	ldr	r4, [pc, #40]	; (8001e40 <LoopForever+0x16>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e22:	f003 ff31 	bl	8005c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e26:	f7ff f91b 	bl	8001060 <main>

08001e2a <LoopForever>:

LoopForever:
    b LoopForever
 8001e2a:	e7fe      	b.n	8001e2a <LoopForever>
  ldr   r0, =_estack
 8001e2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e38:	080066dc 	.word	0x080066dc
  ldr r2, =_sbss
 8001e3c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e40:	2000027c 	.word	0x2000027c

08001e44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_COMP_IRQHandler>
	...

08001e48 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_Init+0x24>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_Init+0x24>)
 8001e52:	2110      	movs	r1, #16
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 f809 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5e:	f7ff fdbb 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_InitTick+0x5c>)
 8001e7a:	681c      	ldr	r4, [r3, #0]
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_InitTick+0x60>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	0019      	movs	r1, r3
 8001e82:	23fa      	movs	r3, #250	; 0xfa
 8001e84:	0098      	lsls	r0, r3, #2
 8001e86:	f7fe f951 	bl	800012c <__udivsi3>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	0020      	movs	r0, r4
 8001e90:	f7fe f94c 	bl	800012c <__udivsi3>
 8001e94:	0003      	movs	r3, r0
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 fdf7 	bl	8002a8a <HAL_SYSTICK_Config>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e00f      	b.n	8001ec4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d80b      	bhi.n	8001ec2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	2301      	movs	r3, #1
 8001eae:	425b      	negs	r3, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 fdc4 	bl	8002a40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_InitTick+0x64>)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b003      	add	sp, #12
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	2000000c 	.word	0x2000000c

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	18d2      	adds	r2, r2, r3
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_IncTick+0x20>)
 8001eea:	601a      	str	r2, [r3, #0]
}
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	20000268 	.word	0x20000268

08001efc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_GetTick+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	20000268 	.word	0x20000268

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fff0 	bl	8001efc <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3301      	adds	r3, #1
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	001a      	movs	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	189b      	adds	r3, r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	f7ff ffe0 	bl	8001efc <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b004      	add	sp, #16
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000010 	.word	0x20000010

08001f58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f60:	230f      	movs	r3, #15
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e125      	b.n	80021c2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10a      	bne.n	8001f94 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2234      	movs	r2, #52	; 0x34
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff fd46 	bl	8001a20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	2210      	movs	r2, #16
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d000      	beq.n	8001fa0 <HAL_ADC_Init+0x48>
 8001f9e:	e103      	b.n	80021a8 <HAL_ADC_Init+0x250>
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d000      	beq.n	8001fac <HAL_ADC_Init+0x54>
 8001faa:	e0fd      	b.n	80021a8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001fb6:	d000      	beq.n	8001fba <HAL_ADC_Init+0x62>
 8001fb8:	e0f6      	b.n	80021a8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	4a83      	ldr	r2, [pc, #524]	; (80021cc <HAL_ADC_Init+0x274>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d112      	bne.n	8001ffe <HAL_ADC_Init+0xa6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d009      	beq.n	8001ffa <HAL_ADC_Init+0xa2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Init+0xa6>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_ADC_Init+0xa8>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d116      	bne.n	8002032 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2218      	movs	r2, #24
 800200c:	4393      	bics	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	0899      	lsrs	r1, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4964      	ldr	r1, [pc, #400]	; (80021d0 <HAL_ADC_Init+0x278>)
 800203e:	400a      	ands	r2, r1
 8002040:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7e1b      	ldrb	r3, [r3, #24]
 8002046:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7e5b      	ldrb	r3, [r3, #25]
 800204c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800204e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7e9b      	ldrb	r3, [r3, #26]
 8002054:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002056:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b01      	cmp	r3, #1
 800205e:	d002      	beq.n	8002066 <HAL_ADC_Init+0x10e>
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	015b      	lsls	r3, r3, #5
 8002064:	e000      	b.n	8002068 <HAL_ADC_Init+0x110>
 8002066:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002068:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800206e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d101      	bne.n	800207c <HAL_ADC_Init+0x124>
 8002078:	2304      	movs	r3, #4
 800207a:	e000      	b.n	800207e <HAL_ADC_Init+0x126>
 800207c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800207e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2124      	movs	r1, #36	; 0x24
 8002084:	5c5b      	ldrb	r3, [r3, r1]
 8002086:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002088:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	4313      	orrs	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7edb      	ldrb	r3, [r3, #27]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d115      	bne.n	80020c4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7e9b      	ldrb	r3, [r3, #26]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	0252      	lsls	r2, r2, #9
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	e00b      	b.n	80020c4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	2220      	movs	r2, #32
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	2201      	movs	r2, #1
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	23c2      	movs	r3, #194	; 0xc2
 80020ca:	33ff      	adds	r3, #255	; 0xff
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d007      	beq.n	80020e0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80020d8:	4313      	orrs	r3, r2
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68d9      	ldr	r1, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	055b      	lsls	r3, r3, #21
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d01b      	beq.n	8002134 <HAL_ADC_Init+0x1dc>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	2b01      	cmp	r3, #1
 8002102:	d017      	beq.n	8002134 <HAL_ADC_Init+0x1dc>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	2b02      	cmp	r3, #2
 800210a:	d013      	beq.n	8002134 <HAL_ADC_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	2b03      	cmp	r3, #3
 8002112:	d00f      	beq.n	8002134 <HAL_ADC_Init+0x1dc>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b04      	cmp	r3, #4
 800211a:	d00b      	beq.n	8002134 <HAL_ADC_Init+0x1dc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2b05      	cmp	r3, #5
 8002122:	d007      	beq.n	8002134 <HAL_ADC_Init+0x1dc>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	2b06      	cmp	r3, #6
 800212a:	d003      	beq.n	8002134 <HAL_ADC_Init+0x1dc>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	2b07      	cmp	r3, #7
 8002132:	d112      	bne.n	800215a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2107      	movs	r1, #7
 8002140:	438a      	bics	r2, r1
 8002142:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6959      	ldr	r1, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	2207      	movs	r2, #7
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_ADC_Init+0x27c>)
 8002162:	4013      	ands	r3, r2
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	429a      	cmp	r2, r3
 8002168:	d10b      	bne.n	8002182 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	2203      	movs	r2, #3
 8002176:	4393      	bics	r3, r2
 8002178:	2201      	movs	r2, #1
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002180:	e01c      	b.n	80021bc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	2212      	movs	r2, #18
 8002188:	4393      	bics	r3, r2
 800218a:	2210      	movs	r2, #16
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	2201      	movs	r2, #1
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800219e:	230f      	movs	r3, #15
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80021a6:	e009      	b.n	80021bc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	2210      	movs	r2, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80021b4:	230f      	movs	r3, #15
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021bc:	230f      	movs	r3, #15
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	781b      	ldrb	r3, [r3, #0]
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	fffffefd 	.word	0xfffffefd
 80021d0:	fffe0219 	.word	0xfffe0219
 80021d4:	833fffe7 	.word	0x833fffe7

080021d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e0:	230f      	movs	r3, #15
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	d138      	bne.n	8002266 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2234      	movs	r2, #52	; 0x34
 80021f8:	5c9b      	ldrb	r3, [r3, r2]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Start+0x2a>
 80021fe:	2302      	movs	r3, #2
 8002200:	e038      	b.n	8002274 <HAL_ADC_Start+0x9c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2234      	movs	r2, #52	; 0x34
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7e5b      	ldrb	r3, [r3, #25]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d007      	beq.n	8002222 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002212:	230f      	movs	r3, #15
 8002214:	18fc      	adds	r4, r7, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fa23 	bl	8002664 <ADC_Enable>
 800221e:	0003      	movs	r3, r0
 8002220:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002222:	230f      	movs	r3, #15
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d120      	bne.n	800226e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	4a12      	ldr	r2, [pc, #72]	; (800227c <HAL_ADC_Start+0xa4>)
 8002232:	4013      	ands	r3, r2
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	0052      	lsls	r2, r2, #1
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2234      	movs	r2, #52	; 0x34
 8002248:	2100      	movs	r1, #0
 800224a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	221c      	movs	r2, #28
 8002252:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2104      	movs	r1, #4
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e003      	b.n	800226e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002266:	230f      	movs	r3, #15
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2202      	movs	r2, #2
 800226c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800226e:	230f      	movs	r3, #15
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b005      	add	sp, #20
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	fffff0fe 	.word	0xfffff0fe

08002280 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	230f      	movs	r3, #15
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2234      	movs	r2, #52	; 0x34
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_ADC_Stop+0x1e>
 800229a:	2302      	movs	r3, #2
 800229c:	e029      	b.n	80022f2 <HAL_ADC_Stop+0x72>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2234      	movs	r2, #52	; 0x34
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80022a6:	250f      	movs	r5, #15
 80022a8:	197c      	adds	r4, r7, r5
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 face 	bl	800284e <ADC_ConversionStop>
 80022b2:	0003      	movs	r3, r0
 80022b4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022b6:	197b      	adds	r3, r7, r5
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d112      	bne.n	80022e4 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80022be:	197c      	adds	r4, r7, r5
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fa52 	bl	800276c <ADC_Disable>
 80022c8:	0003      	movs	r3, r0
 80022ca:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80022cc:	197b      	adds	r3, r7, r5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_ADC_Stop+0x7c>)
 80022da:	4013      	ands	r3, r2
 80022dc:	2201      	movs	r2, #1
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2234      	movs	r2, #52	; 0x34
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	781b      	ldrb	r3, [r3, #0]
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bdb0      	pop	{r4, r5, r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	fffffefe 	.word	0xfffffefe

08002300 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d102      	bne.n	8002318 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002312:	2308      	movs	r3, #8
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e014      	b.n	8002342 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10b      	bne.n	800233e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	2220      	movs	r2, #32
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2234      	movs	r2, #52	; 0x34
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e071      	b.n	8002422 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800233e:	230c      	movs	r3, #12
 8002340:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002342:	f7ff fddb 	bl	8001efc <HAL_GetTick>
 8002346:	0003      	movs	r3, r0
 8002348:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800234a:	e01f      	b.n	800238c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	d01c      	beq.n	800238c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_ADC_PollForConversion+0x68>
 8002358:	f7ff fdd0 	bl	8001efc <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d211      	bcs.n	800238c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4013      	ands	r3, r2
 8002372:	d10b      	bne.n	800238c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	2204      	movs	r2, #4
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2234      	movs	r2, #52	; 0x34
 8002384:	2100      	movs	r1, #0
 8002386:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e04a      	b.n	8002422 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	d0d9      	beq.n	800234c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	23c0      	movs	r3, #192	; 0xc0
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4013      	ands	r3, r2
 80023b2:	d12d      	bne.n	8002410 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d129      	bne.n	8002410 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2208      	movs	r2, #8
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d122      	bne.n	8002410 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2204      	movs	r2, #4
 80023d2:	4013      	ands	r3, r2
 80023d4:	d110      	bne.n	80023f8 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	210c      	movs	r1, #12
 80023e2:	438a      	bics	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_ADC_PollForConversion+0x12c>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	2201      	movs	r2, #1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
 80023f6:	e00b      	b.n	8002410 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	2220      	movs	r2, #32
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	2201      	movs	r2, #1
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	220c      	movs	r2, #12
 800241e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b004      	add	sp, #16
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	fffffefe 	.word	0xfffffefe

08002430 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002452:	230f      	movs	r3, #15
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	055b      	lsls	r3, r3, #21
 8002466:	429a      	cmp	r2, r3
 8002468:	d011      	beq.n	800248e <HAL_ADC_ConfigChannel+0x46>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	2b01      	cmp	r3, #1
 8002470:	d00d      	beq.n	800248e <HAL_ADC_ConfigChannel+0x46>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	2b02      	cmp	r3, #2
 8002478:	d009      	beq.n	800248e <HAL_ADC_ConfigChannel+0x46>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	2b03      	cmp	r3, #3
 8002480:	d005      	beq.n	800248e <HAL_ADC_ConfigChannel+0x46>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	2b04      	cmp	r3, #4
 8002488:	d001      	beq.n	800248e <HAL_ADC_ConfigChannel+0x46>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2234      	movs	r2, #52	; 0x34
 8002492:	5c9b      	ldrb	r3, [r3, r2]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x54>
 8002498:	2302      	movs	r3, #2
 800249a:	e0d0      	b.n	800263e <HAL_ADC_ConfigChannel+0x1f6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2234      	movs	r2, #52	; 0x34
 80024a0:	2101      	movs	r1, #1
 80024a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2204      	movs	r2, #4
 80024ac:	4013      	ands	r3, r2
 80024ae:	d000      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x6a>
 80024b0:	e0b4      	b.n	800261c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a64      	ldr	r2, [pc, #400]	; (8002648 <HAL_ADC_ConfigChannel+0x200>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d100      	bne.n	80024be <HAL_ADC_ConfigChannel+0x76>
 80024bc:	e082      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	409a      	lsls	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	429a      	cmp	r2, r3
 80024de:	d037      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d033      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d02f      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d02b      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d027      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2b05      	cmp	r3, #5
 8002506:	d023      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	2b06      	cmp	r3, #6
 800250e:	d01f      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2b07      	cmp	r3, #7
 8002516:	d01b      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	2107      	movs	r1, #7
 8002524:	400b      	ands	r3, r1
 8002526:	429a      	cmp	r2, r3
 8002528:	d012      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2107      	movs	r1, #7
 8002536:	438a      	bics	r2, r1
 8002538:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6959      	ldr	r1, [r3, #20]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2207      	movs	r2, #7
 8002546:	401a      	ands	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b10      	cmp	r3, #16
 8002556:	d007      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x120>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b11      	cmp	r3, #17
 800255e:	d003      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x120>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b12      	cmp	r3, #18
 8002566:	d163      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_ADC_ConfigChannel+0x204>)
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b10      	cmp	r3, #16
 8002572:	d009      	beq.n	8002588 <HAL_ADC_ConfigChannel+0x140>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b11      	cmp	r3, #17
 800257a:	d102      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x13a>
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	03db      	lsls	r3, r3, #15
 8002580:	e004      	b.n	800258c <HAL_ADC_ConfigChannel+0x144>
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	045b      	lsls	r3, r3, #17
 8002586:	e001      	b.n	800258c <HAL_ADC_ConfigChannel+0x144>
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	4a2f      	ldr	r2, [pc, #188]	; (800264c <HAL_ADC_ConfigChannel+0x204>)
 800258e:	430b      	orrs	r3, r1
 8002590:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b10      	cmp	r3, #16
 8002598:	d14a      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800259a:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_ADC_ConfigChannel+0x208>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	492d      	ldr	r1, [pc, #180]	; (8002654 <HAL_ADC_ConfigChannel+0x20c>)
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fd fdc3 	bl	800012c <__udivsi3>
 80025a6:	0003      	movs	r3, r0
 80025a8:	001a      	movs	r2, r3
 80025aa:	0013      	movs	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025b4:	e002      	b.n	80025bc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f9      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x16e>
 80025c2:	e035      	b.n	8002630 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2101      	movs	r1, #1
 80025d0:	4099      	lsls	r1, r3
 80025d2:	000b      	movs	r3, r1
 80025d4:	43d9      	mvns	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	400a      	ands	r2, r1
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d007      	beq.n	80025f6 <HAL_ADC_ConfigChannel+0x1ae>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b11      	cmp	r3, #17
 80025ec:	d003      	beq.n	80025f6 <HAL_ADC_ConfigChannel+0x1ae>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b12      	cmp	r3, #18
 80025f4:	d11c      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_ADC_ConfigChannel+0x204>)
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d007      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x1ca>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b11      	cmp	r3, #17
 8002608:	d101      	bne.n	800260e <HAL_ADC_ConfigChannel+0x1c6>
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_ADC_ConfigChannel+0x210>)
 800260c:	e002      	b.n	8002614 <HAL_ADC_ConfigChannel+0x1cc>
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_ADC_ConfigChannel+0x214>)
 8002610:	e000      	b.n	8002614 <HAL_ADC_ConfigChannel+0x1cc>
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_ADC_ConfigChannel+0x218>)
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_ADC_ConfigChannel+0x204>)
 8002616:	400b      	ands	r3, r1
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e009      	b.n	8002630 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	2220      	movs	r2, #32
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002628:	230f      	movs	r3, #15
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2234      	movs	r2, #52	; 0x34
 8002634:	2100      	movs	r1, #0
 8002636:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	00001001 	.word	0x00001001
 800264c:	40012708 	.word	0x40012708
 8002650:	20000008 	.word	0x20000008
 8002654:	000f4240 	.word	0x000f4240
 8002658:	ffbfffff 	.word	0xffbfffff
 800265c:	feffffff 	.word	0xfeffffff
 8002660:	ff7fffff 	.word	0xff7fffff

08002664 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2203      	movs	r2, #3
 800267c:	4013      	ands	r3, r2
 800267e:	2b01      	cmp	r3, #1
 8002680:	d112      	bne.n	80026a8 <ADC_Enable+0x44>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	4013      	ands	r3, r2
 800268c:	2b01      	cmp	r3, #1
 800268e:	d009      	beq.n	80026a4 <ADC_Enable+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	401a      	ands	r2, r3
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d101      	bne.n	80026a8 <ADC_Enable+0x44>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <ADC_Enable+0x46>
 80026a8:	2300      	movs	r3, #0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d152      	bne.n	8002754 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <ADC_Enable+0xfc>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	2210      	movs	r2, #16
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	2201      	movs	r2, #1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e03f      	b.n	8002756 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	430a      	orrs	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <ADC_Enable+0x100>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	491f      	ldr	r1, [pc, #124]	; (8002768 <ADC_Enable+0x104>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fd fd1d 	bl	800012c <__udivsi3>
 80026f2:	0003      	movs	r3, r0
 80026f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026f6:	e002      	b.n	80026fe <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f9      	bne.n	80026f8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002704:	f7ff fbfa 	bl	8001efc <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800270c:	e01b      	b.n	8002746 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800270e:	f7ff fbf5 	bl	8001efc <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d914      	bls.n	8002746 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	2b01      	cmp	r3, #1
 8002728:	d00d      	beq.n	8002746 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	2210      	movs	r2, #16
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	2201      	movs	r2, #1
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e007      	b.n	8002756 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2201      	movs	r2, #1
 800274e:	4013      	ands	r3, r2
 8002750:	2b01      	cmp	r3, #1
 8002752:	d1dc      	bne.n	800270e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	b004      	add	sp, #16
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	80000017 	.word	0x80000017
 8002764:	20000008 	.word	0x20000008
 8002768:	000f4240 	.word	0x000f4240

0800276c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2203      	movs	r2, #3
 8002780:	4013      	ands	r3, r2
 8002782:	2b01      	cmp	r3, #1
 8002784:	d112      	bne.n	80027ac <ADC_Disable+0x40>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	2b01      	cmp	r3, #1
 8002792:	d009      	beq.n	80027a8 <ADC_Disable+0x3c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	401a      	ands	r2, r3
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d101      	bne.n	80027ac <ADC_Disable+0x40>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <ADC_Disable+0x42>
 80027ac:	2300      	movs	r3, #0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d048      	beq.n	8002844 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2205      	movs	r2, #5
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d110      	bne.n	80027e2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2102      	movs	r1, #2
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2203      	movs	r2, #3
 80027d6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027d8:	f7ff fb90 	bl	8001efc <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027e0:	e029      	b.n	8002836 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	2210      	movs	r2, #16
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	2201      	movs	r2, #1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e023      	b.n	8002846 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027fe:	f7ff fb7d 	bl	8001efc <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d914      	bls.n	8002836 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	2b01      	cmp	r3, #1
 8002818:	d10d      	bne.n	8002836 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	2210      	movs	r2, #16
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	2201      	movs	r2, #1
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e007      	b.n	8002846 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	2b01      	cmp	r3, #1
 8002842:	d0dc      	beq.n	80027fe <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}

0800284e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2204      	movs	r2, #4
 8002862:	4013      	ands	r3, r2
 8002864:	d03a      	beq.n	80028dc <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2204      	movs	r2, #4
 800286e:	4013      	ands	r3, r2
 8002870:	2b04      	cmp	r3, #4
 8002872:	d10d      	bne.n	8002890 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800287e:	d107      	bne.n	8002890 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2110      	movs	r1, #16
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002890:	f7ff fb34 	bl	8001efc <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002898:	e01a      	b.n	80028d0 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800289a:	f7ff fb2f 	bl	8001efc <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d913      	bls.n	80028d0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2204      	movs	r2, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	2210      	movs	r2, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	2201      	movs	r2, #1
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e006      	b.n	80028de <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2204      	movs	r2, #4
 80028d8:	4013      	ands	r3, r2
 80028da:	d1de      	bne.n	800289a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	0002      	movs	r2, r0
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b7f      	cmp	r3, #127	; 0x7f
 80028fa:	d809      	bhi.n	8002910 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	001a      	movs	r2, r3
 8002902:	231f      	movs	r3, #31
 8002904:	401a      	ands	r2, r3
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_EnableIRQ+0x30>)
 8002908:	2101      	movs	r1, #1
 800290a:	4091      	lsls	r1, r2
 800290c:	000a      	movs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
  }
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}
 8002918:	e000e100 	.word	0xe000e100

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	0002      	movs	r2, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	1dfb      	adds	r3, r7, #7
 8002928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b7f      	cmp	r3, #127	; 0x7f
 8002930:	d828      	bhi.n	8002984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002932:	4a2f      	ldr	r2, [pc, #188]	; (80029f0 <__NVIC_SetPriority+0xd4>)
 8002934:	1dfb      	adds	r3, r7, #7
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b25b      	sxtb	r3, r3
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	33c0      	adds	r3, #192	; 0xc0
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	589b      	ldr	r3, [r3, r2]
 8002942:	1dfa      	adds	r2, r7, #7
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	0011      	movs	r1, r2
 8002948:	2203      	movs	r2, #3
 800294a:	400a      	ands	r2, r1
 800294c:	00d2      	lsls	r2, r2, #3
 800294e:	21ff      	movs	r1, #255	; 0xff
 8002950:	4091      	lsls	r1, r2
 8002952:	000a      	movs	r2, r1
 8002954:	43d2      	mvns	r2, r2
 8002956:	401a      	ands	r2, r3
 8002958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	019b      	lsls	r3, r3, #6
 800295e:	22ff      	movs	r2, #255	; 0xff
 8002960:	401a      	ands	r2, r3
 8002962:	1dfb      	adds	r3, r7, #7
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	0018      	movs	r0, r3
 8002968:	2303      	movs	r3, #3
 800296a:	4003      	ands	r3, r0
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002970:	481f      	ldr	r0, [pc, #124]	; (80029f0 <__NVIC_SetPriority+0xd4>)
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b25b      	sxtb	r3, r3
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	430a      	orrs	r2, r1
 800297c:	33c0      	adds	r3, #192	; 0xc0
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002982:	e031      	b.n	80029e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <__NVIC_SetPriority+0xd8>)
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	0019      	movs	r1, r3
 800298c:	230f      	movs	r3, #15
 800298e:	400b      	ands	r3, r1
 8002990:	3b08      	subs	r3, #8
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3306      	adds	r3, #6
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	18d3      	adds	r3, r2, r3
 800299a:	3304      	adds	r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1dfa      	adds	r2, r7, #7
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	0011      	movs	r1, r2
 80029a4:	2203      	movs	r2, #3
 80029a6:	400a      	ands	r2, r1
 80029a8:	00d2      	lsls	r2, r2, #3
 80029aa:	21ff      	movs	r1, #255	; 0xff
 80029ac:	4091      	lsls	r1, r2
 80029ae:	000a      	movs	r2, r1
 80029b0:	43d2      	mvns	r2, r2
 80029b2:	401a      	ands	r2, r3
 80029b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	22ff      	movs	r2, #255	; 0xff
 80029bc:	401a      	ands	r2, r3
 80029be:	1dfb      	adds	r3, r7, #7
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	0018      	movs	r0, r3
 80029c4:	2303      	movs	r3, #3
 80029c6:	4003      	ands	r3, r0
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029cc:	4809      	ldr	r0, [pc, #36]	; (80029f4 <__NVIC_SetPriority+0xd8>)
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	001c      	movs	r4, r3
 80029d4:	230f      	movs	r3, #15
 80029d6:	4023      	ands	r3, r4
 80029d8:	3b08      	subs	r3, #8
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	430a      	orrs	r2, r1
 80029de:	3306      	adds	r3, #6
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	18c3      	adds	r3, r0, r3
 80029e4:	3304      	adds	r3, #4
 80029e6:	601a      	str	r2, [r3, #0]
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b003      	add	sp, #12
 80029ee:	bd90      	pop	{r4, r7, pc}
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1e5a      	subs	r2, r3, #1
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	045b      	lsls	r3, r3, #17
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d301      	bcc.n	8002a10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e010      	b.n	8002a32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <SysTick_Config+0x44>)
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	3a01      	subs	r2, #1
 8002a16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a18:	2301      	movs	r3, #1
 8002a1a:	425b      	negs	r3, r3
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7ff ff7c 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <SysTick_Config+0x44>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <SysTick_Config+0x44>)
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b002      	add	sp, #8
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	e000e010 	.word	0xe000e010

08002a40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	1c02      	adds	r2, r0, #0
 8002a50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff ff5d 	bl	800291c <__NVIC_SetPriority>
}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b004      	add	sp, #16
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	0002      	movs	r2, r0
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff ff33 	bl	80028e8 <__NVIC_EnableIRQ>
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f7ff ffaf 	bl	80029f8 <SysTick_Config>
 8002a9a:	0003      	movs	r3, r0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab2:	e14f      	b.n	8002d54 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4091      	lsls	r1, r2
 8002abe:	000a      	movs	r2, r1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d100      	bne.n	8002acc <HAL_GPIO_Init+0x28>
 8002aca:	e140      	b.n	8002d4e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d005      	beq.n	8002ae4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2203      	movs	r2, #3
 8002ade:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d130      	bne.n	8002b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	409a      	lsls	r2, r3
 8002af2:	0013      	movs	r3, r2
 8002af4:	43da      	mvns	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	409a      	lsls	r2, r3
 8002b06:	0013      	movs	r3, r2
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	43da      	mvns	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	2201      	movs	r2, #1
 8002b32:	401a      	ands	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	409a      	lsls	r2, r3
 8002b38:	0013      	movs	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d017      	beq.n	8002b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	43da      	mvns	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	409a      	lsls	r2, r3
 8002b74:	0013      	movs	r3, r2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2203      	movs	r2, #3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d123      	bne.n	8002bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	58d3      	ldr	r3, [r2, r3]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	0013      	movs	r3, r2
 8002baa:	43da      	mvns	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2107      	movs	r1, #7
 8002bba:	400b      	ands	r3, r1
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	0013      	movs	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	0092      	lsls	r2, r2, #2
 8002bd2:	6939      	ldr	r1, [r7, #16]
 8002bd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	409a      	lsls	r2, r3
 8002be4:	0013      	movs	r3, r2
 8002be6:	43da      	mvns	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	23c0      	movs	r3, #192	; 0xc0
 8002c10:	029b      	lsls	r3, r3, #10
 8002c12:	4013      	ands	r3, r2
 8002c14:	d100      	bne.n	8002c18 <HAL_GPIO_Init+0x174>
 8002c16:	e09a      	b.n	8002d4e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c18:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <HAL_GPIO_Init+0x2c8>)
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_GPIO_Init+0x2c8>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	430a      	orrs	r2, r1
 8002c22:	619a      	str	r2, [r3, #24]
 8002c24:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <HAL_GPIO_Init+0x2c8>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c30:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <HAL_GPIO_Init+0x2cc>)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	589b      	ldr	r3, [r3, r2]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2203      	movs	r2, #3
 8002c42:	4013      	ands	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	2390      	movs	r3, #144	; 0x90
 8002c58:	05db      	lsls	r3, r3, #23
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0x1e2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a44      	ldr	r2, [pc, #272]	; (8002d74 <HAL_GPIO_Init+0x2d0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_Init+0x1de>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a43      	ldr	r2, [pc, #268]	; (8002d78 <HAL_GPIO_Init+0x2d4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x1da>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a42      	ldr	r2, [pc, #264]	; (8002d7c <HAL_GPIO_Init+0x2d8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_Init+0x1d6>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x1e4>
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_Init+0x1e4>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_Init+0x1e4>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x1e4>
 8002c86:	2300      	movs	r3, #0
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	2103      	movs	r1, #3
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4093      	lsls	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c98:	4935      	ldr	r1, [pc, #212]	; (8002d70 <HAL_GPIO_Init+0x2cc>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	035b      	lsls	r3, r3, #13
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	039b      	lsls	r3, r3, #14
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cf4:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002cfa:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43da      	mvns	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	029b      	lsls	r3, r3, #10
 8002d12:	4013      	ands	r3, r2
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	025b      	lsls	r3, r3, #9
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d48:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	40da      	lsrs	r2, r3
 8002d5c:	1e13      	subs	r3, r2, #0
 8002d5e:	d000      	beq.n	8002d62 <HAL_GPIO_Init+0x2be>
 8002d60:	e6a8      	b.n	8002ab4 <HAL_GPIO_Init+0x10>
  } 
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b006      	add	sp, #24
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010000 	.word	0x40010000
 8002d74:	48000400 	.word	0x48000400
 8002d78:	48000800 	.word	0x48000800
 8002d7c:	48000c00 	.word	0x48000c00
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	000a      	movs	r2, r1
 8002d8e:	1cbb      	adds	r3, r7, #2
 8002d90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	1cba      	adds	r2, r7, #2
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d9e:	230f      	movs	r3, #15
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e003      	b.n	8002db0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da8:	230f      	movs	r3, #15
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002db0:	230f      	movs	r3, #15
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	781b      	ldrb	r3, [r3, #0]
  }
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b004      	add	sp, #16
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e082      	b.n	8002ed8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2241      	movs	r2, #65	; 0x41
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2240      	movs	r2, #64	; 0x40
 8002de2:	2100      	movs	r1, #0
 8002de4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7fe fe5f 	bl	8001aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2241      	movs	r2, #65	; 0x41
 8002df2:	2124      	movs	r1, #36	; 0x24
 8002df4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	438a      	bics	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4934      	ldr	r1, [pc, #208]	; (8002ee0 <HAL_I2C_Init+0x120>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4931      	ldr	r1, [pc, #196]	; (8002ee4 <HAL_I2C_Init+0x124>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d108      	bne.n	8002e3e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	0209      	lsls	r1, r1, #8
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	e007      	b.n	8002e4e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2184      	movs	r1, #132	; 0x84
 8002e48:	0209      	lsls	r1, r1, #8
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d104      	bne.n	8002e60 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	491f      	ldr	r1, [pc, #124]	; (8002ee8 <HAL_I2C_Init+0x128>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	491a      	ldr	r1, [pc, #104]	; (8002ee4 <HAL_I2C_Init+0x124>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69d9      	ldr	r1, [r3, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2241      	movs	r2, #65	; 0x41
 8002ec4:	2120      	movs	r1, #32
 8002ec6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2242      	movs	r2, #66	; 0x42
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	f0ffffff 	.word	0xf0ffffff
 8002ee4:	ffff7fff 	.word	0xffff7fff
 8002ee8:	02008000 	.word	0x02008000

08002eec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	000c      	movs	r4, r1
 8002ef6:	0010      	movs	r0, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	230a      	movs	r3, #10
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	1c22      	adds	r2, r4, #0
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	2308      	movs	r3, #8
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	1c02      	adds	r2, r0, #0
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	1dbb      	adds	r3, r7, #6
 8002f0c:	1c0a      	adds	r2, r1, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2241      	movs	r2, #65	; 0x41
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d000      	beq.n	8002f1e <HAL_I2C_Mem_Write+0x32>
 8002f1c:	e10c      	b.n	8003138 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <HAL_I2C_Mem_Write+0x42>
 8002f24:	232c      	movs	r3, #44	; 0x2c
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d105      	bne.n	8002f3a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0ff      	b.n	800313a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	5c9b      	ldrb	r3, [r3, r2]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_I2C_Mem_Write+0x5c>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e0f8      	b.n	800313a <HAL_I2C_Mem_Write+0x24e>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f50:	f7fe ffd4 	bl	8001efc <HAL_GetTick>
 8002f54:	0003      	movs	r3, r0
 8002f56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	0219      	lsls	r1, r3, #8
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2319      	movs	r3, #25
 8002f64:	2201      	movs	r2, #1
 8002f66:	f000 fb0b 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0e3      	b.n	800313a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2241      	movs	r2, #65	; 0x41
 8002f76:	2121      	movs	r1, #33	; 0x21
 8002f78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2242      	movs	r2, #66	; 0x42
 8002f7e:	2140      	movs	r1, #64	; 0x40
 8002f80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	222c      	movs	r2, #44	; 0x2c
 8002f92:	18ba      	adds	r2, r7, r2
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f9e:	1dbb      	adds	r3, r7, #6
 8002fa0:	881c      	ldrh	r4, [r3, #0]
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	230a      	movs	r3, #10
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	8819      	ldrh	r1, [r3, #0]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	0023      	movs	r3, r4
 8002fba:	f000 f9f9 	bl	80033b0 <I2C_RequestMemoryWrite>
 8002fbe:	1e03      	subs	r3, r0, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2240      	movs	r2, #64	; 0x40
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0b5      	b.n	800313a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2bff      	cmp	r3, #255	; 0xff
 8002fd6:	d911      	bls.n	8002ffc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	22ff      	movs	r2, #255	; 0xff
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	045c      	lsls	r4, r3, #17
 8002fe8:	230a      	movs	r3, #10
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	8819      	ldrh	r1, [r3, #0]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	0023      	movs	r3, r4
 8002ff6:	f000 fc9b 	bl	8003930 <I2C_TransferConfig>
 8002ffa:	e012      	b.n	8003022 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	b2da      	uxtb	r2, r3
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	049c      	lsls	r4, r3, #18
 8003010:	230a      	movs	r3, #10
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	8819      	ldrh	r1, [r3, #0]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	2300      	movs	r3, #0
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	0023      	movs	r3, r4
 800301e:	f000 fc87 	bl	8003930 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 faf7 	bl	800361c <I2C_WaitOnTXISFlagUntilTimeout>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e081      	b.n	800313a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03a      	beq.n	80030e6 <HAL_I2C_Mem_Write+0x1fa>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d136      	bne.n	80030e6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	0013      	movs	r3, r2
 8003082:	2200      	movs	r2, #0
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	f000 fa7b 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e053      	b.n	800313a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2bff      	cmp	r3, #255	; 0xff
 800309a:	d911      	bls.n	80030c0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	22ff      	movs	r2, #255	; 0xff
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	045c      	lsls	r4, r3, #17
 80030ac:	230a      	movs	r3, #10
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	8819      	ldrh	r1, [r3, #0]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	2300      	movs	r3, #0
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	0023      	movs	r3, r4
 80030ba:	f000 fc39 	bl	8003930 <I2C_TransferConfig>
 80030be:	e012      	b.n	80030e6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	049c      	lsls	r4, r3, #18
 80030d4:	230a      	movs	r3, #10
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	8819      	ldrh	r1, [r3, #0]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	2300      	movs	r3, #0
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	0023      	movs	r3, r4
 80030e2:	f000 fc25 	bl	8003930 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d198      	bne.n	8003022 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 fad6 	bl	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030fc:	1e03      	subs	r3, r0, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e01a      	b.n	800313a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2220      	movs	r2, #32
 800310a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	490b      	ldr	r1, [pc, #44]	; (8003144 <HAL_I2C_Mem_Write+0x258>)
 8003118:	400a      	ands	r2, r1
 800311a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2241      	movs	r2, #65	; 0x41
 8003120:	2120      	movs	r1, #32
 8003122:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2242      	movs	r2, #66	; 0x42
 8003128:	2100      	movs	r1, #0
 800312a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b007      	add	sp, #28
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	fe00e800 	.word	0xfe00e800

08003148 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	000c      	movs	r4, r1
 8003152:	0010      	movs	r0, r2
 8003154:	0019      	movs	r1, r3
 8003156:	230a      	movs	r3, #10
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	1c22      	adds	r2, r4, #0
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	2308      	movs	r3, #8
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	1c02      	adds	r2, r0, #0
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	1dbb      	adds	r3, r7, #6
 8003168:	1c0a      	adds	r2, r1, #0
 800316a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2241      	movs	r2, #65	; 0x41
 8003170:	5c9b      	ldrb	r3, [r3, r2]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	d000      	beq.n	800317a <HAL_I2C_Mem_Read+0x32>
 8003178:	e110      	b.n	800339c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_I2C_Mem_Read+0x42>
 8003180:	232c      	movs	r3, #44	; 0x2c
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e103      	b.n	800339e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2240      	movs	r2, #64	; 0x40
 800319a:	5c9b      	ldrb	r3, [r3, r2]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_I2C_Mem_Read+0x5c>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e0fc      	b.n	800339e <HAL_I2C_Mem_Read+0x256>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2240      	movs	r2, #64	; 0x40
 80031a8:	2101      	movs	r1, #1
 80031aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031ac:	f7fe fea6 	bl	8001efc <HAL_GetTick>
 80031b0:	0003      	movs	r3, r0
 80031b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	0219      	lsls	r1, r3, #8
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2319      	movs	r3, #25
 80031c0:	2201      	movs	r2, #1
 80031c2:	f000 f9dd 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0e7      	b.n	800339e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2241      	movs	r2, #65	; 0x41
 80031d2:	2122      	movs	r1, #34	; 0x22
 80031d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2242      	movs	r2, #66	; 0x42
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	222c      	movs	r2, #44	; 0x2c
 80031ee:	18ba      	adds	r2, r7, r2
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031fa:	1dbb      	adds	r3, r7, #6
 80031fc:	881c      	ldrh	r4, [r3, #0]
 80031fe:	2308      	movs	r3, #8
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	881a      	ldrh	r2, [r3, #0]
 8003204:	230a      	movs	r3, #10
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	8819      	ldrh	r1, [r3, #0]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	0023      	movs	r3, r4
 8003216:	f000 f92f 	bl	8003478 <I2C_RequestMemoryRead>
 800321a:	1e03      	subs	r3, r0, #0
 800321c:	d005      	beq.n	800322a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2240      	movs	r2, #64	; 0x40
 8003222:	2100      	movs	r1, #0
 8003224:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0b9      	b.n	800339e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	2bff      	cmp	r3, #255	; 0xff
 8003232:	d911      	bls.n	8003258 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	22ff      	movs	r2, #255	; 0xff
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	b2da      	uxtb	r2, r3
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	045c      	lsls	r4, r3, #17
 8003244:	230a      	movs	r3, #10
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	8819      	ldrh	r1, [r3, #0]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <HAL_I2C_Mem_Read+0x260>)
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	0023      	movs	r3, r4
 8003252:	f000 fb6d 	bl	8003930 <I2C_TransferConfig>
 8003256:	e012      	b.n	800327e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	b2da      	uxtb	r2, r3
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	049c      	lsls	r4, r3, #18
 800326c:	230a      	movs	r3, #10
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	8819      	ldrh	r1, [r3, #0]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <HAL_I2C_Mem_Read+0x260>)
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	0023      	movs	r3, r4
 800327a:	f000 fb59 	bl	8003930 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800327e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	0013      	movs	r3, r2
 8003288:	2200      	movs	r2, #0
 800328a:	2104      	movs	r1, #4
 800328c:	f000 f978 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e082      	b.n	800339e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03a      	beq.n	800334a <HAL_I2C_Mem_Read+0x202>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d136      	bne.n	800334a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	0013      	movs	r3, r2
 80032e6:	2200      	movs	r2, #0
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	f000 f949 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e053      	b.n	800339e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2bff      	cmp	r3, #255	; 0xff
 80032fe:	d911      	bls.n	8003324 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	045c      	lsls	r4, r3, #17
 8003310:	230a      	movs	r3, #10
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	8819      	ldrh	r1, [r3, #0]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	0023      	movs	r3, r4
 800331e:	f000 fb07 	bl	8003930 <I2C_TransferConfig>
 8003322:	e012      	b.n	800334a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	b2da      	uxtb	r2, r3
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	049c      	lsls	r4, r3, #18
 8003338:	230a      	movs	r3, #10
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	8819      	ldrh	r1, [r3, #0]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	2300      	movs	r3, #0
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	0023      	movs	r3, r4
 8003346:	f000 faf3 	bl	8003930 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d194      	bne.n	800327e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	0018      	movs	r0, r3
 800335c:	f000 f9a4 	bl	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e01a      	b.n	800339e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2220      	movs	r2, #32
 800336e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	490c      	ldr	r1, [pc, #48]	; (80033ac <HAL_I2C_Mem_Read+0x264>)
 800337c:	400a      	ands	r2, r1
 800337e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2241      	movs	r2, #65	; 0x41
 8003384:	2120      	movs	r1, #32
 8003386:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2242      	movs	r2, #66	; 0x42
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2240      	movs	r2, #64	; 0x40
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b007      	add	sp, #28
 80033a4:	bd90      	pop	{r4, r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	80002400 	.word	0x80002400
 80033ac:	fe00e800 	.word	0xfe00e800

080033b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033b0:	b5b0      	push	{r4, r5, r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	000c      	movs	r4, r1
 80033ba:	0010      	movs	r0, r2
 80033bc:	0019      	movs	r1, r3
 80033be:	250a      	movs	r5, #10
 80033c0:	197b      	adds	r3, r7, r5
 80033c2:	1c22      	adds	r2, r4, #0
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	2308      	movs	r3, #8
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	1c02      	adds	r2, r0, #0
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	1dbb      	adds	r3, r7, #6
 80033d0:	1c0a      	adds	r2, r1, #0
 80033d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033d4:	1dbb      	adds	r3, r7, #6
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	045c      	lsls	r4, r3, #17
 80033de:	197b      	adds	r3, r7, r5
 80033e0:	8819      	ldrh	r1, [r3, #0]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <I2C_RequestMemoryWrite+0xc4>)
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	0023      	movs	r3, r4
 80033ea:	f000 faa1 	bl	8003930 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	6a39      	ldr	r1, [r7, #32]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f911 	bl	800361c <I2C_WaitOnTXISFlagUntilTimeout>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d001      	beq.n	8003402 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e033      	b.n	800346a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003402:	1dbb      	adds	r3, r7, #6
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800340a:	2308      	movs	r3, #8
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28
 8003418:	e019      	b.n	800344e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800341a:	2308      	movs	r3, #8
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	b29b      	uxth	r3, r3
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342e:	6a39      	ldr	r1, [r7, #32]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	0018      	movs	r0, r3
 8003434:	f000 f8f2 	bl	800361c <I2C_WaitOnTXISFlagUntilTimeout>
 8003438:	1e03      	subs	r3, r0, #0
 800343a:	d001      	beq.n	8003440 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e014      	b.n	800346a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003440:	2308      	movs	r3, #8
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	0013      	movs	r3, r2
 8003458:	2200      	movs	r2, #0
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	f000 f890 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8003460:	1e03      	subs	r3, r0, #0
 8003462:	d001      	beq.n	8003468 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b004      	add	sp, #16
 8003470:	bdb0      	pop	{r4, r5, r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	80002000 	.word	0x80002000

08003478 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003478:	b5b0      	push	{r4, r5, r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	000c      	movs	r4, r1
 8003482:	0010      	movs	r0, r2
 8003484:	0019      	movs	r1, r3
 8003486:	250a      	movs	r5, #10
 8003488:	197b      	adds	r3, r7, r5
 800348a:	1c22      	adds	r2, r4, #0
 800348c:	801a      	strh	r2, [r3, #0]
 800348e:	2308      	movs	r3, #8
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	1c02      	adds	r2, r0, #0
 8003494:	801a      	strh	r2, [r3, #0]
 8003496:	1dbb      	adds	r3, r7, #6
 8003498:	1c0a      	adds	r2, r1, #0
 800349a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800349c:	1dbb      	adds	r3, r7, #6
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	197b      	adds	r3, r7, r5
 80034a4:	8819      	ldrh	r1, [r3, #0]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	4b23      	ldr	r3, [pc, #140]	; (8003538 <I2C_RequestMemoryRead+0xc0>)
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2300      	movs	r3, #0
 80034ae:	f000 fa3f 	bl	8003930 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	6a39      	ldr	r1, [r7, #32]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f000 f8af 	bl	800361c <I2C_WaitOnTXISFlagUntilTimeout>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d001      	beq.n	80034c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e033      	b.n	800352e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034c6:	1dbb      	adds	r3, r7, #6
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ce:	2308      	movs	r3, #8
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
 80034dc:	e019      	b.n	8003512 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034de:	2308      	movs	r3, #8
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	6a39      	ldr	r1, [r7, #32]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f000 f890 	bl	800361c <I2C_WaitOnTXISFlagUntilTimeout>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d001      	beq.n	8003504 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e014      	b.n	800352e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003504:	2308      	movs	r3, #8
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003512:	6a3a      	ldr	r2, [r7, #32]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	0013      	movs	r3, r2
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	f000 f82e 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d001      	beq.n	800352c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b004      	add	sp, #16
 8003534:	bdb0      	pop	{r4, r5, r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	80002000 	.word	0x80002000

0800353c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2202      	movs	r2, #2
 800354c:	4013      	ands	r3, r2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d103      	bne.n	800355a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2201      	movs	r2, #1
 8003562:	4013      	ands	r3, r2
 8003564:	2b01      	cmp	r3, #1
 8003566:	d007      	beq.n	8003578 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2101      	movs	r1, #1
 8003574:	430a      	orrs	r2, r1
 8003576:	619a      	str	r2, [r3, #24]
  }
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b002      	add	sp, #8
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	1dfb      	adds	r3, r7, #7
 800358e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003590:	e030      	b.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	d02d      	beq.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003598:	f7fe fcb0 	bl	8001efc <HAL_GetTick>
 800359c:	0002      	movs	r2, r0
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d302      	bcc.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d122      	bne.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	425a      	negs	r2, r3
 80035be:	4153      	adcs	r3, r2
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	001a      	movs	r2, r3
 80035c4:	1dfb      	adds	r3, r7, #7
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d113      	bne.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	2220      	movs	r2, #32
 80035d2:	431a      	orrs	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2241      	movs	r2, #65	; 0x41
 80035dc:	2120      	movs	r1, #32
 80035de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2242      	movs	r2, #66	; 0x42
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e00f      	b.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	425a      	negs	r2, r3
 8003604:	4153      	adcs	r3, r2
 8003606:	b2db      	uxtb	r3, r3
 8003608:	001a      	movs	r2, r3
 800360a:	1dfb      	adds	r3, r7, #7
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d0bf      	beq.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b004      	add	sp, #16
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003628:	e032      	b.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f87d 	bl	8003730 <I2C_IsErrorOccurred>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d001      	beq.n	800363e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e030      	b.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3301      	adds	r3, #1
 8003642:	d025      	beq.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003644:	f7fe fc5a 	bl	8001efc <HAL_GetTick>
 8003648:	0002      	movs	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d302      	bcc.n	800365a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11a      	bne.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2202      	movs	r2, #2
 8003662:	4013      	ands	r3, r2
 8003664:	2b02      	cmp	r3, #2
 8003666:	d013      	beq.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	2220      	movs	r2, #32
 800366e:	431a      	orrs	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2241      	movs	r2, #65	; 0x41
 8003678:	2120      	movs	r1, #32
 800367a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2242      	movs	r2, #66	; 0x42
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e007      	b.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2202      	movs	r2, #2
 8003698:	4013      	ands	r3, r2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d1c5      	bne.n	800362a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b004      	add	sp, #16
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b4:	e02f      	b.n	8003716 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 f837 	bl	8003730 <I2C_IsErrorOccurred>
 80036c2:	1e03      	subs	r3, r0, #0
 80036c4:	d001      	beq.n	80036ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e02d      	b.n	8003726 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fc17 	bl	8001efc <HAL_GetTick>
 80036ce:	0002      	movs	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11a      	bne.n	8003716 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2220      	movs	r2, #32
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d013      	beq.n	8003716 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	2220      	movs	r2, #32
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2241      	movs	r2, #65	; 0x41
 80036fe:	2120      	movs	r1, #32
 8003700:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2242      	movs	r2, #66	; 0x42
 8003706:	2100      	movs	r1, #0
 8003708:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2240      	movs	r2, #64	; 0x40
 800370e:	2100      	movs	r1, #0
 8003710:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2220      	movs	r2, #32
 800371e:	4013      	ands	r3, r2
 8003720:	2b20      	cmp	r3, #32
 8003722:	d1c8      	bne.n	80036b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b08b      	sub	sp, #44	; 0x2c
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373c:	2327      	movs	r3, #39	; 0x27
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2210      	movs	r2, #16
 8003758:	4013      	ands	r3, r2
 800375a:	d100      	bne.n	800375e <I2C_IsErrorOccurred+0x2e>
 800375c:	e082      	b.n	8003864 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2210      	movs	r2, #16
 8003764:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003766:	e060      	b.n	800382a <I2C_IsErrorOccurred+0xfa>
 8003768:	2427      	movs	r4, #39	; 0x27
 800376a:	193b      	adds	r3, r7, r4
 800376c:	193a      	adds	r2, r7, r4
 800376e:	7812      	ldrb	r2, [r2, #0]
 8003770:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	3301      	adds	r3, #1
 8003776:	d058      	beq.n	800382a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003778:	f7fe fbc0 	bl	8001efc <HAL_GetTick>
 800377c:	0002      	movs	r2, r0
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d306      	bcc.n	8003796 <I2C_IsErrorOccurred+0x66>
 8003788:	193b      	adds	r3, r7, r4
 800378a:	193a      	adds	r2, r7, r4
 800378c:	7812      	ldrb	r2, [r2, #0]
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d149      	bne.n	800382a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	01db      	lsls	r3, r3, #7
 80037a0:	4013      	ands	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037a4:	2013      	movs	r0, #19
 80037a6:	183b      	adds	r3, r7, r0
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	2142      	movs	r1, #66	; 0x42
 80037ac:	5c52      	ldrb	r2, [r2, r1]
 80037ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	401a      	ands	r2, r3
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d126      	bne.n	8003812 <I2C_IsErrorOccurred+0xe2>
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	01db      	lsls	r3, r3, #7
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d021      	beq.n	8003812 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80037ce:	183b      	adds	r3, r7, r0
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d01d      	beq.n	8003812 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2180      	movs	r1, #128	; 0x80
 80037e2:	01c9      	lsls	r1, r1, #7
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037e8:	f7fe fb88 	bl	8001efc <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f0:	e00f      	b.n	8003812 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037f2:	f7fe fb83 	bl	8001efc <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b19      	cmp	r3, #25
 80037fe:	d908      	bls.n	8003812 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	2220      	movs	r2, #32
 8003804:	4313      	orrs	r3, r2
 8003806:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003808:	2327      	movs	r3, #39	; 0x27
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]

              break;
 8003810:	e00b      	b.n	800382a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2220      	movs	r2, #32
 800381a:	4013      	ands	r3, r2
 800381c:	2127      	movs	r1, #39	; 0x27
 800381e:	187a      	adds	r2, r7, r1
 8003820:	1879      	adds	r1, r7, r1
 8003822:	7809      	ldrb	r1, [r1, #0]
 8003824:	7011      	strb	r1, [r2, #0]
 8003826:	2b20      	cmp	r3, #32
 8003828:	d1e3      	bne.n	80037f2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2220      	movs	r2, #32
 8003832:	4013      	ands	r3, r2
 8003834:	2b20      	cmp	r3, #32
 8003836:	d004      	beq.n	8003842 <I2C_IsErrorOccurred+0x112>
 8003838:	2327      	movs	r3, #39	; 0x27
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d092      	beq.n	8003768 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003842:	2327      	movs	r3, #39	; 0x27
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2220      	movs	r2, #32
 8003852:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	2204      	movs	r2, #4
 8003858:	4313      	orrs	r3, r2
 800385a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800385c:	2327      	movs	r3, #39	; 0x27
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4013      	ands	r3, r2
 8003874:	d00c      	beq.n	8003890 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2201      	movs	r2, #1
 800387a:	4313      	orrs	r3, r2
 800387c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	0052      	lsls	r2, r2, #1
 8003886:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003888:	2327      	movs	r3, #39	; 0x27
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4013      	ands	r3, r2
 8003898:	d00c      	beq.n	80038b4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	2208      	movs	r2, #8
 800389e:	4313      	orrs	r3, r2
 80038a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	00d2      	lsls	r2, r2, #3
 80038aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ac:	2327      	movs	r3, #39	; 0x27
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4013      	ands	r3, r2
 80038bc:	d00c      	beq.n	80038d8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	2202      	movs	r2, #2
 80038c2:	4313      	orrs	r3, r2
 80038c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	0092      	lsls	r2, r2, #2
 80038ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038d0:	2327      	movs	r3, #39	; 0x27
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80038d8:	2327      	movs	r3, #39	; 0x27
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01d      	beq.n	800391e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff fe29 	bl	800353c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	490d      	ldr	r1, [pc, #52]	; (800392c <I2C_IsErrorOccurred+0x1fc>)
 80038f6:	400a      	ands	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2241      	movs	r2, #65	; 0x41
 800390a:	2120      	movs	r1, #32
 800390c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2242      	movs	r2, #66	; 0x42
 8003912:	2100      	movs	r1, #0
 8003914:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800391e:	2327      	movs	r3, #39	; 0x27
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	781b      	ldrb	r3, [r3, #0]
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b00b      	add	sp, #44	; 0x2c
 800392a:	bd90      	pop	{r4, r7, pc}
 800392c:	fe00e800 	.word	0xfe00e800

08003930 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	0008      	movs	r0, r1
 800393a:	0011      	movs	r1, r2
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	240a      	movs	r4, #10
 8003940:	193b      	adds	r3, r7, r4
 8003942:	1c02      	adds	r2, r0, #0
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	2009      	movs	r0, #9
 8003948:	183b      	adds	r3, r7, r0
 800394a:	1c0a      	adds	r2, r1, #0
 800394c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800394e:	193b      	adds	r3, r7, r4
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	059b      	lsls	r3, r3, #22
 8003954:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003956:	183b      	adds	r3, r7, r0
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	0419      	lsls	r1, r3, #16
 800395c:	23ff      	movs	r3, #255	; 0xff
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003962:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	4313      	orrs	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800397a:	0d51      	lsrs	r1, r2, #21
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	00d2      	lsls	r2, r2, #3
 8003980:	400a      	ands	r2, r1
 8003982:	4907      	ldr	r1, [pc, #28]	; (80039a0 <I2C_TransferConfig+0x70>)
 8003984:	430a      	orrs	r2, r1
 8003986:	43d2      	mvns	r2, r2
 8003988:	401a      	ands	r2, r3
 800398a:	0011      	movs	r1, r2
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b007      	add	sp, #28
 800399c:	bd90      	pop	{r4, r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	03ff63ff 	.word	0x03ff63ff

080039a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2241      	movs	r2, #65	; 0x41
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d138      	bne.n	8003a2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2240      	movs	r2, #64	; 0x40
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e032      	b.n	8003a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2241      	movs	r2, #65	; 0x41
 80039d4:	2124      	movs	r1, #36	; 0x24
 80039d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4911      	ldr	r1, [pc, #68]	; (8003a38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2241      	movs	r2, #65	; 0x41
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2240      	movs	r2, #64	; 0x40
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	ffffefff 	.word	0xffffefff

08003a3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2241      	movs	r2, #65	; 0x41
 8003a4a:	5c9b      	ldrb	r3, [r3, r2]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d139      	bne.n	8003ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2240      	movs	r2, #64	; 0x40
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e033      	b.n	8003ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2241      	movs	r2, #65	; 0x41
 8003a6c:	2124      	movs	r1, #36	; 0x24
 8003a6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2101      	movs	r1, #1
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2241      	movs	r2, #65	; 0x41
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2240      	movs	r2, #64	; 0x40
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
  }
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b004      	add	sp, #16
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	fffff0ff 	.word	0xfffff0ff

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e301      	b.n	80040ea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	4013      	ands	r3, r2
 8003aee:	d100      	bne.n	8003af2 <HAL_RCC_OscConfig+0x1e>
 8003af0:	e08d      	b.n	8003c0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003af2:	4bc3      	ldr	r3, [pc, #780]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	220c      	movs	r2, #12
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d00e      	beq.n	8003b1c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003afe:	4bc0      	ldr	r3, [pc, #768]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	220c      	movs	r2, #12
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d116      	bne.n	8003b38 <HAL_RCC_OscConfig+0x64>
 8003b0a:	4bbd      	ldr	r3, [pc, #756]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	025b      	lsls	r3, r3, #9
 8003b12:	401a      	ands	r2, r3
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	025b      	lsls	r3, r3, #9
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d10d      	bne.n	8003b38 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	4bb8      	ldr	r3, [pc, #736]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	4013      	ands	r3, r2
 8003b26:	d100      	bne.n	8003b2a <HAL_RCC_OscConfig+0x56>
 8003b28:	e070      	b.n	8003c0c <HAL_RCC_OscConfig+0x138>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d000      	beq.n	8003b34 <HAL_RCC_OscConfig+0x60>
 8003b32:	e06b      	b.n	8003c0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e2d8      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x7c>
 8003b40:	4baf      	ldr	r3, [pc, #700]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4bae      	ldr	r3, [pc, #696]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	0249      	lsls	r1, r1, #9
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e02f      	b.n	8003bb0 <HAL_RCC_OscConfig+0xdc>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x9e>
 8003b58:	4ba9      	ldr	r3, [pc, #676]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4ba8      	ldr	r3, [pc, #672]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b5e:	49a9      	ldr	r1, [pc, #676]	; (8003e04 <HAL_RCC_OscConfig+0x330>)
 8003b60:	400a      	ands	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	4ba6      	ldr	r3, [pc, #664]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4ba5      	ldr	r3, [pc, #660]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b6a:	49a7      	ldr	r1, [pc, #668]	; (8003e08 <HAL_RCC_OscConfig+0x334>)
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e01e      	b.n	8003bb0 <HAL_RCC_OscConfig+0xdc>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d10e      	bne.n	8003b98 <HAL_RCC_OscConfig+0xc4>
 8003b7a:	4ba1      	ldr	r3, [pc, #644]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4ba0      	ldr	r3, [pc, #640]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	02c9      	lsls	r1, r1, #11
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	4b9d      	ldr	r3, [pc, #628]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b9c      	ldr	r3, [pc, #624]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	0249      	lsls	r1, r1, #9
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCC_OscConfig+0xdc>
 8003b98:	4b99      	ldr	r3, [pc, #612]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b98      	ldr	r3, [pc, #608]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003b9e:	4999      	ldr	r1, [pc, #612]	; (8003e04 <HAL_RCC_OscConfig+0x330>)
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	4b96      	ldr	r3, [pc, #600]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b95      	ldr	r3, [pc, #596]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003baa:	4997      	ldr	r1, [pc, #604]	; (8003e08 <HAL_RCC_OscConfig+0x334>)
 8003bac:	400a      	ands	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d014      	beq.n	8003be2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f9a0 	bl	8001efc <HAL_GetTick>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc2:	f7fe f99b 	bl	8001efc <HAL_GetTick>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b64      	cmp	r3, #100	; 0x64
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e28a      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd4:	4b8a      	ldr	r3, [pc, #552]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	029b      	lsls	r3, r3, #10
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0xee>
 8003be0:	e015      	b.n	8003c0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be2:	f7fe f98b 	bl	8001efc <HAL_GetTick>
 8003be6:	0003      	movs	r3, r0
 8003be8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe f986 	bl	8001efc <HAL_GetTick>
 8003bf0:	0002      	movs	r2, r0
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e275      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	4b80      	ldr	r3, [pc, #512]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	2380      	movs	r3, #128	; 0x80
 8003c04:	029b      	lsls	r3, r3, #10
 8003c06:	4013      	ands	r3, r2
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x118>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2202      	movs	r2, #2
 8003c14:	4013      	ands	r3, r2
 8003c16:	d100      	bne.n	8003c1a <HAL_RCC_OscConfig+0x146>
 8003c18:	e069      	b.n	8003cee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c1a:	4b79      	ldr	r3, [pc, #484]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	220c      	movs	r2, #12
 8003c20:	4013      	ands	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c24:	4b76      	ldr	r3, [pc, #472]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	220c      	movs	r2, #12
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d11c      	bne.n	8003c6a <HAL_RCC_OscConfig+0x196>
 8003c30:	4b73      	ldr	r3, [pc, #460]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	025b      	lsls	r3, r3, #9
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d116      	bne.n	8003c6a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3c:	4b70      	ldr	r3, [pc, #448]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2202      	movs	r2, #2
 8003c42:	4013      	ands	r3, r2
 8003c44:	d005      	beq.n	8003c52 <HAL_RCC_OscConfig+0x17e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e24b      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c52:	4b6b      	ldr	r3, [pc, #428]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	22f8      	movs	r2, #248	; 0xf8
 8003c58:	4393      	bics	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	00da      	lsls	r2, r3, #3
 8003c62:	4b67      	ldr	r3, [pc, #412]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c68:	e041      	b.n	8003cee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d024      	beq.n	8003cbc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c72:	4b63      	ldr	r3, [pc, #396]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b62      	ldr	r3, [pc, #392]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe f93d 	bl	8001efc <HAL_GetTick>
 8003c82:	0003      	movs	r3, r0
 8003c84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fe f938 	bl	8001efc <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e227      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b59      	ldr	r3, [pc, #356]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d0f1      	beq.n	8003c88 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca4:	4b56      	ldr	r3, [pc, #344]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	22f8      	movs	r2, #248	; 0xf8
 8003caa:	4393      	bics	r3, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00da      	lsls	r2, r3, #3
 8003cb4:	4b52      	ldr	r3, [pc, #328]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e018      	b.n	8003cee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbc:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b4f      	ldr	r3, [pc, #316]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f918 	bl	8001efc <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe f913 	bl	8001efc <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e202      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce4:	4b46      	ldr	r3, [pc, #280]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d1f1      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d036      	beq.n	8003d66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d019      	beq.n	8003d34 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d00:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d04:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0c:	f7fe f8f6 	bl	8001efc <HAL_GetTick>
 8003d10:	0003      	movs	r3, r0
 8003d12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fe f8f1 	bl	8001efc <HAL_GetTick>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1e0      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d28:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d0f1      	beq.n	8003d16 <HAL_RCC_OscConfig+0x242>
 8003d32:	e018      	b.n	8003d66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d34:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d38:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d40:	f7fe f8dc 	bl	8001efc <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4a:	f7fe f8d7 	bl	8001efc <HAL_GetTick>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e1c6      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	2202      	movs	r2, #2
 8003d62:	4013      	ands	r3, r2
 8003d64:	d1f1      	bne.n	8003d4a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <HAL_RCC_OscConfig+0x29e>
 8003d70:	e0b4      	b.n	8003edc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d72:	201f      	movs	r0, #31
 8003d74:	183b      	adds	r3, r7, r0
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	055b      	lsls	r3, r3, #21
 8003d82:	4013      	ands	r3, r2
 8003d84:	d110      	bne.n	8003da8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	0549      	lsls	r1, r1, #21
 8003d90:	430a      	orrs	r2, r1
 8003d92:	61da      	str	r2, [r3, #28]
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	055b      	lsls	r3, r3, #21
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003da2:	183b      	adds	r3, r7, r0
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_RCC_OscConfig+0x338>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	d11a      	bne.n	8003dea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db4:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_RCC_OscConfig+0x338>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <HAL_RCC_OscConfig+0x338>)
 8003dba:	2180      	movs	r1, #128	; 0x80
 8003dbc:	0049      	lsls	r1, r1, #1
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7fe f89b 	bl	8001efc <HAL_GetTick>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fe f896 	bl	8001efc <HAL_GetTick>
 8003dd0:	0002      	movs	r2, r0
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e185      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_OscConfig+0x338>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4013      	ands	r3, r2
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d10e      	bne.n	8003e10 <HAL_RCC_OscConfig+0x33c>
 8003df2:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <HAL_RCC_OscConfig+0x32c>)
 8003df8:	2101      	movs	r1, #1
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	621a      	str	r2, [r3, #32]
 8003dfe:	e035      	b.n	8003e6c <HAL_RCC_OscConfig+0x398>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	fffeffff 	.word	0xfffeffff
 8003e08:	fffbffff 	.word	0xfffbffff
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCC_OscConfig+0x35e>
 8003e18:	4bb6      	ldr	r3, [pc, #728]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e1a:	6a1a      	ldr	r2, [r3, #32]
 8003e1c:	4bb5      	ldr	r3, [pc, #724]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	438a      	bics	r2, r1
 8003e22:	621a      	str	r2, [r3, #32]
 8003e24:	4bb3      	ldr	r3, [pc, #716]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	4bb2      	ldr	r3, [pc, #712]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	621a      	str	r2, [r3, #32]
 8003e30:	e01c      	b.n	8003e6c <HAL_RCC_OscConfig+0x398>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b05      	cmp	r3, #5
 8003e38:	d10c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x380>
 8003e3a:	4bae      	ldr	r3, [pc, #696]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	4bad      	ldr	r3, [pc, #692]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e40:	2104      	movs	r1, #4
 8003e42:	430a      	orrs	r2, r1
 8003e44:	621a      	str	r2, [r3, #32]
 8003e46:	4bab      	ldr	r3, [pc, #684]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	4baa      	ldr	r3, [pc, #680]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	621a      	str	r2, [r3, #32]
 8003e52:	e00b      	b.n	8003e6c <HAL_RCC_OscConfig+0x398>
 8003e54:	4ba7      	ldr	r3, [pc, #668]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	4ba6      	ldr	r3, [pc, #664]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	621a      	str	r2, [r3, #32]
 8003e60:	4ba4      	ldr	r3, [pc, #656]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	4ba3      	ldr	r3, [pc, #652]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e66:	2104      	movs	r1, #4
 8003e68:	438a      	bics	r2, r1
 8003e6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d014      	beq.n	8003e9e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fe f842 	bl	8001efc <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	e009      	b.n	8003e92 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe f83d 	bl	8001efc <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	4a9b      	ldr	r2, [pc, #620]	; (80040f8 <HAL_RCC_OscConfig+0x624>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e12b      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e92:	4b98      	ldr	r3, [pc, #608]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	2202      	movs	r2, #2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x3aa>
 8003e9c:	e013      	b.n	8003ec6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe f82d 	bl	8001efc <HAL_GetTick>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea6:	e009      	b.n	8003ebc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fe f828 	bl	8001efc <HAL_GetTick>
 8003eac:	0002      	movs	r2, r0
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	4a91      	ldr	r2, [pc, #580]	; (80040f8 <HAL_RCC_OscConfig+0x624>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e116      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ebc:	4b8d      	ldr	r3, [pc, #564]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ec6:	231f      	movs	r3, #31
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed0:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	4b87      	ldr	r3, [pc, #540]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003ed6:	4989      	ldr	r1, [pc, #548]	; (80040fc <HAL_RCC_OscConfig+0x628>)
 8003ed8:	400a      	ands	r2, r1
 8003eda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d12a      	bne.n	8003f44 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003eee:	4b81      	ldr	r3, [pc, #516]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef2:	4b80      	ldr	r3, [pc, #512]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003ef4:	2104      	movs	r1, #4
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003efa:	4b7e      	ldr	r3, [pc, #504]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efe:	4b7d      	ldr	r3, [pc, #500]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f00:	2101      	movs	r1, #1
 8003f02:	430a      	orrs	r2, r1
 8003f04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7fd fff9 	bl	8001efc <HAL_GetTick>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f10:	f7fd fff4 	bl	8001efc <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0e3      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f22:	4b74      	ldr	r3, [pc, #464]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	2202      	movs	r2, #2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d0f1      	beq.n	8003f10 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f2c:	4b71      	ldr	r3, [pc, #452]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	22f8      	movs	r2, #248	; 0xf8
 8003f32:	4393      	bics	r3, r2
 8003f34:	0019      	movs	r1, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	00da      	lsls	r2, r3, #3
 8003f3c:	4b6d      	ldr	r3, [pc, #436]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34
 8003f42:	e034      	b.n	8003fae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	3305      	adds	r3, #5
 8003f4a:	d111      	bne.n	8003f70 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f4c:	4b69      	ldr	r3, [pc, #420]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f50:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f52:	2104      	movs	r1, #4
 8003f54:	438a      	bics	r2, r1
 8003f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f58:	4b66      	ldr	r3, [pc, #408]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	22f8      	movs	r2, #248	; 0xf8
 8003f5e:	4393      	bics	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	00da      	lsls	r2, r3, #3
 8003f68:	4b62      	ldr	r3, [pc, #392]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f6e:	e01e      	b.n	8003fae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f70:	4b60      	ldr	r3, [pc, #384]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f74:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f76:	2104      	movs	r1, #4
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f7c:	4b5d      	ldr	r3, [pc, #372]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f80:	4b5c      	ldr	r3, [pc, #368]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003f82:	2101      	movs	r1, #1
 8003f84:	438a      	bics	r2, r1
 8003f86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7fd ffb8 	bl	8001efc <HAL_GetTick>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f92:	f7fd ffb3 	bl	8001efc <HAL_GetTick>
 8003f96:	0002      	movs	r2, r0
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0a2      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fa4:	4b53      	ldr	r3, [pc, #332]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	2202      	movs	r2, #2
 8003faa:	4013      	ands	r3, r2
 8003fac:	d1f1      	bne.n	8003f92 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d100      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4e4>
 8003fb6:	e097      	b.n	80040e8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb8:	4b4e      	ldr	r3, [pc, #312]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	220c      	movs	r2, #12
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d100      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x4f2>
 8003fc4:	e06b      	b.n	800409e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d14c      	bne.n	8004068 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fce:	4b49      	ldr	r3, [pc, #292]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003fd4:	494a      	ldr	r1, [pc, #296]	; (8004100 <HAL_RCC_OscConfig+0x62c>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fd ff8f 	bl	8001efc <HAL_GetTick>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd ff8a 	bl	8001efc <HAL_GetTick>
 8003fe8:	0002      	movs	r2, r0
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e079      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff6:	4b3f      	ldr	r3, [pc, #252]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	049b      	lsls	r3, r3, #18
 8003ffe:	4013      	ands	r3, r2
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004002:	4b3c      	ldr	r3, [pc, #240]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	220f      	movs	r2, #15
 8004008:	4393      	bics	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8004012:	430a      	orrs	r2, r1
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c
 8004016:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a3a      	ldr	r2, [pc, #232]	; (8004104 <HAL_RCC_OscConfig+0x630>)
 800401c:	4013      	ands	r3, r2
 800401e:	0019      	movs	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	431a      	orrs	r2, r3
 800402a:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004030:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b2f      	ldr	r3, [pc, #188]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	0449      	lsls	r1, r1, #17
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fd ff5d 	bl	8001efc <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd ff58 	bl	8001efc <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e047      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	049b      	lsls	r3, r3, #18
 8004062:	4013      	ands	r3, r2
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x574>
 8004066:	e03f      	b.n	80040e8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 800406e:	4924      	ldr	r1, [pc, #144]	; (8004100 <HAL_RCC_OscConfig+0x62c>)
 8004070:	400a      	ands	r2, r1
 8004072:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd ff42 	bl	8001efc <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407e:	f7fd ff3d 	bl	8001efc <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e02c      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004090:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	049b      	lsls	r3, r3, #18
 8004098:	4013      	ands	r3, r2
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x5aa>
 800409c:	e024      	b.n	80040e8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e01f      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_OscConfig+0x620>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	025b      	lsls	r3, r3, #9
 80040bc:	401a      	ands	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d10e      	bne.n	80040e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	220f      	movs	r2, #15
 80040ca:	401a      	ands	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	23f0      	movs	r3, #240	; 0xf0
 80040d8:	039b      	lsls	r3, r3, #14
 80040da:	401a      	ands	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	0018      	movs	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b008      	add	sp, #32
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	40021000 	.word	0x40021000
 80040f8:	00001388 	.word	0x00001388
 80040fc:	efffffff 	.word	0xefffffff
 8004100:	feffffff 	.word	0xfeffffff
 8004104:	ffc2ffff 	.word	0xffc2ffff

08004108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0b3      	b.n	8004284 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800411c:	4b5b      	ldr	r3, [pc, #364]	; (800428c <HAL_RCC_ClockConfig+0x184>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d911      	bls.n	800414e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b58      	ldr	r3, [pc, #352]	; (800428c <HAL_RCC_ClockConfig+0x184>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2201      	movs	r2, #1
 8004130:	4393      	bics	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	4b55      	ldr	r3, [pc, #340]	; (800428c <HAL_RCC_ClockConfig+0x184>)
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_ClockConfig+0x184>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2201      	movs	r2, #1
 8004142:	4013      	ands	r3, r2
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e09a      	b.n	8004284 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2202      	movs	r2, #2
 8004154:	4013      	ands	r3, r2
 8004156:	d015      	beq.n	8004184 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2204      	movs	r2, #4
 800415e:	4013      	ands	r3, r2
 8004160:	d006      	beq.n	8004170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004162:	4b4b      	ldr	r3, [pc, #300]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	4b4a      	ldr	r3, [pc, #296]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 8004168:	21e0      	movs	r1, #224	; 0xe0
 800416a:	00c9      	lsls	r1, r1, #3
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	4b47      	ldr	r3, [pc, #284]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	22f0      	movs	r2, #240	; 0xf0
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	4b44      	ldr	r3, [pc, #272]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2201      	movs	r2, #1
 800418a:	4013      	ands	r3, r2
 800418c:	d040      	beq.n	8004210 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	029b      	lsls	r3, r3, #10
 800419e:	4013      	ands	r3, r2
 80041a0:	d114      	bne.n	80041cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e06e      	b.n	8004284 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ae:	4b38      	ldr	r3, [pc, #224]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	049b      	lsls	r3, r3, #18
 80041b6:	4013      	ands	r3, r2
 80041b8:	d108      	bne.n	80041cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e062      	b.n	8004284 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041be:	4b34      	ldr	r3, [pc, #208]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2202      	movs	r2, #2
 80041c4:	4013      	ands	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e05b      	b.n	8004284 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041cc:	4b30      	ldr	r3, [pc, #192]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2203      	movs	r2, #3
 80041d2:	4393      	bics	r3, r2
 80041d4:	0019      	movs	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	4b2d      	ldr	r3, [pc, #180]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e0:	f7fd fe8c 	bl	8001efc <HAL_GetTick>
 80041e4:	0003      	movs	r3, r0
 80041e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e8:	e009      	b.n	80041fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ea:	f7fd fe87 	bl	8001efc <HAL_GetTick>
 80041ee:	0002      	movs	r2, r0
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <HAL_RCC_ClockConfig+0x18c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e042      	b.n	8004284 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	220c      	movs	r2, #12
 8004204:	401a      	ands	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	429a      	cmp	r2, r3
 800420e:	d1ec      	bne.n	80041ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004210:	4b1e      	ldr	r3, [pc, #120]	; (800428c <HAL_RCC_ClockConfig+0x184>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2201      	movs	r2, #1
 8004216:	4013      	ands	r3, r2
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d211      	bcs.n	8004242 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b1b      	ldr	r3, [pc, #108]	; (800428c <HAL_RCC_ClockConfig+0x184>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	4393      	bics	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <HAL_RCC_ClockConfig+0x184>)
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004230:	4b16      	ldr	r3, [pc, #88]	; (800428c <HAL_RCC_ClockConfig+0x184>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2201      	movs	r2, #1
 8004236:	4013      	ands	r3, r2
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e020      	b.n	8004284 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2204      	movs	r2, #4
 8004248:	4013      	ands	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800424c:	4b10      	ldr	r3, [pc, #64]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HAL_RCC_ClockConfig+0x190>)
 8004252:	4013      	ands	r3, r2
 8004254:	0019      	movs	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004260:	f000 f820 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8004264:	0001      	movs	r1, r0
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x188>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	220f      	movs	r2, #15
 800426e:	4013      	ands	r3, r2
 8004270:	4a0a      	ldr	r2, [pc, #40]	; (800429c <HAL_RCC_ClockConfig+0x194>)
 8004272:	5cd3      	ldrb	r3, [r2, r3]
 8004274:	000a      	movs	r2, r1
 8004276:	40da      	lsrs	r2, r3
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x198>)
 800427a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800427c:	2003      	movs	r0, #3
 800427e:	f7fd fdf7 	bl	8001e70 <HAL_InitTick>
  
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b004      	add	sp, #16
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40022000 	.word	0x40022000
 8004290:	40021000 	.word	0x40021000
 8004294:	00001388 	.word	0x00001388
 8004298:	fffff8ff 	.word	0xfffff8ff
 800429c:	08006668 	.word	0x08006668
 80042a0:	20000008 	.word	0x20000008

080042a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	220c      	movs	r2, #12
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d002      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x30>
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d003      	beq.n	80042da <HAL_RCC_GetSysClockFreq+0x36>
 80042d2:	e02c      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042d4:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042d6:	613b      	str	r3, [r7, #16]
      break;
 80042d8:	e02c      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	0c9b      	lsrs	r3, r3, #18
 80042de:	220f      	movs	r2, #15
 80042e0:	4013      	ands	r3, r2
 80042e2:	4a19      	ldr	r2, [pc, #100]	; (8004348 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042e4:	5cd3      	ldrb	r3, [r2, r3]
 80042e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	220f      	movs	r2, #15
 80042ee:	4013      	ands	r3, r2
 80042f0:	4a16      	ldr	r2, [pc, #88]	; (800434c <HAL_RCC_GetSysClockFreq+0xa8>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	025b      	lsls	r3, r3, #9
 80042fc:	4013      	ands	r3, r2
 80042fe:	d009      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	4810      	ldr	r0, [pc, #64]	; (8004344 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004304:	f7fb ff12 	bl	800012c <__udivsi3>
 8004308:	0003      	movs	r3, r0
 800430a:	001a      	movs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4353      	muls	r3, r2
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e009      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	000a      	movs	r2, r1
 8004318:	0152      	lsls	r2, r2, #5
 800431a:	1a52      	subs	r2, r2, r1
 800431c:	0193      	lsls	r3, r2, #6
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	185b      	adds	r3, r3, r1
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	613b      	str	r3, [r7, #16]
      break;
 800432c:	e002      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004330:	613b      	str	r3, [r7, #16]
      break;
 8004332:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004334:	693b      	ldr	r3, [r7, #16]
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b006      	add	sp, #24
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	40021000 	.word	0x40021000
 8004344:	007a1200 	.word	0x007a1200
 8004348:	08006680 	.word	0x08006680
 800434c:	08006690 	.word	0x08006690

08004350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b02      	ldr	r3, [pc, #8]	; (8004360 <HAL_RCC_GetHCLKFreq+0x10>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	20000008 	.word	0x20000008

08004364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004368:	f7ff fff2 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 800436c:	0001      	movs	r1, r0
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	2207      	movs	r2, #7
 8004376:	4013      	ands	r3, r2
 8004378:	4a04      	ldr	r2, [pc, #16]	; (800438c <HAL_RCC_GetPCLK1Freq+0x28>)
 800437a:	5cd3      	ldrb	r3, [r2, r3]
 800437c:	40d9      	lsrs	r1, r3
 800437e:	000b      	movs	r3, r1
}    
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	40021000 	.word	0x40021000
 800438c:	08006678 	.word	0x08006678

08004390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	025b      	lsls	r3, r3, #9
 80043a8:	4013      	ands	r3, r2
 80043aa:	d100      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80043ac:	e08e      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80043ae:	2017      	movs	r0, #23
 80043b0:	183b      	adds	r3, r7, r0
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	055b      	lsls	r3, r3, #21
 80043be:	4013      	ands	r3, r2
 80043c0:	d110      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	4b5c      	ldr	r3, [pc, #368]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0549      	lsls	r1, r1, #21
 80043cc:	430a      	orrs	r2, r1
 80043ce:	61da      	str	r2, [r3, #28]
 80043d0:	4b58      	ldr	r3, [pc, #352]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	055b      	lsls	r3, r3, #21
 80043d8:	4013      	ands	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043de:	183b      	adds	r3, r7, r0
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	4b54      	ldr	r3, [pc, #336]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4013      	ands	r3, r2
 80043ee:	d11a      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f0:	4b51      	ldr	r3, [pc, #324]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b50      	ldr	r3, [pc, #320]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	0049      	lsls	r1, r1, #1
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fe:	f7fd fd7d 	bl	8001efc <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	e008      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004408:	f7fd fd78 	bl	8001efc <HAL_GetTick>
 800440c:	0002      	movs	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e087      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b47      	ldr	r3, [pc, #284]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4013      	ands	r3, r2
 8004424:	d0f0      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004426:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	23c0      	movs	r3, #192	; 0xc0
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4013      	ands	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d034      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	23c0      	movs	r3, #192	; 0xc0
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4013      	ands	r3, r2
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d02c      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004448:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4a3b      	ldr	r2, [pc, #236]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800444e:	4013      	ands	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004452:	4b38      	ldr	r3, [pc, #224]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004454:	6a1a      	ldr	r2, [r3, #32]
 8004456:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0249      	lsls	r1, r1, #9
 800445c:	430a      	orrs	r2, r1
 800445e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004460:	4b34      	ldr	r3, [pc, #208]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	4b33      	ldr	r3, [pc, #204]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004466:	4936      	ldr	r1, [pc, #216]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004468:	400a      	ands	r2, r1
 800446a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800446c:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	4013      	ands	r3, r2
 8004478:	d013      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447a:	f7fd fd3f 	bl	8001efc <HAL_GetTick>
 800447e:	0003      	movs	r3, r0
 8004480:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004482:	e009      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7fd fd3a 	bl	8001efc <HAL_GetTick>
 8004488:	0002      	movs	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e048      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004498:	4b26      	ldr	r3, [pc, #152]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	2202      	movs	r2, #2
 800449e:	4013      	ands	r3, r2
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a2:	4b24      	ldr	r3, [pc, #144]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a25      	ldr	r2, [pc, #148]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	0019      	movs	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	4b20      	ldr	r3, [pc, #128]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044b2:	430a      	orrs	r2, r1
 80044b4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044b6:	2317      	movs	r3, #23
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c0:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044c6:	4920      	ldr	r1, [pc, #128]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	400a      	ands	r2, r1
 80044ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	4013      	ands	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044d6:	4b17      	ldr	r3, [pc, #92]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	2203      	movs	r2, #3
 80044dc:	4393      	bics	r3, r2
 80044de:	0019      	movs	r1, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044e6:	430a      	orrs	r2, r1
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2220      	movs	r2, #32
 80044f0:	4013      	ands	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	2210      	movs	r2, #16
 80044fa:	4393      	bics	r3, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004504:	430a      	orrs	r2, r1
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4013      	ands	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	2240      	movs	r2, #64	; 0x40
 800451a:	4393      	bics	r3, r2
 800451c:	0019      	movs	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	4b04      	ldr	r3, [pc, #16]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004524:	430a      	orrs	r2, r1
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b006      	add	sp, #24
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	40021000 	.word	0x40021000
 8004538:	40007000 	.word	0x40007000
 800453c:	fffffcff 	.word	0xfffffcff
 8004540:	fffeffff 	.word	0xfffeffff
 8004544:	00001388 	.word	0x00001388
 8004548:	efffffff 	.word	0xefffffff

0800454c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800454c:	b5b0      	push	{r4, r5, r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004554:	230f      	movs	r3, #15
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e081      	b.n	800466a <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7f5b      	ldrb	r3, [r3, #29]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7fd fae5 	bl	8001b48 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2202      	movs	r2, #2
 8004582:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2210      	movs	r2, #16
 800458c:	4013      	ands	r3, r2
 800458e:	2b10      	cmp	r3, #16
 8004590:	d05c      	beq.n	800464c <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	22ca      	movs	r2, #202	; 0xca
 8004598:	625a      	str	r2, [r3, #36]	; 0x24
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2253      	movs	r2, #83	; 0x53
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80045a2:	250f      	movs	r5, #15
 80045a4:	197c      	adds	r4, r7, r5
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 fa73 	bl	8004a94 <RTC_EnterInitMode>
 80045ae:	0003      	movs	r3, r0
 80045b0:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80045b2:	0028      	movs	r0, r5
 80045b4:	183b      	adds	r3, r7, r0
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d12c      	bne.n	8004616 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	492b      	ldr	r1, [pc, #172]	; (8004674 <HAL_RTC_Init+0x128>)
 80045c8:	400a      	ands	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68d2      	ldr	r2, [r2, #12]
 80045f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6919      	ldr	r1, [r3, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	041a      	lsls	r2, r3, #16
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004608:	183c      	adds	r4, r7, r0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0018      	movs	r0, r3
 800460e:	f000 fa84 	bl	8004b1a <RTC_ExitInitMode>
 8004612:	0003      	movs	r3, r0
 8004614:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004616:	230f      	movs	r3, #15
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d110      	bne.n	8004642 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4913      	ldr	r1, [pc, #76]	; (8004678 <HAL_RTC_Init+0x12c>)
 800462c:	400a      	ands	r2, r1
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	22ff      	movs	r2, #255	; 0xff
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
 800464a:	e003      	b.n	8004654 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800464c:	230f      	movs	r3, #15
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004654:	230f      	movs	r3, #15
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004664:	230f      	movs	r3, #15
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bdb0      	pop	{r4, r5, r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	ff8fffbf 	.word	0xff8fffbf
 8004678:	fffbffff 	.word	0xfffbffff

0800467c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800467c:	b5b0      	push	{r4, r5, r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	7f1b      	ldrb	r3, [r3, #28]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_RTC_SetTime+0x1c>
 8004694:	2302      	movs	r3, #2
 8004696:	e08e      	b.n	80047b6 <HAL_RTC_SetTime+0x13a>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2202      	movs	r2, #2
 80046a2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d125      	bne.n	80046f6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2240      	movs	r2, #64	; 0x40
 80046b2:	4013      	ands	r3, r2
 80046b4:	d102      	bne.n	80046bc <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2200      	movs	r2, #0
 80046ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 fa53 	bl	8004b6c <RTC_ByteToBcd2>
 80046c6:	0003      	movs	r3, r0
 80046c8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	785b      	ldrb	r3, [r3, #1]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 fa4c 	bl	8004b6c <RTC_ByteToBcd2>
 80046d4:	0003      	movs	r3, r0
 80046d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046d8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	789b      	ldrb	r3, [r3, #2]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fa44 	bl	8004b6c <RTC_ByteToBcd2>
 80046e4:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046e6:	0022      	movs	r2, r4
 80046e8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	78db      	ldrb	r3, [r3, #3]
 80046ee:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e017      	b.n	8004726 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2240      	movs	r2, #64	; 0x40
 80046fe:	4013      	ands	r3, r2
 8004700:	d102      	bne.n	8004708 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2200      	movs	r2, #0
 8004706:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	785b      	ldrb	r3, [r3, #1]
 8004712:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004714:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800471a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	22ca      	movs	r2, #202	; 0xca
 800472c:	625a      	str	r2, [r3, #36]	; 0x24
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2253      	movs	r2, #83	; 0x53
 8004734:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004736:	2513      	movs	r5, #19
 8004738:	197c      	adds	r4, r7, r5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f9a9 	bl	8004a94 <RTC_EnterInitMode>
 8004742:	0003      	movs	r3, r0
 8004744:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004746:	0028      	movs	r0, r5
 8004748:	183b      	adds	r3, r7, r0
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d120      	bne.n	8004792 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	491a      	ldr	r1, [pc, #104]	; (80047c0 <HAL_RTC_SetTime+0x144>)
 8004758:	400a      	ands	r2, r1
 800475a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4917      	ldr	r1, [pc, #92]	; (80047c4 <HAL_RTC_SetTime+0x148>)
 8004768:	400a      	ands	r2, r1
 800476a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6899      	ldr	r1, [r3, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	431a      	orrs	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004784:	183c      	adds	r4, r7, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	0018      	movs	r0, r3
 800478a:	f000 f9c6 	bl	8004b1a <RTC_ExitInitMode>
 800478e:	0003      	movs	r3, r0
 8004790:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004792:	2313      	movs	r3, #19
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	22ff      	movs	r2, #255	; 0xff
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]

  return status;
 80047b0:	2313      	movs	r3, #19
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	781b      	ldrb	r3, [r3, #0]
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b006      	add	sp, #24
 80047bc:	bdb0      	pop	{r4, r5, r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	007f7f7f 	.word	0x007f7f7f
 80047c4:	fffbffff 	.word	0xfffbffff

080047c8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	045b      	lsls	r3, r3, #17
 80047ea:	0c5a      	lsrs	r2, r3, #17
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a22      	ldr	r2, [pc, #136]	; (8004880 <HAL_RTC_GetTime+0xb8>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	b2db      	uxtb	r3, r3
 8004802:	223f      	movs	r2, #63	; 0x3f
 8004804:	4013      	ands	r3, r2
 8004806:	b2da      	uxtb	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	b2db      	uxtb	r3, r3
 8004812:	227f      	movs	r2, #127	; 0x7f
 8004814:	4013      	ands	r3, r2
 8004816:	b2da      	uxtb	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	227f      	movs	r2, #127	; 0x7f
 8004822:	4013      	ands	r3, r2
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	0d9b      	lsrs	r3, r3, #22
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2201      	movs	r2, #1
 8004832:	4013      	ands	r3, r2
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11a      	bne.n	8004876 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 f9b2 	bl	8004bae <RTC_Bcd2ToByte>
 800484a:	0003      	movs	r3, r0
 800484c:	001a      	movs	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 f9a9 	bl	8004bae <RTC_Bcd2ToByte>
 800485c:	0003      	movs	r3, r0
 800485e:	001a      	movs	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	789b      	ldrb	r3, [r3, #2]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f9a0 	bl	8004bae <RTC_Bcd2ToByte>
 800486e:	0003      	movs	r3, r0
 8004870:	001a      	movs	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	b006      	add	sp, #24
 800487e:	bd80      	pop	{r7, pc}
 8004880:	007f7f7f 	.word	0x007f7f7f

08004884 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004884:	b5b0      	push	{r4, r5, r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	7f1b      	ldrb	r3, [r3, #28]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_RTC_SetDate+0x1c>
 800489c:	2302      	movs	r3, #2
 800489e:	e07a      	b.n	8004996 <HAL_RTC_SetDate+0x112>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2202      	movs	r2, #2
 80048aa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10e      	bne.n	80048d0 <HAL_RTC_SetDate+0x4c>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	001a      	movs	r2, r3
 80048b8:	2310      	movs	r3, #16
 80048ba:	4013      	ands	r3, r2
 80048bc:	d008      	beq.n	80048d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	785b      	ldrb	r3, [r3, #1]
 80048c2:	2210      	movs	r2, #16
 80048c4:	4393      	bics	r3, r2
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	330a      	adds	r3, #10
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d11c      	bne.n	8004910 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	78db      	ldrb	r3, [r3, #3]
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 f946 	bl	8004b6c <RTC_ByteToBcd2>
 80048e0:	0003      	movs	r3, r0
 80048e2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 f93f 	bl	8004b6c <RTC_ByteToBcd2>
 80048ee:	0003      	movs	r3, r0
 80048f0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048f2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	789b      	ldrb	r3, [r3, #2]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f937 	bl	8004b6c <RTC_ByteToBcd2>
 80048fe:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004900:	0022      	movs	r2, r4
 8004902:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e00e      	b.n	800492e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	78db      	ldrb	r3, [r3, #3]
 8004914:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	785b      	ldrb	r3, [r3, #1]
 800491a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800491c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004922:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	22ca      	movs	r2, #202	; 0xca
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2253      	movs	r2, #83	; 0x53
 800493c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800493e:	2513      	movs	r5, #19
 8004940:	197c      	adds	r4, r7, r5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	0018      	movs	r0, r3
 8004946:	f000 f8a5 	bl	8004a94 <RTC_EnterInitMode>
 800494a:	0003      	movs	r3, r0
 800494c:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800494e:	0028      	movs	r0, r5
 8004950:	183b      	adds	r3, r7, r0
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10c      	bne.n	8004972 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4910      	ldr	r1, [pc, #64]	; (80049a0 <HAL_RTC_SetDate+0x11c>)
 8004960:	400a      	ands	r2, r1
 8004962:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004964:	183c      	adds	r4, r7, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	0018      	movs	r0, r3
 800496a:	f000 f8d6 	bl	8004b1a <RTC_ExitInitMode>
 800496e:	0003      	movs	r3, r0
 8004970:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004972:	2313      	movs	r3, #19
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	22ff      	movs	r2, #255	; 0xff
 8004988:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]

  return status;
 8004990:	2313      	movs	r3, #19
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	781b      	ldrb	r3, [r3, #0]
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b006      	add	sp, #24
 800499c:	bdb0      	pop	{r4, r5, r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	00ffff3f 	.word	0x00ffff3f

080049a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <HAL_RTC_GetDate+0x9c>)
 80049bc:	4013      	ands	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	221f      	movs	r2, #31
 80049d2:	4013      	ands	r3, r2
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	223f      	movs	r2, #63	; 0x3f
 80049e0:	4013      	ands	r3, r2
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	0b5b      	lsrs	r3, r3, #13
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2207      	movs	r2, #7
 80049f0:	4013      	ands	r3, r2
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11a      	bne.n	8004a34 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	78db      	ldrb	r3, [r3, #3]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 f8d3 	bl	8004bae <RTC_Bcd2ToByte>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 f8ca 	bl	8004bae <RTC_Bcd2ToByte>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	789b      	ldrb	r3, [r3, #2]
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 f8c1 	bl	8004bae <RTC_Bcd2ToByte>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	001a      	movs	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b006      	add	sp, #24
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	00ffff3f 	.word	0x00ffff3f

08004a44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <HAL_RTC_WaitForSynchro+0x4c>)
 8004a56:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a58:	f7fd fa50 	bl	8001efc <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a60:	e00a      	b.n	8004a78 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a62:	f7fd fa4b 	bl	8001efc <HAL_GetTick>
 8004a66:	0002      	movs	r2, r0
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	23fa      	movs	r3, #250	; 0xfa
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d901      	bls.n	8004a78 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e006      	b.n	8004a86 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	4013      	ands	r3, r2
 8004a82:	d0ee      	beq.n	8004a62 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	0018      	movs	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b004      	add	sp, #16
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	00017959 	.word	0x00017959

08004a94 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	230f      	movs	r3, #15
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2240      	movs	r2, #64	; 0x40
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d12b      	bne.n	8004b0c <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac4:	f7fd fa1a 	bl	8001efc <HAL_GetTick>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004acc:	e013      	b.n	8004af6 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ace:	f7fd fa15 	bl	8001efc <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad2      	subs	r2, r2, r3
 8004ad8:	200f      	movs	r0, #15
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	1839      	adds	r1, r7, r0
 8004ade:	7809      	ldrb	r1, [r1, #0]
 8004ae0:	7019      	strb	r1, [r3, #0]
 8004ae2:	23fa      	movs	r3, #250	; 0xfa
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d905      	bls.n	8004af6 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2204      	movs	r2, #4
 8004aee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004af0:	183b      	adds	r3, r7, r0
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2240      	movs	r2, #64	; 0x40
 8004afe:	4013      	ands	r3, r2
 8004b00:	d104      	bne.n	8004b0c <RTC_EnterInitMode+0x78>
 8004b02:	230f      	movs	r3, #15
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d1e0      	bne.n	8004ace <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004b0c:	230f      	movs	r3, #15
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	781b      	ldrb	r3, [r3, #0]
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b1a:	b590      	push	{r4, r7, lr}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b22:	240f      	movs	r4, #15
 8004b24:	193b      	adds	r3, r7, r4
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2180      	movs	r1, #128	; 0x80
 8004b36:	438a      	bics	r2, r1
 8004b38:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2220      	movs	r2, #32
 8004b42:	4013      	ands	r3, r2
 8004b44:	d10b      	bne.n	8004b5e <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff ff7b 	bl	8004a44 <HAL_RTC_WaitForSynchro>
 8004b4e:	1e03      	subs	r3, r0, #0
 8004b50:	d005      	beq.n	8004b5e <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004b58:	193b      	adds	r3, r7, r4
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004b5e:	230f      	movs	r3, #15
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	781b      	ldrb	r3, [r3, #0]
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b005      	add	sp, #20
 8004b6a:	bd90      	pop	{r4, r7, pc}

08004b6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	0002      	movs	r2, r0
 8004b74:	1dfb      	adds	r3, r7, #7
 8004b76:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004b7c:	e007      	b.n	8004b8e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004b84:	1dfb      	adds	r3, r7, #7
 8004b86:	1dfa      	adds	r2, r7, #7
 8004b88:	7812      	ldrb	r2, [r2, #0]
 8004b8a:	3a0a      	subs	r2, #10
 8004b8c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004b8e:	1dfb      	adds	r3, r7, #7
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b09      	cmp	r3, #9
 8004b94:	d8f3      	bhi.n	8004b7e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	1dfb      	adds	r3, r7, #7
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	b2db      	uxtb	r3, r3
}
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b004      	add	sp, #16
 8004bac:	bd80      	pop	{r7, pc}

08004bae <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	0002      	movs	r2, r0
 8004bb6:	1dfb      	adds	r3, r7, #7
 8004bb8:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004bbe:	1dfb      	adds	r3, r7, #7
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	0013      	movs	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	1dfb      	adds	r3, r7, #7
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	210f      	movs	r1, #15
 8004bdc:	400b      	ands	r3, r1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	18d3      	adds	r3, r2, r3
 8004be2:	b2db      	uxtb	r3, r3
}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b004      	add	sp, #16
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e042      	b.n	8004c84 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	223d      	movs	r2, #61	; 0x3d
 8004c02:	5c9b      	ldrb	r3, [r3, r2]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	223c      	movs	r2, #60	; 0x3c
 8004c0e:	2100      	movs	r1, #0
 8004c10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7fc ffaf 	bl	8001b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	223d      	movs	r2, #61	; 0x3d
 8004c1e:	2102      	movs	r1, #2
 8004c20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	0010      	movs	r0, r2
 8004c2e:	f000 fa3f 	bl	80050b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2246      	movs	r2, #70	; 0x46
 8004c36:	2101      	movs	r1, #1
 8004c38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	223e      	movs	r2, #62	; 0x3e
 8004c3e:	2101      	movs	r1, #1
 8004c40:	5499      	strb	r1, [r3, r2]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	223f      	movs	r2, #63	; 0x3f
 8004c46:	2101      	movs	r1, #1
 8004c48:	5499      	strb	r1, [r3, r2]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2240      	movs	r2, #64	; 0x40
 8004c4e:	2101      	movs	r1, #1
 8004c50:	5499      	strb	r1, [r3, r2]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2241      	movs	r2, #65	; 0x41
 8004c56:	2101      	movs	r1, #1
 8004c58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2242      	movs	r2, #66	; 0x42
 8004c5e:	2101      	movs	r1, #1
 8004c60:	5499      	strb	r1, [r3, r2]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2243      	movs	r2, #67	; 0x43
 8004c66:	2101      	movs	r1, #1
 8004c68:	5499      	strb	r1, [r3, r2]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2244      	movs	r2, #68	; 0x44
 8004c6e:	2101      	movs	r1, #1
 8004c70:	5499      	strb	r1, [r3, r2]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2245      	movs	r2, #69	; 0x45
 8004c76:	2101      	movs	r1, #1
 8004c78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	223d      	movs	r2, #61	; 0x3d
 8004c7e:	2101      	movs	r1, #1
 8004c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d124      	bne.n	8004cec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d11d      	bne.n	8004cec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	4252      	negs	r2, r2
 8004cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 f9d6 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e007      	b.n	8004ce6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f000 f9c9 	bl	8005070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f9d5 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d125      	bne.n	8004d46 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2204      	movs	r2, #4
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d11e      	bne.n	8004d46 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2205      	movs	r2, #5
 8004d0e:	4252      	negs	r2, r2
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	23c0      	movs	r3, #192	; 0xc0
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4013      	ands	r3, r2
 8004d24:	d004      	beq.n	8004d30 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 f9a9 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004d2e:	e007      	b.n	8004d40 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f99c 	bl	8005070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f000 f9a8 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d124      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d11d      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2209      	movs	r2, #9
 8004d68:	4252      	negs	r2, r2
 8004d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2203      	movs	r2, #3
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 f97d 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004d86:	e007      	b.n	8004d98 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 f970 	bl	8005070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	0018      	movs	r0, r3
 8004d94:	f000 f97c 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2210      	movs	r2, #16
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d125      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2210      	movs	r2, #16
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d11e      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2211      	movs	r2, #17
 8004dc0:	4252      	negs	r2, r2
 8004dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	23c0      	movs	r3, #192	; 0xc0
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 f950 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e007      	b.n	8004df2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f000 f943 	bl	8005070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 f94f 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10f      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d108      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	4252      	negs	r2, r2
 8004e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 f91d 	bl	8005060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b80      	cmp	r3, #128	; 0x80
 8004e32:	d10f      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2280      	movs	r2, #128	; 0x80
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b80      	cmp	r3, #128	; 0x80
 8004e40:	d108      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2281      	movs	r2, #129	; 0x81
 8004e48:	4252      	negs	r2, r2
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 faae 	bl	80053b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d10f      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2240      	movs	r2, #64	; 0x40
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d108      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2241      	movs	r2, #65	; 0x41
 8004e76:	4252      	negs	r2, r2
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f000 f90f 	bl	80050a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d10f      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d108      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2221      	movs	r2, #33	; 0x21
 8004ea4:	4252      	negs	r2, r2
 8004ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 fa78 	bl	80053a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec2:	230f      	movs	r3, #15
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	223c      	movs	r2, #60	; 0x3c
 8004ece:	5c9b      	ldrb	r3, [r3, r2]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIM_ConfigClockSource+0x20>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e0bc      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x19a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	223c      	movs	r2, #60	; 0x3c
 8004edc:	2101      	movs	r1, #1
 8004ede:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	223d      	movs	r2, #61	; 0x3d
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2277      	movs	r2, #119	; 0x77
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a58      	ldr	r2, [pc, #352]	; (800505c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2280      	movs	r2, #128	; 0x80
 8004f0e:	0192      	lsls	r2, r2, #6
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d040      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0xde>
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	0192      	lsls	r2, r2, #6
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d900      	bls.n	8004f1e <HAL_TIM_ConfigClockSource+0x66>
 8004f1c:	e088      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
 8004f1e:	2280      	movs	r2, #128	; 0x80
 8004f20:	0152      	lsls	r2, r2, #5
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d100      	bne.n	8004f28 <HAL_TIM_ConfigClockSource+0x70>
 8004f26:	e088      	b.n	800503a <HAL_TIM_ConfigClockSource+0x182>
 8004f28:	2280      	movs	r2, #128	; 0x80
 8004f2a:	0152      	lsls	r2, r2, #5
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d900      	bls.n	8004f32 <HAL_TIM_ConfigClockSource+0x7a>
 8004f30:	e07e      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
 8004f32:	2b70      	cmp	r3, #112	; 0x70
 8004f34:	d018      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0xb0>
 8004f36:	d900      	bls.n	8004f3a <HAL_TIM_ConfigClockSource+0x82>
 8004f38:	e07a      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
 8004f3a:	2b60      	cmp	r3, #96	; 0x60
 8004f3c:	d04f      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x126>
 8004f3e:	d900      	bls.n	8004f42 <HAL_TIM_ConfigClockSource+0x8a>
 8004f40:	e076      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
 8004f42:	2b50      	cmp	r3, #80	; 0x50
 8004f44:	d03b      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x106>
 8004f46:	d900      	bls.n	8004f4a <HAL_TIM_ConfigClockSource+0x92>
 8004f48:	e072      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	d057      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x146>
 8004f4e:	d900      	bls.n	8004f52 <HAL_TIM_ConfigClockSource+0x9a>
 8004f50:	e06e      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
 8004f52:	2b30      	cmp	r3, #48	; 0x30
 8004f54:	d063      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x166>
 8004f56:	d86b      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d060      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x166>
 8004f5c:	d868      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d05d      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x166>
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d05b      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x166>
 8004f66:	e063      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6899      	ldr	r1, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f000 f994 	bl	80052a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2277      	movs	r2, #119	; 0x77
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]
      break;
 8004f94:	e052      	b.n	800503c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f000 f97d 	bl	80052a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	01c9      	lsls	r1, r1, #7
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
      break;
 8004fbc:	e03e      	b.n	800503c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	001a      	movs	r2, r3
 8004fcc:	f000 f8f0 	bl	80051b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2150      	movs	r1, #80	; 0x50
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 f94a 	bl	8005270 <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e02e      	b.n	800503c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	001a      	movs	r2, r3
 8004fec:	f000 f90e 	bl	800520c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2160      	movs	r1, #96	; 0x60
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 f93a 	bl	8005270 <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e01e      	b.n	800503c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	001a      	movs	r2, r3
 800500c:	f000 f8d0 	bl	80051b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2140      	movs	r1, #64	; 0x40
 8005016:	0018      	movs	r0, r3
 8005018:	f000 f92a 	bl	8005270 <TIM_ITRx_SetConfig>
      break;
 800501c:	e00e      	b.n	800503c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	0019      	movs	r1, r3
 8005028:	0010      	movs	r0, r2
 800502a:	f000 f921 	bl	8005270 <TIM_ITRx_SetConfig>
      break;
 800502e:	e005      	b.n	800503c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005030:	230f      	movs	r3, #15
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
      break;
 8005038:	e000      	b.n	800503c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800503a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	223d      	movs	r2, #61	; 0x3d
 8005040:	2101      	movs	r1, #1
 8005042:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	223c      	movs	r2, #60	; 0x3c
 8005048:	2100      	movs	r1, #0
 800504a:	5499      	strb	r1, [r3, r2]

  return status;
 800504c:	230f      	movs	r3, #15
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	781b      	ldrb	r3, [r3, #0]
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b004      	add	sp, #16
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	ffff00ff 	.word	0xffff00ff

08005060 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005068:	46c0      	nop			; (mov r8, r8)
 800506a:	46bd      	mov	sp, r7
 800506c:	b002      	add	sp, #8
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005078:	46c0      	nop			; (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	b002      	add	sp, #8
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	b002      	add	sp, #8
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	b002      	add	sp, #8
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a34      	ldr	r2, [pc, #208]	; (8005194 <TIM_Base_SetConfig+0xe4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d008      	beq.n	80050da <TIM_Base_SetConfig+0x2a>
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d003      	beq.n	80050da <TIM_Base_SetConfig+0x2a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a30      	ldr	r2, [pc, #192]	; (8005198 <TIM_Base_SetConfig+0xe8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2270      	movs	r2, #112	; 0x70
 80050de:	4393      	bics	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a29      	ldr	r2, [pc, #164]	; (8005194 <TIM_Base_SetConfig+0xe4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d018      	beq.n	8005126 <TIM_Base_SetConfig+0x76>
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	05db      	lsls	r3, r3, #23
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d013      	beq.n	8005126 <TIM_Base_SetConfig+0x76>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a25      	ldr	r2, [pc, #148]	; (8005198 <TIM_Base_SetConfig+0xe8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00f      	beq.n	8005126 <TIM_Base_SetConfig+0x76>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a24      	ldr	r2, [pc, #144]	; (800519c <TIM_Base_SetConfig+0xec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_Base_SetConfig+0x76>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <TIM_Base_SetConfig+0xf0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_Base_SetConfig+0x76>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <TIM_Base_SetConfig+0xf4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_Base_SetConfig+0x76>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <TIM_Base_SetConfig+0xf8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <TIM_Base_SetConfig+0xfc>)
 800512a:	4013      	ands	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	4393      	bics	r3, r2
 800513e:	001a      	movs	r2, r3
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <TIM_Base_SetConfig+0xe4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0xce>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a0d      	ldr	r2, [pc, #52]	; (80051a0 <TIM_Base_SetConfig+0xf0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0xce>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <TIM_Base_SetConfig+0xf4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0xce>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a0b      	ldr	r2, [pc, #44]	; (80051a8 <TIM_Base_SetConfig+0xf8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d103      	bne.n	8005186 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	615a      	str	r2, [r3, #20]
}
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46bd      	mov	sp, r7
 8005190:	b004      	add	sp, #16
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40000400 	.word	0x40000400
 800519c:	40002000 	.word	0x40002000
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	fffffcff 	.word	0xfffffcff

080051b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	2201      	movs	r2, #1
 80051c8:	4393      	bics	r3, r2
 80051ca:	001a      	movs	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	22f0      	movs	r2, #240	; 0xf0
 80051da:	4393      	bics	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	220a      	movs	r2, #10
 80051ec:	4393      	bics	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	621a      	str	r2, [r3, #32]
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b006      	add	sp, #24
 800520a:	bd80      	pop	{r7, pc}

0800520c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	2210      	movs	r2, #16
 800521e:	4393      	bics	r3, r2
 8005220:	001a      	movs	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	4a0d      	ldr	r2, [pc, #52]	; (800526c <TIM_TI2_ConfigInputStage+0x60>)
 8005236:	4013      	ands	r3, r2
 8005238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	031b      	lsls	r3, r3, #12
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	22a0      	movs	r2, #160	; 0xa0
 8005248:	4393      	bics	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	46bd      	mov	sp, r7
 8005266:	b006      	add	sp, #24
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	ffff0fff 	.word	0xffff0fff

08005270 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2270      	movs	r2, #112	; 0x70
 8005284:	4393      	bics	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	2207      	movs	r2, #7
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b004      	add	sp, #16
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <TIM_ETR_SetConfig+0x3c>)
 80052bc:	4013      	ands	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	021a      	lsls	r2, r3, #8
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b006      	add	sp, #24
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	ffff00ff 	.word	0xffff00ff

080052e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	223c      	movs	r2, #60	; 0x3c
 80052f2:	5c9b      	ldrb	r3, [r3, r2]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e047      	b.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	223c      	movs	r2, #60	; 0x3c
 8005300:	2101      	movs	r1, #1
 8005302:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	223d      	movs	r2, #61	; 0x3d
 8005308:	2102      	movs	r1, #2
 800530a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2270      	movs	r2, #112	; 0x70
 8005320:	4393      	bics	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00f      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	05db      	lsls	r3, r3, #23
 8005348:	429a      	cmp	r2, r3
 800534a:	d009      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a11      	ldr	r2, [pc, #68]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a10      	ldr	r2, [pc, #64]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d10c      	bne.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	4393      	bics	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	4313      	orrs	r3, r2
 8005370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	223d      	movs	r2, #61	; 0x3d
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	223c      	movs	r2, #60	; 0x3c
 8005386:	2100      	movs	r1, #0
 8005388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b004      	add	sp, #16
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40000400 	.word	0x40000400
 800539c:	40014000 	.word	0x40014000

080053a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b002      	add	sp, #8
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b8:	46c0      	nop			; (mov r8, r8)
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b002      	add	sp, #8
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e044      	b.n	800545c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2278      	movs	r2, #120	; 0x78
 80053de:	2100      	movs	r1, #0
 80053e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f7fc fbeb 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2224      	movs	r2, #36	; 0x24
 80053ee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2101      	movs	r1, #1
 80053fc:	438a      	bics	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f8d0 	bl	80055a8 <UART_SetConfig>
 8005408:	0003      	movs	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e024      	b.n	800545c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0018      	movs	r0, r3
 800541e:	f000 fa03 	bl	8005828 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	490d      	ldr	r1, [pc, #52]	; (8005464 <HAL_UART_Init+0xa4>)
 800542e:	400a      	ands	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	212a      	movs	r1, #42	; 0x2a
 800543e:	438a      	bics	r2, r1
 8005440:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2101      	movs	r1, #1
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 fa9b 	bl	8005990 <UART_CheckIdleState>
 800545a:	0003      	movs	r3, r0
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b002      	add	sp, #8
 8005462:	bd80      	pop	{r7, pc}
 8005464:	ffffb7ff 	.word	0xffffb7ff

08005468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	1dbb      	adds	r3, r7, #6
 8005476:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547c:	2b20      	cmp	r3, #32
 800547e:	d000      	beq.n	8005482 <HAL_UART_Transmit+0x1a>
 8005480:	e08d      	b.n	800559e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_UART_Transmit+0x28>
 8005488:	1dbb      	adds	r3, r7, #6
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e085      	b.n	80055a0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	015b      	lsls	r3, r3, #5
 800549c:	429a      	cmp	r2, r3
 800549e:	d109      	bne.n	80054b4 <HAL_UART_Transmit+0x4c>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2201      	movs	r2, #1
 80054ac:	4013      	ands	r3, r2
 80054ae:	d001      	beq.n	80054b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e075      	b.n	80055a0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2284      	movs	r2, #132	; 0x84
 80054b8:	2100      	movs	r1, #0
 80054ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2221      	movs	r2, #33	; 0x21
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054c2:	f7fc fd1b 	bl	8001efc <HAL_GetTick>
 80054c6:	0003      	movs	r3, r0
 80054c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1dba      	adds	r2, r7, #6
 80054ce:	2150      	movs	r1, #80	; 0x50
 80054d0:	8812      	ldrh	r2, [r2, #0]
 80054d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1dba      	adds	r2, r7, #6
 80054d8:	2152      	movs	r1, #82	; 0x52
 80054da:	8812      	ldrh	r2, [r2, #0]
 80054dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	015b      	lsls	r3, r3, #5
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d108      	bne.n	80054fc <HAL_UART_Transmit+0x94>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	e003      	b.n	8005504 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005504:	e030      	b.n	8005568 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	0013      	movs	r3, r2
 8005510:	2200      	movs	r2, #0
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	f000 fae4 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8005518:	1e03      	subs	r3, r0, #0
 800551a:	d004      	beq.n	8005526 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e03c      	b.n	80055a0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	881a      	ldrh	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	05d2      	lsls	r2, r2, #23
 8005536:	0dd2      	lsrs	r2, r2, #23
 8005538:	b292      	uxth	r2, r2
 800553a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	3302      	adds	r3, #2
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	e008      	b.n	8005556 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	b292      	uxth	r2, r2
 800554e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2252      	movs	r2, #82	; 0x52
 800555a:	5a9b      	ldrh	r3, [r3, r2]
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b299      	uxth	r1, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2252      	movs	r2, #82	; 0x52
 8005566:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2252      	movs	r2, #82	; 0x52
 800556c:	5a9b      	ldrh	r3, [r3, r2]
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1c8      	bne.n	8005506 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	0013      	movs	r3, r2
 800557e:	2200      	movs	r2, #0
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	f000 faad 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8005586:	1e03      	subs	r3, r0, #0
 8005588:	d004      	beq.n	8005594 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e005      	b.n	80055a0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b008      	add	sp, #32
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b0:	231e      	movs	r3, #30
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a8d      	ldr	r2, [pc, #564]	; (800580c <UART_SetConfig+0x264>)
 80055d8:	4013      	ands	r3, r2
 80055da:	0019      	movs	r1, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4a88      	ldr	r2, [pc, #544]	; (8005810 <UART_SetConfig+0x268>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	0019      	movs	r1, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a7f      	ldr	r2, [pc, #508]	; (8005814 <UART_SetConfig+0x26c>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a7b      	ldr	r2, [pc, #492]	; (8005818 <UART_SetConfig+0x270>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d127      	bne.n	800567e <UART_SetConfig+0xd6>
 800562e:	4b7b      	ldr	r3, [pc, #492]	; (800581c <UART_SetConfig+0x274>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	2203      	movs	r2, #3
 8005634:	4013      	ands	r3, r2
 8005636:	2b03      	cmp	r3, #3
 8005638:	d00d      	beq.n	8005656 <UART_SetConfig+0xae>
 800563a:	d81b      	bhi.n	8005674 <UART_SetConfig+0xcc>
 800563c:	2b02      	cmp	r3, #2
 800563e:	d014      	beq.n	800566a <UART_SetConfig+0xc2>
 8005640:	d818      	bhi.n	8005674 <UART_SetConfig+0xcc>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <UART_SetConfig+0xa4>
 8005646:	2b01      	cmp	r3, #1
 8005648:	d00a      	beq.n	8005660 <UART_SetConfig+0xb8>
 800564a:	e013      	b.n	8005674 <UART_SetConfig+0xcc>
 800564c:	231f      	movs	r3, #31
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e021      	b.n	800569a <UART_SetConfig+0xf2>
 8005656:	231f      	movs	r3, #31
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	2202      	movs	r2, #2
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e01c      	b.n	800569a <UART_SetConfig+0xf2>
 8005660:	231f      	movs	r3, #31
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	2204      	movs	r2, #4
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	e017      	b.n	800569a <UART_SetConfig+0xf2>
 800566a:	231f      	movs	r3, #31
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	2208      	movs	r2, #8
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e012      	b.n	800569a <UART_SetConfig+0xf2>
 8005674:	231f      	movs	r3, #31
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	2210      	movs	r2, #16
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e00d      	b.n	800569a <UART_SetConfig+0xf2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a67      	ldr	r2, [pc, #412]	; (8005820 <UART_SetConfig+0x278>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d104      	bne.n	8005692 <UART_SetConfig+0xea>
 8005688:	231f      	movs	r3, #31
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	e003      	b.n	800569a <UART_SetConfig+0xf2>
 8005692:	231f      	movs	r3, #31
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	2210      	movs	r2, #16
 8005698:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69da      	ldr	r2, [r3, #28]
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d15c      	bne.n	8005760 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80056a6:	231f      	movs	r3, #31
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d015      	beq.n	80056dc <UART_SetConfig+0x134>
 80056b0:	dc18      	bgt.n	80056e4 <UART_SetConfig+0x13c>
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d00d      	beq.n	80056d2 <UART_SetConfig+0x12a>
 80056b6:	dc15      	bgt.n	80056e4 <UART_SetConfig+0x13c>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <UART_SetConfig+0x11a>
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d005      	beq.n	80056cc <UART_SetConfig+0x124>
 80056c0:	e010      	b.n	80056e4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c2:	f7fe fe4f 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 80056c6:	0003      	movs	r3, r0
 80056c8:	61bb      	str	r3, [r7, #24]
        break;
 80056ca:	e012      	b.n	80056f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056cc:	4b55      	ldr	r3, [pc, #340]	; (8005824 <UART_SetConfig+0x27c>)
 80056ce:	61bb      	str	r3, [r7, #24]
        break;
 80056d0:	e00f      	b.n	80056f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056d2:	f7fe fde7 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 80056d6:	0003      	movs	r3, r0
 80056d8:	61bb      	str	r3, [r7, #24]
        break;
 80056da:	e00a      	b.n	80056f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	61bb      	str	r3, [r7, #24]
        break;
 80056e2:	e006      	b.n	80056f2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056e8:	231e      	movs	r3, #30
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
        break;
 80056f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d100      	bne.n	80056fa <UART_SetConfig+0x152>
 80056f8:	e07a      	b.n	80057f0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	005a      	lsls	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	18d2      	adds	r2, r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	0019      	movs	r1, r3
 800570c:	0010      	movs	r0, r2
 800570e:	f7fa fd0d 	bl	800012c <__udivsi3>
 8005712:	0003      	movs	r3, r0
 8005714:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b0f      	cmp	r3, #15
 800571a:	d91c      	bls.n	8005756 <UART_SetConfig+0x1ae>
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	025b      	lsls	r3, r3, #9
 8005722:	429a      	cmp	r2, r3
 8005724:	d217      	bcs.n	8005756 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	b29a      	uxth	r2, r3
 800572a:	200e      	movs	r0, #14
 800572c:	183b      	adds	r3, r7, r0
 800572e:	210f      	movs	r1, #15
 8005730:	438a      	bics	r2, r1
 8005732:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	085b      	lsrs	r3, r3, #1
 8005738:	b29b      	uxth	r3, r3
 800573a:	2207      	movs	r2, #7
 800573c:	4013      	ands	r3, r2
 800573e:	b299      	uxth	r1, r3
 8005740:	183b      	adds	r3, r7, r0
 8005742:	183a      	adds	r2, r7, r0
 8005744:	8812      	ldrh	r2, [r2, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	183a      	adds	r2, r7, r0
 8005750:	8812      	ldrh	r2, [r2, #0]
 8005752:	60da      	str	r2, [r3, #12]
 8005754:	e04c      	b.n	80057f0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005756:	231e      	movs	r3, #30
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e047      	b.n	80057f0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005760:	231f      	movs	r3, #31
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b08      	cmp	r3, #8
 8005768:	d015      	beq.n	8005796 <UART_SetConfig+0x1ee>
 800576a:	dc18      	bgt.n	800579e <UART_SetConfig+0x1f6>
 800576c:	2b04      	cmp	r3, #4
 800576e:	d00d      	beq.n	800578c <UART_SetConfig+0x1e4>
 8005770:	dc15      	bgt.n	800579e <UART_SetConfig+0x1f6>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <UART_SetConfig+0x1d4>
 8005776:	2b02      	cmp	r3, #2
 8005778:	d005      	beq.n	8005786 <UART_SetConfig+0x1de>
 800577a:	e010      	b.n	800579e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7fe fdf2 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 8005780:	0003      	movs	r3, r0
 8005782:	61bb      	str	r3, [r7, #24]
        break;
 8005784:	e012      	b.n	80057ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005786:	4b27      	ldr	r3, [pc, #156]	; (8005824 <UART_SetConfig+0x27c>)
 8005788:	61bb      	str	r3, [r7, #24]
        break;
 800578a:	e00f      	b.n	80057ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578c:	f7fe fd8a 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8005790:	0003      	movs	r3, r0
 8005792:	61bb      	str	r3, [r7, #24]
        break;
 8005794:	e00a      	b.n	80057ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	61bb      	str	r3, [r7, #24]
        break;
 800579c:	e006      	b.n	80057ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057a2:	231e      	movs	r3, #30
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	2201      	movs	r2, #1
 80057a8:	701a      	strb	r2, [r3, #0]
        break;
 80057aa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01e      	beq.n	80057f0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	085a      	lsrs	r2, r3, #1
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	18d2      	adds	r2, r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	0019      	movs	r1, r3
 80057c2:	0010      	movs	r0, r2
 80057c4:	f7fa fcb2 	bl	800012c <__udivsi3>
 80057c8:	0003      	movs	r3, r0
 80057ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d90a      	bls.n	80057e8 <UART_SetConfig+0x240>
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	025b      	lsls	r3, r3, #9
 80057d8:	429a      	cmp	r2, r3
 80057da:	d205      	bcs.n	80057e8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	e003      	b.n	80057f0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80057e8:	231e      	movs	r3, #30
 80057ea:	18fb      	adds	r3, r7, r3
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057fc:	231e      	movs	r3, #30
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	781b      	ldrb	r3, [r3, #0]
}
 8005802:	0018      	movs	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	b008      	add	sp, #32
 8005808:	bd80      	pop	{r7, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	ffff69f3 	.word	0xffff69f3
 8005810:	ffffcfff 	.word	0xffffcfff
 8005814:	fffff4ff 	.word	0xfffff4ff
 8005818:	40013800 	.word	0x40013800
 800581c:	40021000 	.word	0x40021000
 8005820:	40004400 	.word	0x40004400
 8005824:	007a1200 	.word	0x007a1200

08005828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2201      	movs	r2, #1
 8005836:	4013      	ands	r3, r2
 8005838:	d00b      	beq.n	8005852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a4a      	ldr	r2, [pc, #296]	; (800596c <UART_AdvFeatureConfig+0x144>)
 8005842:	4013      	ands	r3, r2
 8005844:	0019      	movs	r1, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2202      	movs	r2, #2
 8005858:	4013      	ands	r3, r2
 800585a:	d00b      	beq.n	8005874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4a43      	ldr	r2, [pc, #268]	; (8005970 <UART_AdvFeatureConfig+0x148>)
 8005864:	4013      	ands	r3, r2
 8005866:	0019      	movs	r1, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2204      	movs	r2, #4
 800587a:	4013      	ands	r3, r2
 800587c:	d00b      	beq.n	8005896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a3b      	ldr	r2, [pc, #236]	; (8005974 <UART_AdvFeatureConfig+0x14c>)
 8005886:	4013      	ands	r3, r2
 8005888:	0019      	movs	r1, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2208      	movs	r2, #8
 800589c:	4013      	ands	r3, r2
 800589e:	d00b      	beq.n	80058b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4a34      	ldr	r2, [pc, #208]	; (8005978 <UART_AdvFeatureConfig+0x150>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	0019      	movs	r1, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2210      	movs	r2, #16
 80058be:	4013      	ands	r3, r2
 80058c0:	d00b      	beq.n	80058da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a2c      	ldr	r2, [pc, #176]	; (800597c <UART_AdvFeatureConfig+0x154>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	0019      	movs	r1, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2220      	movs	r2, #32
 80058e0:	4013      	ands	r3, r2
 80058e2:	d00b      	beq.n	80058fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	4a25      	ldr	r2, [pc, #148]	; (8005980 <UART_AdvFeatureConfig+0x158>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	0019      	movs	r1, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2240      	movs	r2, #64	; 0x40
 8005902:	4013      	ands	r3, r2
 8005904:	d01d      	beq.n	8005942 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <UART_AdvFeatureConfig+0x15c>)
 800590e:	4013      	ands	r3, r2
 8005910:	0019      	movs	r1, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	035b      	lsls	r3, r3, #13
 8005926:	429a      	cmp	r2, r3
 8005928:	d10b      	bne.n	8005942 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4a15      	ldr	r2, [pc, #84]	; (8005988 <UART_AdvFeatureConfig+0x160>)
 8005932:	4013      	ands	r3, r2
 8005934:	0019      	movs	r1, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	4013      	ands	r3, r2
 800594a:	d00b      	beq.n	8005964 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4a0e      	ldr	r2, [pc, #56]	; (800598c <UART_AdvFeatureConfig+0x164>)
 8005954:	4013      	ands	r3, r2
 8005956:	0019      	movs	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}
 800596c:	fffdffff 	.word	0xfffdffff
 8005970:	fffeffff 	.word	0xfffeffff
 8005974:	fffbffff 	.word	0xfffbffff
 8005978:	ffff7fff 	.word	0xffff7fff
 800597c:	ffffefff 	.word	0xffffefff
 8005980:	ffffdfff 	.word	0xffffdfff
 8005984:	ffefffff 	.word	0xffefffff
 8005988:	ff9fffff 	.word	0xff9fffff
 800598c:	fff7ffff 	.word	0xfff7ffff

08005990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b092      	sub	sp, #72	; 0x48
 8005994:	af02      	add	r7, sp, #8
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2284      	movs	r2, #132	; 0x84
 800599c:	2100      	movs	r1, #0
 800599e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059a0:	f7fc faac 	bl	8001efc <HAL_GetTick>
 80059a4:	0003      	movs	r3, r0
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2208      	movs	r2, #8
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d12c      	bne.n	8005a10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b8:	2280      	movs	r2, #128	; 0x80
 80059ba:	0391      	lsls	r1, r2, #14
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4a46      	ldr	r2, [pc, #280]	; (8005ad8 <UART_CheckIdleState+0x148>)
 80059c0:	9200      	str	r2, [sp, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f000 f88c 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 80059c8:	1e03      	subs	r3, r0, #0
 80059ca:	d021      	beq.n	8005a10 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059cc:	f3ef 8310 	mrs	r3, PRIMASK
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80059d6:	2301      	movs	r3, #1
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	438a      	bics	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2278      	movs	r2, #120	; 0x78
 8005a08:	2100      	movs	r1, #0
 8005a0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e05f      	b.n	8005ad0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2204      	movs	r2, #4
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d146      	bne.n	8005aac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	03d1      	lsls	r1, r2, #15
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4a2c      	ldr	r2, [pc, #176]	; (8005ad8 <UART_CheckIdleState+0x148>)
 8005a28:	9200      	str	r2, [sp, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f000 f858 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8005a30:	1e03      	subs	r3, r0, #0
 8005a32:	d03b      	beq.n	8005aac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a34:	f3ef 8310 	mrs	r3, PRIMASK
 8005a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3e:	2301      	movs	r3, #1
 8005a40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f383 8810 	msr	PRIMASK, r3
}
 8005a48:	46c0      	nop			; (mov r8, r8)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4921      	ldr	r1, [pc, #132]	; (8005adc <UART_CheckIdleState+0x14c>)
 8005a56:	400a      	ands	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f383 8810 	msr	PRIMASK, r3
}
 8005a64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a66:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a70:	2301      	movs	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2101      	movs	r1, #1
 8005a88:	438a      	bics	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f383 8810 	msr	PRIMASK, r3
}
 8005a96:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	2120      	movs	r1, #32
 8005a9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2278      	movs	r2, #120	; 0x78
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e011      	b.n	8005ad0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2280      	movs	r2, #128	; 0x80
 8005ab6:	2120      	movs	r1, #32
 8005ab8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2278      	movs	r2, #120	; 0x78
 8005aca:	2100      	movs	r1, #0
 8005acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b010      	add	sp, #64	; 0x40
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	01ffffff 	.word	0x01ffffff
 8005adc:	fffffedf 	.word	0xfffffedf

08005ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	1dfb      	adds	r3, r7, #7
 8005aee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af0:	e04b      	b.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3301      	adds	r3, #1
 8005af6:	d048      	beq.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af8:	f7fc fa00 	bl	8001efc <HAL_GetTick>
 8005afc:	0002      	movs	r2, r0
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d302      	bcc.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e04b      	b.n	8005baa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d035      	beq.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	2208      	movs	r2, #8
 8005b26:	4013      	ands	r3, r2
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d111      	bne.n	8005b50 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2208      	movs	r2, #8
 8005b32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	0018      	movs	r0, r3
 8005b38:	f000 f83c 	bl	8005bb4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2284      	movs	r2, #132	; 0x84
 8005b40:	2108      	movs	r1, #8
 8005b42:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2278      	movs	r2, #120	; 0x78
 8005b48:	2100      	movs	r1, #0
 8005b4a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e02c      	b.n	8005baa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69da      	ldr	r2, [r3, #28]
 8005b56:	2380      	movs	r3, #128	; 0x80
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d112      	bne.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	0112      	lsls	r2, r2, #4
 8005b6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	0018      	movs	r0, r3
 8005b72:	f000 f81f 	bl	8005bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2284      	movs	r2, #132	; 0x84
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2278      	movs	r2, #120	; 0x78
 8005b82:	2100      	movs	r1, #0
 8005b84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e00f      	b.n	8005baa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	4013      	ands	r3, r2
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	425a      	negs	r2, r3
 8005b9a:	4153      	adcs	r3, r2
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	1dfb      	adds	r3, r7, #7
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d0a4      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b004      	add	sp, #16
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08e      	sub	sp, #56	; 0x38
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc0:	617b      	str	r3, [r7, #20]
  return(result);
 8005bc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f383 8810 	msr	PRIMASK, r3
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4926      	ldr	r1, [pc, #152]	; (8005c78 <UART_EndRxTransfer+0xc4>)
 8005bde:	400a      	ands	r2, r1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f383 8810 	msr	PRIMASK, r3
}
 8005bec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bee:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf2:	623b      	str	r3, [r7, #32]
  return(result);
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	f383 8810 	msr	PRIMASK, r3
}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2101      	movs	r1, #1
 8005c10:	438a      	bics	r2, r1
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	f383 8810 	msr	PRIMASK, r3
}
 8005c1e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d118      	bne.n	8005c5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c28:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c32:	2301      	movs	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f383 8810 	msr	PRIMASK, r3
}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2110      	movs	r1, #16
 8005c4a:	438a      	bics	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f383 8810 	msr	PRIMASK, r3
}
 8005c58:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	2120      	movs	r1, #32
 8005c60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b00e      	add	sp, #56	; 0x38
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	fffffedf 	.word	0xfffffedf

08005c7c <__errno>:
 8005c7c:	4b01      	ldr	r3, [pc, #4]	; (8005c84 <__errno+0x8>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	4770      	bx	lr
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	20000014 	.word	0x20000014

08005c88 <__libc_init_array>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	4d0c      	ldr	r5, [pc, #48]	; (8005cc0 <__libc_init_array+0x38>)
 8005c8e:	4c0d      	ldr	r4, [pc, #52]	; (8005cc4 <__libc_init_array+0x3c>)
 8005c90:	1b64      	subs	r4, r4, r5
 8005c92:	10a4      	asrs	r4, r4, #2
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	d109      	bne.n	8005cac <__libc_init_array+0x24>
 8005c98:	2600      	movs	r6, #0
 8005c9a:	f000 fc8b 	bl	80065b4 <_init>
 8005c9e:	4d0a      	ldr	r5, [pc, #40]	; (8005cc8 <__libc_init_array+0x40>)
 8005ca0:	4c0a      	ldr	r4, [pc, #40]	; (8005ccc <__libc_init_array+0x44>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	42a6      	cmp	r6, r4
 8005ca8:	d105      	bne.n	8005cb6 <__libc_init_array+0x2e>
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	00b3      	lsls	r3, r6, #2
 8005cae:	58eb      	ldr	r3, [r5, r3]
 8005cb0:	4798      	blx	r3
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7ee      	b.n	8005c94 <__libc_init_array+0xc>
 8005cb6:	00b3      	lsls	r3, r6, #2
 8005cb8:	58eb      	ldr	r3, [r5, r3]
 8005cba:	4798      	blx	r3
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	e7f2      	b.n	8005ca6 <__libc_init_array+0x1e>
 8005cc0:	080066d4 	.word	0x080066d4
 8005cc4:	080066d4 	.word	0x080066d4
 8005cc8:	080066d4 	.word	0x080066d4
 8005ccc:	080066d8 	.word	0x080066d8

08005cd0 <memset>:
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	1882      	adds	r2, r0, r2
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d100      	bne.n	8005cda <memset+0xa>
 8005cd8:	4770      	bx	lr
 8005cda:	7019      	strb	r1, [r3, #0]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	e7f9      	b.n	8005cd4 <memset+0x4>

08005ce0 <siprintf>:
 8005ce0:	b40e      	push	{r1, r2, r3}
 8005ce2:	b500      	push	{lr}
 8005ce4:	490b      	ldr	r1, [pc, #44]	; (8005d14 <siprintf+0x34>)
 8005ce6:	b09c      	sub	sp, #112	; 0x70
 8005ce8:	ab1d      	add	r3, sp, #116	; 0x74
 8005cea:	9002      	str	r0, [sp, #8]
 8005cec:	9006      	str	r0, [sp, #24]
 8005cee:	9107      	str	r1, [sp, #28]
 8005cf0:	9104      	str	r1, [sp, #16]
 8005cf2:	4809      	ldr	r0, [pc, #36]	; (8005d18 <siprintf+0x38>)
 8005cf4:	4909      	ldr	r1, [pc, #36]	; (8005d1c <siprintf+0x3c>)
 8005cf6:	cb04      	ldmia	r3!, {r2}
 8005cf8:	9105      	str	r1, [sp, #20]
 8005cfa:	6800      	ldr	r0, [r0, #0]
 8005cfc:	a902      	add	r1, sp, #8
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	f000 f870 	bl	8005de4 <_svfiprintf_r>
 8005d04:	2300      	movs	r3, #0
 8005d06:	9a02      	ldr	r2, [sp, #8]
 8005d08:	7013      	strb	r3, [r2, #0]
 8005d0a:	b01c      	add	sp, #112	; 0x70
 8005d0c:	bc08      	pop	{r3}
 8005d0e:	b003      	add	sp, #12
 8005d10:	4718      	bx	r3
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	7fffffff 	.word	0x7fffffff
 8005d18:	20000014 	.word	0x20000014
 8005d1c:	ffff0208 	.word	0xffff0208

08005d20 <__ssputs_r>:
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	688e      	ldr	r6, [r1, #8]
 8005d24:	b085      	sub	sp, #20
 8005d26:	0007      	movs	r7, r0
 8005d28:	000c      	movs	r4, r1
 8005d2a:	9203      	str	r2, [sp, #12]
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	429e      	cmp	r6, r3
 8005d30:	d83c      	bhi.n	8005dac <__ssputs_r+0x8c>
 8005d32:	2390      	movs	r3, #144	; 0x90
 8005d34:	898a      	ldrh	r2, [r1, #12]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	421a      	tst	r2, r3
 8005d3a:	d034      	beq.n	8005da6 <__ssputs_r+0x86>
 8005d3c:	6909      	ldr	r1, [r1, #16]
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	6960      	ldr	r0, [r4, #20]
 8005d42:	1a5b      	subs	r3, r3, r1
 8005d44:	9302      	str	r3, [sp, #8]
 8005d46:	2303      	movs	r3, #3
 8005d48:	4343      	muls	r3, r0
 8005d4a:	0fdd      	lsrs	r5, r3, #31
 8005d4c:	18ed      	adds	r5, r5, r3
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	9802      	ldr	r0, [sp, #8]
 8005d52:	3301      	adds	r3, #1
 8005d54:	181b      	adds	r3, r3, r0
 8005d56:	106d      	asrs	r5, r5, #1
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	d900      	bls.n	8005d5e <__ssputs_r+0x3e>
 8005d5c:	001d      	movs	r5, r3
 8005d5e:	0553      	lsls	r3, r2, #21
 8005d60:	d532      	bpl.n	8005dc8 <__ssputs_r+0xa8>
 8005d62:	0029      	movs	r1, r5
 8005d64:	0038      	movs	r0, r7
 8005d66:	f000 fb53 	bl	8006410 <_malloc_r>
 8005d6a:	1e06      	subs	r6, r0, #0
 8005d6c:	d109      	bne.n	8005d82 <__ssputs_r+0x62>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	2340      	movs	r3, #64	; 0x40
 8005d74:	2001      	movs	r0, #1
 8005d76:	89a2      	ldrh	r2, [r4, #12]
 8005d78:	4240      	negs	r0, r0
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	b005      	add	sp, #20
 8005d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d82:	9a02      	ldr	r2, [sp, #8]
 8005d84:	6921      	ldr	r1, [r4, #16]
 8005d86:	f000 faba 	bl	80062fe <memcpy>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	4a14      	ldr	r2, [pc, #80]	; (8005de0 <__ssputs_r+0xc0>)
 8005d8e:	401a      	ands	r2, r3
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	4313      	orrs	r3, r2
 8005d94:	81a3      	strh	r3, [r4, #12]
 8005d96:	9b02      	ldr	r3, [sp, #8]
 8005d98:	6126      	str	r6, [r4, #16]
 8005d9a:	18f6      	adds	r6, r6, r3
 8005d9c:	6026      	str	r6, [r4, #0]
 8005d9e:	6165      	str	r5, [r4, #20]
 8005da0:	9e01      	ldr	r6, [sp, #4]
 8005da2:	1aed      	subs	r5, r5, r3
 8005da4:	60a5      	str	r5, [r4, #8]
 8005da6:	9b01      	ldr	r3, [sp, #4]
 8005da8:	429e      	cmp	r6, r3
 8005daa:	d900      	bls.n	8005dae <__ssputs_r+0x8e>
 8005dac:	9e01      	ldr	r6, [sp, #4]
 8005dae:	0032      	movs	r2, r6
 8005db0:	9903      	ldr	r1, [sp, #12]
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	f000 faac 	bl	8006310 <memmove>
 8005db8:	68a3      	ldr	r3, [r4, #8]
 8005dba:	2000      	movs	r0, #0
 8005dbc:	1b9b      	subs	r3, r3, r6
 8005dbe:	60a3      	str	r3, [r4, #8]
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	199e      	adds	r6, r3, r6
 8005dc4:	6026      	str	r6, [r4, #0]
 8005dc6:	e7da      	b.n	8005d7e <__ssputs_r+0x5e>
 8005dc8:	002a      	movs	r2, r5
 8005dca:	0038      	movs	r0, r7
 8005dcc:	f000 fb96 	bl	80064fc <_realloc_r>
 8005dd0:	1e06      	subs	r6, r0, #0
 8005dd2:	d1e0      	bne.n	8005d96 <__ssputs_r+0x76>
 8005dd4:	0038      	movs	r0, r7
 8005dd6:	6921      	ldr	r1, [r4, #16]
 8005dd8:	f000 faae 	bl	8006338 <_free_r>
 8005ddc:	e7c7      	b.n	8005d6e <__ssputs_r+0x4e>
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	fffffb7f 	.word	0xfffffb7f

08005de4 <_svfiprintf_r>:
 8005de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de6:	b0a1      	sub	sp, #132	; 0x84
 8005de8:	9003      	str	r0, [sp, #12]
 8005dea:	001d      	movs	r5, r3
 8005dec:	898b      	ldrh	r3, [r1, #12]
 8005dee:	000f      	movs	r7, r1
 8005df0:	0016      	movs	r6, r2
 8005df2:	061b      	lsls	r3, r3, #24
 8005df4:	d511      	bpl.n	8005e1a <_svfiprintf_r+0x36>
 8005df6:	690b      	ldr	r3, [r1, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10e      	bne.n	8005e1a <_svfiprintf_r+0x36>
 8005dfc:	2140      	movs	r1, #64	; 0x40
 8005dfe:	f000 fb07 	bl	8006410 <_malloc_r>
 8005e02:	6038      	str	r0, [r7, #0]
 8005e04:	6138      	str	r0, [r7, #16]
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d105      	bne.n	8005e16 <_svfiprintf_r+0x32>
 8005e0a:	230c      	movs	r3, #12
 8005e0c:	9a03      	ldr	r2, [sp, #12]
 8005e0e:	3801      	subs	r0, #1
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	b021      	add	sp, #132	; 0x84
 8005e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	ac08      	add	r4, sp, #32
 8005e1e:	6163      	str	r3, [r4, #20]
 8005e20:	3320      	adds	r3, #32
 8005e22:	7663      	strb	r3, [r4, #25]
 8005e24:	3310      	adds	r3, #16
 8005e26:	76a3      	strb	r3, [r4, #26]
 8005e28:	9507      	str	r5, [sp, #28]
 8005e2a:	0035      	movs	r5, r6
 8005e2c:	782b      	ldrb	r3, [r5, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <_svfiprintf_r+0x52>
 8005e32:	2b25      	cmp	r3, #37	; 0x25
 8005e34:	d147      	bne.n	8005ec6 <_svfiprintf_r+0xe2>
 8005e36:	1bab      	subs	r3, r5, r6
 8005e38:	9305      	str	r3, [sp, #20]
 8005e3a:	42b5      	cmp	r5, r6
 8005e3c:	d00c      	beq.n	8005e58 <_svfiprintf_r+0x74>
 8005e3e:	0032      	movs	r2, r6
 8005e40:	0039      	movs	r1, r7
 8005e42:	9803      	ldr	r0, [sp, #12]
 8005e44:	f7ff ff6c 	bl	8005d20 <__ssputs_r>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d100      	bne.n	8005e4e <_svfiprintf_r+0x6a>
 8005e4c:	e0ae      	b.n	8005fac <_svfiprintf_r+0x1c8>
 8005e4e:	6962      	ldr	r2, [r4, #20]
 8005e50:	9b05      	ldr	r3, [sp, #20]
 8005e52:	4694      	mov	ip, r2
 8005e54:	4463      	add	r3, ip
 8005e56:	6163      	str	r3, [r4, #20]
 8005e58:	782b      	ldrb	r3, [r5, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d100      	bne.n	8005e60 <_svfiprintf_r+0x7c>
 8005e5e:	e0a5      	b.n	8005fac <_svfiprintf_r+0x1c8>
 8005e60:	2201      	movs	r2, #1
 8005e62:	2300      	movs	r3, #0
 8005e64:	4252      	negs	r2, r2
 8005e66:	6062      	str	r2, [r4, #4]
 8005e68:	a904      	add	r1, sp, #16
 8005e6a:	3254      	adds	r2, #84	; 0x54
 8005e6c:	1852      	adds	r2, r2, r1
 8005e6e:	1c6e      	adds	r6, r5, #1
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	60e3      	str	r3, [r4, #12]
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	7013      	strb	r3, [r2, #0]
 8005e78:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e7a:	2205      	movs	r2, #5
 8005e7c:	7831      	ldrb	r1, [r6, #0]
 8005e7e:	4854      	ldr	r0, [pc, #336]	; (8005fd0 <_svfiprintf_r+0x1ec>)
 8005e80:	f000 fa32 	bl	80062e8 <memchr>
 8005e84:	1c75      	adds	r5, r6, #1
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d11f      	bne.n	8005eca <_svfiprintf_r+0xe6>
 8005e8a:	6822      	ldr	r2, [r4, #0]
 8005e8c:	06d3      	lsls	r3, r2, #27
 8005e8e:	d504      	bpl.n	8005e9a <_svfiprintf_r+0xb6>
 8005e90:	2353      	movs	r3, #83	; 0x53
 8005e92:	a904      	add	r1, sp, #16
 8005e94:	185b      	adds	r3, r3, r1
 8005e96:	2120      	movs	r1, #32
 8005e98:	7019      	strb	r1, [r3, #0]
 8005e9a:	0713      	lsls	r3, r2, #28
 8005e9c:	d504      	bpl.n	8005ea8 <_svfiprintf_r+0xc4>
 8005e9e:	2353      	movs	r3, #83	; 0x53
 8005ea0:	a904      	add	r1, sp, #16
 8005ea2:	185b      	adds	r3, r3, r1
 8005ea4:	212b      	movs	r1, #43	; 0x2b
 8005ea6:	7019      	strb	r1, [r3, #0]
 8005ea8:	7833      	ldrb	r3, [r6, #0]
 8005eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8005eac:	d016      	beq.n	8005edc <_svfiprintf_r+0xf8>
 8005eae:	0035      	movs	r5, r6
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	200a      	movs	r0, #10
 8005eb4:	68e3      	ldr	r3, [r4, #12]
 8005eb6:	782a      	ldrb	r2, [r5, #0]
 8005eb8:	1c6e      	adds	r6, r5, #1
 8005eba:	3a30      	subs	r2, #48	; 0x30
 8005ebc:	2a09      	cmp	r2, #9
 8005ebe:	d94e      	bls.n	8005f5e <_svfiprintf_r+0x17a>
 8005ec0:	2900      	cmp	r1, #0
 8005ec2:	d111      	bne.n	8005ee8 <_svfiprintf_r+0x104>
 8005ec4:	e017      	b.n	8005ef6 <_svfiprintf_r+0x112>
 8005ec6:	3501      	adds	r5, #1
 8005ec8:	e7b0      	b.n	8005e2c <_svfiprintf_r+0x48>
 8005eca:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <_svfiprintf_r+0x1ec>)
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	1ac0      	subs	r0, r0, r3
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	4083      	lsls	r3, r0
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	002e      	movs	r6, r5
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	e7ce      	b.n	8005e7a <_svfiprintf_r+0x96>
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	1d19      	adds	r1, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	9107      	str	r1, [sp, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	db01      	blt.n	8005eec <_svfiprintf_r+0x108>
 8005ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eea:	e004      	b.n	8005ef6 <_svfiprintf_r+0x112>
 8005eec:	425b      	negs	r3, r3
 8005eee:	60e3      	str	r3, [r4, #12]
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	782b      	ldrb	r3, [r5, #0]
 8005ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8005efa:	d10a      	bne.n	8005f12 <_svfiprintf_r+0x12e>
 8005efc:	786b      	ldrb	r3, [r5, #1]
 8005efe:	2b2a      	cmp	r3, #42	; 0x2a
 8005f00:	d135      	bne.n	8005f6e <_svfiprintf_r+0x18a>
 8005f02:	9b07      	ldr	r3, [sp, #28]
 8005f04:	3502      	adds	r5, #2
 8005f06:	1d1a      	adds	r2, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	9207      	str	r2, [sp, #28]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	db2b      	blt.n	8005f68 <_svfiprintf_r+0x184>
 8005f10:	9309      	str	r3, [sp, #36]	; 0x24
 8005f12:	4e30      	ldr	r6, [pc, #192]	; (8005fd4 <_svfiprintf_r+0x1f0>)
 8005f14:	2203      	movs	r2, #3
 8005f16:	0030      	movs	r0, r6
 8005f18:	7829      	ldrb	r1, [r5, #0]
 8005f1a:	f000 f9e5 	bl	80062e8 <memchr>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d006      	beq.n	8005f30 <_svfiprintf_r+0x14c>
 8005f22:	2340      	movs	r3, #64	; 0x40
 8005f24:	1b80      	subs	r0, r0, r6
 8005f26:	4083      	lsls	r3, r0
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	3501      	adds	r5, #1
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	7829      	ldrb	r1, [r5, #0]
 8005f32:	2206      	movs	r2, #6
 8005f34:	4828      	ldr	r0, [pc, #160]	; (8005fd8 <_svfiprintf_r+0x1f4>)
 8005f36:	1c6e      	adds	r6, r5, #1
 8005f38:	7621      	strb	r1, [r4, #24]
 8005f3a:	f000 f9d5 	bl	80062e8 <memchr>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d03c      	beq.n	8005fbc <_svfiprintf_r+0x1d8>
 8005f42:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <_svfiprintf_r+0x1f8>)
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d125      	bne.n	8005f94 <_svfiprintf_r+0x1b0>
 8005f48:	2207      	movs	r2, #7
 8005f4a:	9b07      	ldr	r3, [sp, #28]
 8005f4c:	3307      	adds	r3, #7
 8005f4e:	4393      	bics	r3, r2
 8005f50:	3308      	adds	r3, #8
 8005f52:	9307      	str	r3, [sp, #28]
 8005f54:	6963      	ldr	r3, [r4, #20]
 8005f56:	9a04      	ldr	r2, [sp, #16]
 8005f58:	189b      	adds	r3, r3, r2
 8005f5a:	6163      	str	r3, [r4, #20]
 8005f5c:	e765      	b.n	8005e2a <_svfiprintf_r+0x46>
 8005f5e:	4343      	muls	r3, r0
 8005f60:	0035      	movs	r5, r6
 8005f62:	2101      	movs	r1, #1
 8005f64:	189b      	adds	r3, r3, r2
 8005f66:	e7a6      	b.n	8005eb6 <_svfiprintf_r+0xd2>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	e7d0      	b.n	8005f10 <_svfiprintf_r+0x12c>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	200a      	movs	r0, #10
 8005f72:	001a      	movs	r2, r3
 8005f74:	3501      	adds	r5, #1
 8005f76:	6063      	str	r3, [r4, #4]
 8005f78:	7829      	ldrb	r1, [r5, #0]
 8005f7a:	1c6e      	adds	r6, r5, #1
 8005f7c:	3930      	subs	r1, #48	; 0x30
 8005f7e:	2909      	cmp	r1, #9
 8005f80:	d903      	bls.n	8005f8a <_svfiprintf_r+0x1a6>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0c5      	beq.n	8005f12 <_svfiprintf_r+0x12e>
 8005f86:	9209      	str	r2, [sp, #36]	; 0x24
 8005f88:	e7c3      	b.n	8005f12 <_svfiprintf_r+0x12e>
 8005f8a:	4342      	muls	r2, r0
 8005f8c:	0035      	movs	r5, r6
 8005f8e:	2301      	movs	r3, #1
 8005f90:	1852      	adds	r2, r2, r1
 8005f92:	e7f1      	b.n	8005f78 <_svfiprintf_r+0x194>
 8005f94:	ab07      	add	r3, sp, #28
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	003a      	movs	r2, r7
 8005f9a:	0021      	movs	r1, r4
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <_svfiprintf_r+0x1fc>)
 8005f9e:	9803      	ldr	r0, [sp, #12]
 8005fa0:	e000      	b.n	8005fa4 <_svfiprintf_r+0x1c0>
 8005fa2:	bf00      	nop
 8005fa4:	9004      	str	r0, [sp, #16]
 8005fa6:	9b04      	ldr	r3, [sp, #16]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	d1d3      	bne.n	8005f54 <_svfiprintf_r+0x170>
 8005fac:	89bb      	ldrh	r3, [r7, #12]
 8005fae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005fb0:	065b      	lsls	r3, r3, #25
 8005fb2:	d400      	bmi.n	8005fb6 <_svfiprintf_r+0x1d2>
 8005fb4:	e72d      	b.n	8005e12 <_svfiprintf_r+0x2e>
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	4240      	negs	r0, r0
 8005fba:	e72a      	b.n	8005e12 <_svfiprintf_r+0x2e>
 8005fbc:	ab07      	add	r3, sp, #28
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	003a      	movs	r2, r7
 8005fc2:	0021      	movs	r1, r4
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <_svfiprintf_r+0x1fc>)
 8005fc6:	9803      	ldr	r0, [sp, #12]
 8005fc8:	f000 f87c 	bl	80060c4 <_printf_i>
 8005fcc:	e7ea      	b.n	8005fa4 <_svfiprintf_r+0x1c0>
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	080066a0 	.word	0x080066a0
 8005fd4:	080066a6 	.word	0x080066a6
 8005fd8:	080066aa 	.word	0x080066aa
 8005fdc:	00000000 	.word	0x00000000
 8005fe0:	08005d21 	.word	0x08005d21

08005fe4 <_printf_common>:
 8005fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fe6:	0015      	movs	r5, r2
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	688a      	ldr	r2, [r1, #8]
 8005fec:	690b      	ldr	r3, [r1, #16]
 8005fee:	000c      	movs	r4, r1
 8005ff0:	9000      	str	r0, [sp, #0]
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	da00      	bge.n	8005ff8 <_printf_common+0x14>
 8005ff6:	0013      	movs	r3, r2
 8005ff8:	0022      	movs	r2, r4
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	3243      	adds	r2, #67	; 0x43
 8005ffe:	7812      	ldrb	r2, [r2, #0]
 8006000:	2a00      	cmp	r2, #0
 8006002:	d001      	beq.n	8006008 <_printf_common+0x24>
 8006004:	3301      	adds	r3, #1
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	069b      	lsls	r3, r3, #26
 800600c:	d502      	bpl.n	8006014 <_printf_common+0x30>
 800600e:	682b      	ldr	r3, [r5, #0]
 8006010:	3302      	adds	r3, #2
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	2306      	movs	r3, #6
 8006018:	0017      	movs	r7, r2
 800601a:	401f      	ands	r7, r3
 800601c:	421a      	tst	r2, r3
 800601e:	d027      	beq.n	8006070 <_printf_common+0x8c>
 8006020:	0023      	movs	r3, r4
 8006022:	3343      	adds	r3, #67	; 0x43
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	1e5a      	subs	r2, r3, #1
 8006028:	4193      	sbcs	r3, r2
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	0692      	lsls	r2, r2, #26
 800602e:	d430      	bmi.n	8006092 <_printf_common+0xae>
 8006030:	0022      	movs	r2, r4
 8006032:	9901      	ldr	r1, [sp, #4]
 8006034:	9800      	ldr	r0, [sp, #0]
 8006036:	9e08      	ldr	r6, [sp, #32]
 8006038:	3243      	adds	r2, #67	; 0x43
 800603a:	47b0      	blx	r6
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d025      	beq.n	800608c <_printf_common+0xa8>
 8006040:	2306      	movs	r3, #6
 8006042:	6820      	ldr	r0, [r4, #0]
 8006044:	682a      	ldr	r2, [r5, #0]
 8006046:	68e1      	ldr	r1, [r4, #12]
 8006048:	2500      	movs	r5, #0
 800604a:	4003      	ands	r3, r0
 800604c:	2b04      	cmp	r3, #4
 800604e:	d103      	bne.n	8006058 <_printf_common+0x74>
 8006050:	1a8d      	subs	r5, r1, r2
 8006052:	43eb      	mvns	r3, r5
 8006054:	17db      	asrs	r3, r3, #31
 8006056:	401d      	ands	r5, r3
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	6922      	ldr	r2, [r4, #16]
 800605c:	4293      	cmp	r3, r2
 800605e:	dd01      	ble.n	8006064 <_printf_common+0x80>
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	18ed      	adds	r5, r5, r3
 8006064:	2700      	movs	r7, #0
 8006066:	42bd      	cmp	r5, r7
 8006068:	d120      	bne.n	80060ac <_printf_common+0xc8>
 800606a:	2000      	movs	r0, #0
 800606c:	e010      	b.n	8006090 <_printf_common+0xac>
 800606e:	3701      	adds	r7, #1
 8006070:	68e3      	ldr	r3, [r4, #12]
 8006072:	682a      	ldr	r2, [r5, #0]
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	42bb      	cmp	r3, r7
 8006078:	ddd2      	ble.n	8006020 <_printf_common+0x3c>
 800607a:	0022      	movs	r2, r4
 800607c:	2301      	movs	r3, #1
 800607e:	9901      	ldr	r1, [sp, #4]
 8006080:	9800      	ldr	r0, [sp, #0]
 8006082:	9e08      	ldr	r6, [sp, #32]
 8006084:	3219      	adds	r2, #25
 8006086:	47b0      	blx	r6
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d1f0      	bne.n	800606e <_printf_common+0x8a>
 800608c:	2001      	movs	r0, #1
 800608e:	4240      	negs	r0, r0
 8006090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006092:	2030      	movs	r0, #48	; 0x30
 8006094:	18e1      	adds	r1, r4, r3
 8006096:	3143      	adds	r1, #67	; 0x43
 8006098:	7008      	strb	r0, [r1, #0]
 800609a:	0021      	movs	r1, r4
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	3145      	adds	r1, #69	; 0x45
 80060a0:	7809      	ldrb	r1, [r1, #0]
 80060a2:	18a2      	adds	r2, r4, r2
 80060a4:	3243      	adds	r2, #67	; 0x43
 80060a6:	3302      	adds	r3, #2
 80060a8:	7011      	strb	r1, [r2, #0]
 80060aa:	e7c1      	b.n	8006030 <_printf_common+0x4c>
 80060ac:	0022      	movs	r2, r4
 80060ae:	2301      	movs	r3, #1
 80060b0:	9901      	ldr	r1, [sp, #4]
 80060b2:	9800      	ldr	r0, [sp, #0]
 80060b4:	9e08      	ldr	r6, [sp, #32]
 80060b6:	321a      	adds	r2, #26
 80060b8:	47b0      	blx	r6
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d0e6      	beq.n	800608c <_printf_common+0xa8>
 80060be:	3701      	adds	r7, #1
 80060c0:	e7d1      	b.n	8006066 <_printf_common+0x82>
	...

080060c4 <_printf_i>:
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c6:	b08b      	sub	sp, #44	; 0x2c
 80060c8:	9206      	str	r2, [sp, #24]
 80060ca:	000a      	movs	r2, r1
 80060cc:	3243      	adds	r2, #67	; 0x43
 80060ce:	9307      	str	r3, [sp, #28]
 80060d0:	9005      	str	r0, [sp, #20]
 80060d2:	9204      	str	r2, [sp, #16]
 80060d4:	7e0a      	ldrb	r2, [r1, #24]
 80060d6:	000c      	movs	r4, r1
 80060d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060da:	2a78      	cmp	r2, #120	; 0x78
 80060dc:	d807      	bhi.n	80060ee <_printf_i+0x2a>
 80060de:	2a62      	cmp	r2, #98	; 0x62
 80060e0:	d809      	bhi.n	80060f6 <_printf_i+0x32>
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	d100      	bne.n	80060e8 <_printf_i+0x24>
 80060e6:	e0c1      	b.n	800626c <_printf_i+0x1a8>
 80060e8:	2a58      	cmp	r2, #88	; 0x58
 80060ea:	d100      	bne.n	80060ee <_printf_i+0x2a>
 80060ec:	e08c      	b.n	8006208 <_printf_i+0x144>
 80060ee:	0026      	movs	r6, r4
 80060f0:	3642      	adds	r6, #66	; 0x42
 80060f2:	7032      	strb	r2, [r6, #0]
 80060f4:	e022      	b.n	800613c <_printf_i+0x78>
 80060f6:	0010      	movs	r0, r2
 80060f8:	3863      	subs	r0, #99	; 0x63
 80060fa:	2815      	cmp	r0, #21
 80060fc:	d8f7      	bhi.n	80060ee <_printf_i+0x2a>
 80060fe:	f7fa f80b 	bl	8000118 <__gnu_thumb1_case_shi>
 8006102:	0016      	.short	0x0016
 8006104:	fff6001f 	.word	0xfff6001f
 8006108:	fff6fff6 	.word	0xfff6fff6
 800610c:	001ffff6 	.word	0x001ffff6
 8006110:	fff6fff6 	.word	0xfff6fff6
 8006114:	fff6fff6 	.word	0xfff6fff6
 8006118:	003600a8 	.word	0x003600a8
 800611c:	fff6009a 	.word	0xfff6009a
 8006120:	00b9fff6 	.word	0x00b9fff6
 8006124:	0036fff6 	.word	0x0036fff6
 8006128:	fff6fff6 	.word	0xfff6fff6
 800612c:	009e      	.short	0x009e
 800612e:	0026      	movs	r6, r4
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	3642      	adds	r6, #66	; 0x42
 8006134:	1d11      	adds	r1, r2, #4
 8006136:	6019      	str	r1, [r3, #0]
 8006138:	6813      	ldr	r3, [r2, #0]
 800613a:	7033      	strb	r3, [r6, #0]
 800613c:	2301      	movs	r3, #1
 800613e:	e0a7      	b.n	8006290 <_printf_i+0x1cc>
 8006140:	6808      	ldr	r0, [r1, #0]
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	1d0a      	adds	r2, r1, #4
 8006146:	0605      	lsls	r5, r0, #24
 8006148:	d50b      	bpl.n	8006162 <_printf_i+0x9e>
 800614a:	680d      	ldr	r5, [r1, #0]
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	2d00      	cmp	r5, #0
 8006150:	da03      	bge.n	800615a <_printf_i+0x96>
 8006152:	232d      	movs	r3, #45	; 0x2d
 8006154:	9a04      	ldr	r2, [sp, #16]
 8006156:	426d      	negs	r5, r5
 8006158:	7013      	strb	r3, [r2, #0]
 800615a:	4b61      	ldr	r3, [pc, #388]	; (80062e0 <_printf_i+0x21c>)
 800615c:	270a      	movs	r7, #10
 800615e:	9303      	str	r3, [sp, #12]
 8006160:	e01b      	b.n	800619a <_printf_i+0xd6>
 8006162:	680d      	ldr	r5, [r1, #0]
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	0641      	lsls	r1, r0, #25
 8006168:	d5f1      	bpl.n	800614e <_printf_i+0x8a>
 800616a:	b22d      	sxth	r5, r5
 800616c:	e7ef      	b.n	800614e <_printf_i+0x8a>
 800616e:	680d      	ldr	r5, [r1, #0]
 8006170:	6819      	ldr	r1, [r3, #0]
 8006172:	1d08      	adds	r0, r1, #4
 8006174:	6018      	str	r0, [r3, #0]
 8006176:	062e      	lsls	r6, r5, #24
 8006178:	d501      	bpl.n	800617e <_printf_i+0xba>
 800617a:	680d      	ldr	r5, [r1, #0]
 800617c:	e003      	b.n	8006186 <_printf_i+0xc2>
 800617e:	066d      	lsls	r5, r5, #25
 8006180:	d5fb      	bpl.n	800617a <_printf_i+0xb6>
 8006182:	680d      	ldr	r5, [r1, #0]
 8006184:	b2ad      	uxth	r5, r5
 8006186:	4b56      	ldr	r3, [pc, #344]	; (80062e0 <_printf_i+0x21c>)
 8006188:	2708      	movs	r7, #8
 800618a:	9303      	str	r3, [sp, #12]
 800618c:	2a6f      	cmp	r2, #111	; 0x6f
 800618e:	d000      	beq.n	8006192 <_printf_i+0xce>
 8006190:	3702      	adds	r7, #2
 8006192:	0023      	movs	r3, r4
 8006194:	2200      	movs	r2, #0
 8006196:	3343      	adds	r3, #67	; 0x43
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	6863      	ldr	r3, [r4, #4]
 800619c:	60a3      	str	r3, [r4, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	db03      	blt.n	80061aa <_printf_i+0xe6>
 80061a2:	2204      	movs	r2, #4
 80061a4:	6821      	ldr	r1, [r4, #0]
 80061a6:	4391      	bics	r1, r2
 80061a8:	6021      	str	r1, [r4, #0]
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	d102      	bne.n	80061b4 <_printf_i+0xf0>
 80061ae:	9e04      	ldr	r6, [sp, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <_printf_i+0x10a>
 80061b4:	9e04      	ldr	r6, [sp, #16]
 80061b6:	0028      	movs	r0, r5
 80061b8:	0039      	movs	r1, r7
 80061ba:	f7fa f83d 	bl	8000238 <__aeabi_uidivmod>
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	3e01      	subs	r6, #1
 80061c2:	5c5b      	ldrb	r3, [r3, r1]
 80061c4:	7033      	strb	r3, [r6, #0]
 80061c6:	002b      	movs	r3, r5
 80061c8:	0005      	movs	r5, r0
 80061ca:	429f      	cmp	r7, r3
 80061cc:	d9f3      	bls.n	80061b6 <_printf_i+0xf2>
 80061ce:	2f08      	cmp	r7, #8
 80061d0:	d109      	bne.n	80061e6 <_printf_i+0x122>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	07db      	lsls	r3, r3, #31
 80061d6:	d506      	bpl.n	80061e6 <_printf_i+0x122>
 80061d8:	6863      	ldr	r3, [r4, #4]
 80061da:	6922      	ldr	r2, [r4, #16]
 80061dc:	4293      	cmp	r3, r2
 80061de:	dc02      	bgt.n	80061e6 <_printf_i+0x122>
 80061e0:	2330      	movs	r3, #48	; 0x30
 80061e2:	3e01      	subs	r6, #1
 80061e4:	7033      	strb	r3, [r6, #0]
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	1b9b      	subs	r3, r3, r6
 80061ea:	6123      	str	r3, [r4, #16]
 80061ec:	9b07      	ldr	r3, [sp, #28]
 80061ee:	0021      	movs	r1, r4
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	9805      	ldr	r0, [sp, #20]
 80061f4:	9b06      	ldr	r3, [sp, #24]
 80061f6:	aa09      	add	r2, sp, #36	; 0x24
 80061f8:	f7ff fef4 	bl	8005fe4 <_printf_common>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d14c      	bne.n	800629a <_printf_i+0x1d6>
 8006200:	2001      	movs	r0, #1
 8006202:	4240      	negs	r0, r0
 8006204:	b00b      	add	sp, #44	; 0x2c
 8006206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006208:	3145      	adds	r1, #69	; 0x45
 800620a:	700a      	strb	r2, [r1, #0]
 800620c:	4a34      	ldr	r2, [pc, #208]	; (80062e0 <_printf_i+0x21c>)
 800620e:	9203      	str	r2, [sp, #12]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	6821      	ldr	r1, [r4, #0]
 8006214:	ca20      	ldmia	r2!, {r5}
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	0608      	lsls	r0, r1, #24
 800621a:	d516      	bpl.n	800624a <_printf_i+0x186>
 800621c:	07cb      	lsls	r3, r1, #31
 800621e:	d502      	bpl.n	8006226 <_printf_i+0x162>
 8006220:	2320      	movs	r3, #32
 8006222:	4319      	orrs	r1, r3
 8006224:	6021      	str	r1, [r4, #0]
 8006226:	2710      	movs	r7, #16
 8006228:	2d00      	cmp	r5, #0
 800622a:	d1b2      	bne.n	8006192 <_printf_i+0xce>
 800622c:	2320      	movs	r3, #32
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	439a      	bics	r2, r3
 8006232:	6022      	str	r2, [r4, #0]
 8006234:	e7ad      	b.n	8006192 <_printf_i+0xce>
 8006236:	2220      	movs	r2, #32
 8006238:	6809      	ldr	r1, [r1, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	6022      	str	r2, [r4, #0]
 800623e:	0022      	movs	r2, r4
 8006240:	2178      	movs	r1, #120	; 0x78
 8006242:	3245      	adds	r2, #69	; 0x45
 8006244:	7011      	strb	r1, [r2, #0]
 8006246:	4a27      	ldr	r2, [pc, #156]	; (80062e4 <_printf_i+0x220>)
 8006248:	e7e1      	b.n	800620e <_printf_i+0x14a>
 800624a:	0648      	lsls	r0, r1, #25
 800624c:	d5e6      	bpl.n	800621c <_printf_i+0x158>
 800624e:	b2ad      	uxth	r5, r5
 8006250:	e7e4      	b.n	800621c <_printf_i+0x158>
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	680d      	ldr	r5, [r1, #0]
 8006256:	1d10      	adds	r0, r2, #4
 8006258:	6949      	ldr	r1, [r1, #20]
 800625a:	6018      	str	r0, [r3, #0]
 800625c:	6813      	ldr	r3, [r2, #0]
 800625e:	062e      	lsls	r6, r5, #24
 8006260:	d501      	bpl.n	8006266 <_printf_i+0x1a2>
 8006262:	6019      	str	r1, [r3, #0]
 8006264:	e002      	b.n	800626c <_printf_i+0x1a8>
 8006266:	066d      	lsls	r5, r5, #25
 8006268:	d5fb      	bpl.n	8006262 <_printf_i+0x19e>
 800626a:	8019      	strh	r1, [r3, #0]
 800626c:	2300      	movs	r3, #0
 800626e:	9e04      	ldr	r6, [sp, #16]
 8006270:	6123      	str	r3, [r4, #16]
 8006272:	e7bb      	b.n	80061ec <_printf_i+0x128>
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	1d11      	adds	r1, r2, #4
 8006278:	6019      	str	r1, [r3, #0]
 800627a:	6816      	ldr	r6, [r2, #0]
 800627c:	2100      	movs	r1, #0
 800627e:	0030      	movs	r0, r6
 8006280:	6862      	ldr	r2, [r4, #4]
 8006282:	f000 f831 	bl	80062e8 <memchr>
 8006286:	2800      	cmp	r0, #0
 8006288:	d001      	beq.n	800628e <_printf_i+0x1ca>
 800628a:	1b80      	subs	r0, r0, r6
 800628c:	6060      	str	r0, [r4, #4]
 800628e:	6863      	ldr	r3, [r4, #4]
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	2300      	movs	r3, #0
 8006294:	9a04      	ldr	r2, [sp, #16]
 8006296:	7013      	strb	r3, [r2, #0]
 8006298:	e7a8      	b.n	80061ec <_printf_i+0x128>
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	0032      	movs	r2, r6
 800629e:	9906      	ldr	r1, [sp, #24]
 80062a0:	9805      	ldr	r0, [sp, #20]
 80062a2:	9d07      	ldr	r5, [sp, #28]
 80062a4:	47a8      	blx	r5
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	d0aa      	beq.n	8006200 <_printf_i+0x13c>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	079b      	lsls	r3, r3, #30
 80062ae:	d415      	bmi.n	80062dc <_printf_i+0x218>
 80062b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	4298      	cmp	r0, r3
 80062b6:	daa5      	bge.n	8006204 <_printf_i+0x140>
 80062b8:	0018      	movs	r0, r3
 80062ba:	e7a3      	b.n	8006204 <_printf_i+0x140>
 80062bc:	0022      	movs	r2, r4
 80062be:	2301      	movs	r3, #1
 80062c0:	9906      	ldr	r1, [sp, #24]
 80062c2:	9805      	ldr	r0, [sp, #20]
 80062c4:	9e07      	ldr	r6, [sp, #28]
 80062c6:	3219      	adds	r2, #25
 80062c8:	47b0      	blx	r6
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	d098      	beq.n	8006200 <_printf_i+0x13c>
 80062ce:	3501      	adds	r5, #1
 80062d0:	68e3      	ldr	r3, [r4, #12]
 80062d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	42ab      	cmp	r3, r5
 80062d8:	dcf0      	bgt.n	80062bc <_printf_i+0x1f8>
 80062da:	e7e9      	b.n	80062b0 <_printf_i+0x1ec>
 80062dc:	2500      	movs	r5, #0
 80062de:	e7f7      	b.n	80062d0 <_printf_i+0x20c>
 80062e0:	080066b1 	.word	0x080066b1
 80062e4:	080066c2 	.word	0x080066c2

080062e8 <memchr>:
 80062e8:	b2c9      	uxtb	r1, r1
 80062ea:	1882      	adds	r2, r0, r2
 80062ec:	4290      	cmp	r0, r2
 80062ee:	d101      	bne.n	80062f4 <memchr+0xc>
 80062f0:	2000      	movs	r0, #0
 80062f2:	4770      	bx	lr
 80062f4:	7803      	ldrb	r3, [r0, #0]
 80062f6:	428b      	cmp	r3, r1
 80062f8:	d0fb      	beq.n	80062f2 <memchr+0xa>
 80062fa:	3001      	adds	r0, #1
 80062fc:	e7f6      	b.n	80062ec <memchr+0x4>

080062fe <memcpy>:
 80062fe:	2300      	movs	r3, #0
 8006300:	b510      	push	{r4, lr}
 8006302:	429a      	cmp	r2, r3
 8006304:	d100      	bne.n	8006308 <memcpy+0xa>
 8006306:	bd10      	pop	{r4, pc}
 8006308:	5ccc      	ldrb	r4, [r1, r3]
 800630a:	54c4      	strb	r4, [r0, r3]
 800630c:	3301      	adds	r3, #1
 800630e:	e7f8      	b.n	8006302 <memcpy+0x4>

08006310 <memmove>:
 8006310:	b510      	push	{r4, lr}
 8006312:	4288      	cmp	r0, r1
 8006314:	d902      	bls.n	800631c <memmove+0xc>
 8006316:	188b      	adds	r3, r1, r2
 8006318:	4298      	cmp	r0, r3
 800631a:	d303      	bcc.n	8006324 <memmove+0x14>
 800631c:	2300      	movs	r3, #0
 800631e:	e007      	b.n	8006330 <memmove+0x20>
 8006320:	5c8b      	ldrb	r3, [r1, r2]
 8006322:	5483      	strb	r3, [r0, r2]
 8006324:	3a01      	subs	r2, #1
 8006326:	d2fb      	bcs.n	8006320 <memmove+0x10>
 8006328:	bd10      	pop	{r4, pc}
 800632a:	5ccc      	ldrb	r4, [r1, r3]
 800632c:	54c4      	strb	r4, [r0, r3]
 800632e:	3301      	adds	r3, #1
 8006330:	429a      	cmp	r2, r3
 8006332:	d1fa      	bne.n	800632a <memmove+0x1a>
 8006334:	e7f8      	b.n	8006328 <memmove+0x18>
	...

08006338 <_free_r>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	0005      	movs	r5, r0
 800633c:	2900      	cmp	r1, #0
 800633e:	d010      	beq.n	8006362 <_free_r+0x2a>
 8006340:	1f0c      	subs	r4, r1, #4
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	da00      	bge.n	800634a <_free_r+0x12>
 8006348:	18e4      	adds	r4, r4, r3
 800634a:	0028      	movs	r0, r5
 800634c:	f000 f918 	bl	8006580 <__malloc_lock>
 8006350:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <_free_r+0x90>)
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <_free_r+0x2c>
 8006358:	6063      	str	r3, [r4, #4]
 800635a:	6014      	str	r4, [r2, #0]
 800635c:	0028      	movs	r0, r5
 800635e:	f000 f917 	bl	8006590 <__malloc_unlock>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	42a3      	cmp	r3, r4
 8006366:	d908      	bls.n	800637a <_free_r+0x42>
 8006368:	6821      	ldr	r1, [r4, #0]
 800636a:	1860      	adds	r0, r4, r1
 800636c:	4283      	cmp	r3, r0
 800636e:	d1f3      	bne.n	8006358 <_free_r+0x20>
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	1841      	adds	r1, r0, r1
 8006376:	6021      	str	r1, [r4, #0]
 8006378:	e7ee      	b.n	8006358 <_free_r+0x20>
 800637a:	001a      	movs	r2, r3
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <_free_r+0x4e>
 8006382:	42a3      	cmp	r3, r4
 8006384:	d9f9      	bls.n	800637a <_free_r+0x42>
 8006386:	6811      	ldr	r1, [r2, #0]
 8006388:	1850      	adds	r0, r2, r1
 800638a:	42a0      	cmp	r0, r4
 800638c:	d10b      	bne.n	80063a6 <_free_r+0x6e>
 800638e:	6820      	ldr	r0, [r4, #0]
 8006390:	1809      	adds	r1, r1, r0
 8006392:	1850      	adds	r0, r2, r1
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	4283      	cmp	r3, r0
 8006398:	d1e0      	bne.n	800635c <_free_r+0x24>
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	1841      	adds	r1, r0, r1
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	6053      	str	r3, [r2, #4]
 80063a4:	e7da      	b.n	800635c <_free_r+0x24>
 80063a6:	42a0      	cmp	r0, r4
 80063a8:	d902      	bls.n	80063b0 <_free_r+0x78>
 80063aa:	230c      	movs	r3, #12
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	e7d5      	b.n	800635c <_free_r+0x24>
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	1860      	adds	r0, r4, r1
 80063b4:	4283      	cmp	r3, r0
 80063b6:	d103      	bne.n	80063c0 <_free_r+0x88>
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	1841      	adds	r1, r0, r1
 80063be:	6021      	str	r1, [r4, #0]
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6054      	str	r4, [r2, #4]
 80063c4:	e7ca      	b.n	800635c <_free_r+0x24>
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	2000026c 	.word	0x2000026c

080063cc <sbrk_aligned>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	4e0f      	ldr	r6, [pc, #60]	; (800640c <sbrk_aligned+0x40>)
 80063d0:	000d      	movs	r5, r1
 80063d2:	6831      	ldr	r1, [r6, #0]
 80063d4:	0004      	movs	r4, r0
 80063d6:	2900      	cmp	r1, #0
 80063d8:	d102      	bne.n	80063e0 <sbrk_aligned+0x14>
 80063da:	f000 f8bf 	bl	800655c <_sbrk_r>
 80063de:	6030      	str	r0, [r6, #0]
 80063e0:	0029      	movs	r1, r5
 80063e2:	0020      	movs	r0, r4
 80063e4:	f000 f8ba 	bl	800655c <_sbrk_r>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d00a      	beq.n	8006402 <sbrk_aligned+0x36>
 80063ec:	2303      	movs	r3, #3
 80063ee:	1cc5      	adds	r5, r0, #3
 80063f0:	439d      	bics	r5, r3
 80063f2:	42a8      	cmp	r0, r5
 80063f4:	d007      	beq.n	8006406 <sbrk_aligned+0x3a>
 80063f6:	1a29      	subs	r1, r5, r0
 80063f8:	0020      	movs	r0, r4
 80063fa:	f000 f8af 	bl	800655c <_sbrk_r>
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	d101      	bne.n	8006406 <sbrk_aligned+0x3a>
 8006402:	2501      	movs	r5, #1
 8006404:	426d      	negs	r5, r5
 8006406:	0028      	movs	r0, r5
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	20000270 	.word	0x20000270

08006410 <_malloc_r>:
 8006410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006412:	2203      	movs	r2, #3
 8006414:	1ccb      	adds	r3, r1, #3
 8006416:	4393      	bics	r3, r2
 8006418:	3308      	adds	r3, #8
 800641a:	0006      	movs	r6, r0
 800641c:	001f      	movs	r7, r3
 800641e:	2b0c      	cmp	r3, #12
 8006420:	d232      	bcs.n	8006488 <_malloc_r+0x78>
 8006422:	270c      	movs	r7, #12
 8006424:	42b9      	cmp	r1, r7
 8006426:	d831      	bhi.n	800648c <_malloc_r+0x7c>
 8006428:	0030      	movs	r0, r6
 800642a:	f000 f8a9 	bl	8006580 <__malloc_lock>
 800642e:	4d32      	ldr	r5, [pc, #200]	; (80064f8 <_malloc_r+0xe8>)
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	001c      	movs	r4, r3
 8006434:	2c00      	cmp	r4, #0
 8006436:	d12e      	bne.n	8006496 <_malloc_r+0x86>
 8006438:	0039      	movs	r1, r7
 800643a:	0030      	movs	r0, r6
 800643c:	f7ff ffc6 	bl	80063cc <sbrk_aligned>
 8006440:	0004      	movs	r4, r0
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d11e      	bne.n	8006484 <_malloc_r+0x74>
 8006446:	682c      	ldr	r4, [r5, #0]
 8006448:	0025      	movs	r5, r4
 800644a:	2d00      	cmp	r5, #0
 800644c:	d14a      	bne.n	80064e4 <_malloc_r+0xd4>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	0029      	movs	r1, r5
 8006452:	18e3      	adds	r3, r4, r3
 8006454:	0030      	movs	r0, r6
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	f000 f880 	bl	800655c <_sbrk_r>
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	4283      	cmp	r3, r0
 8006460:	d143      	bne.n	80064ea <_malloc_r+0xda>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	3703      	adds	r7, #3
 8006466:	1aff      	subs	r7, r7, r3
 8006468:	2303      	movs	r3, #3
 800646a:	439f      	bics	r7, r3
 800646c:	3708      	adds	r7, #8
 800646e:	2f0c      	cmp	r7, #12
 8006470:	d200      	bcs.n	8006474 <_malloc_r+0x64>
 8006472:	270c      	movs	r7, #12
 8006474:	0039      	movs	r1, r7
 8006476:	0030      	movs	r0, r6
 8006478:	f7ff ffa8 	bl	80063cc <sbrk_aligned>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d034      	beq.n	80064ea <_malloc_r+0xda>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	19df      	adds	r7, r3, r7
 8006484:	6027      	str	r7, [r4, #0]
 8006486:	e013      	b.n	80064b0 <_malloc_r+0xa0>
 8006488:	2b00      	cmp	r3, #0
 800648a:	dacb      	bge.n	8006424 <_malloc_r+0x14>
 800648c:	230c      	movs	r3, #12
 800648e:	2500      	movs	r5, #0
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	0028      	movs	r0, r5
 8006494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006496:	6822      	ldr	r2, [r4, #0]
 8006498:	1bd1      	subs	r1, r2, r7
 800649a:	d420      	bmi.n	80064de <_malloc_r+0xce>
 800649c:	290b      	cmp	r1, #11
 800649e:	d917      	bls.n	80064d0 <_malloc_r+0xc0>
 80064a0:	19e2      	adds	r2, r4, r7
 80064a2:	6027      	str	r7, [r4, #0]
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	d111      	bne.n	80064cc <_malloc_r+0xbc>
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	6863      	ldr	r3, [r4, #4]
 80064ac:	6011      	str	r1, [r2, #0]
 80064ae:	6053      	str	r3, [r2, #4]
 80064b0:	0030      	movs	r0, r6
 80064b2:	0025      	movs	r5, r4
 80064b4:	f000 f86c 	bl	8006590 <__malloc_unlock>
 80064b8:	2207      	movs	r2, #7
 80064ba:	350b      	adds	r5, #11
 80064bc:	1d23      	adds	r3, r4, #4
 80064be:	4395      	bics	r5, r2
 80064c0:	1aea      	subs	r2, r5, r3
 80064c2:	429d      	cmp	r5, r3
 80064c4:	d0e5      	beq.n	8006492 <_malloc_r+0x82>
 80064c6:	1b5b      	subs	r3, r3, r5
 80064c8:	50a3      	str	r3, [r4, r2]
 80064ca:	e7e2      	b.n	8006492 <_malloc_r+0x82>
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	e7ec      	b.n	80064aa <_malloc_r+0x9a>
 80064d0:	6862      	ldr	r2, [r4, #4]
 80064d2:	42a3      	cmp	r3, r4
 80064d4:	d101      	bne.n	80064da <_malloc_r+0xca>
 80064d6:	602a      	str	r2, [r5, #0]
 80064d8:	e7ea      	b.n	80064b0 <_malloc_r+0xa0>
 80064da:	605a      	str	r2, [r3, #4]
 80064dc:	e7e8      	b.n	80064b0 <_malloc_r+0xa0>
 80064de:	0023      	movs	r3, r4
 80064e0:	6864      	ldr	r4, [r4, #4]
 80064e2:	e7a7      	b.n	8006434 <_malloc_r+0x24>
 80064e4:	002c      	movs	r4, r5
 80064e6:	686d      	ldr	r5, [r5, #4]
 80064e8:	e7af      	b.n	800644a <_malloc_r+0x3a>
 80064ea:	230c      	movs	r3, #12
 80064ec:	0030      	movs	r0, r6
 80064ee:	6033      	str	r3, [r6, #0]
 80064f0:	f000 f84e 	bl	8006590 <__malloc_unlock>
 80064f4:	e7cd      	b.n	8006492 <_malloc_r+0x82>
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	2000026c 	.word	0x2000026c

080064fc <_realloc_r>:
 80064fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fe:	0007      	movs	r7, r0
 8006500:	000e      	movs	r6, r1
 8006502:	0014      	movs	r4, r2
 8006504:	2900      	cmp	r1, #0
 8006506:	d105      	bne.n	8006514 <_realloc_r+0x18>
 8006508:	0011      	movs	r1, r2
 800650a:	f7ff ff81 	bl	8006410 <_malloc_r>
 800650e:	0005      	movs	r5, r0
 8006510:	0028      	movs	r0, r5
 8006512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006514:	2a00      	cmp	r2, #0
 8006516:	d103      	bne.n	8006520 <_realloc_r+0x24>
 8006518:	f7ff ff0e 	bl	8006338 <_free_r>
 800651c:	0025      	movs	r5, r4
 800651e:	e7f7      	b.n	8006510 <_realloc_r+0x14>
 8006520:	f000 f83e 	bl	80065a0 <_malloc_usable_size_r>
 8006524:	9001      	str	r0, [sp, #4]
 8006526:	4284      	cmp	r4, r0
 8006528:	d803      	bhi.n	8006532 <_realloc_r+0x36>
 800652a:	0035      	movs	r5, r6
 800652c:	0843      	lsrs	r3, r0, #1
 800652e:	42a3      	cmp	r3, r4
 8006530:	d3ee      	bcc.n	8006510 <_realloc_r+0x14>
 8006532:	0021      	movs	r1, r4
 8006534:	0038      	movs	r0, r7
 8006536:	f7ff ff6b 	bl	8006410 <_malloc_r>
 800653a:	1e05      	subs	r5, r0, #0
 800653c:	d0e8      	beq.n	8006510 <_realloc_r+0x14>
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	0022      	movs	r2, r4
 8006542:	429c      	cmp	r4, r3
 8006544:	d900      	bls.n	8006548 <_realloc_r+0x4c>
 8006546:	001a      	movs	r2, r3
 8006548:	0031      	movs	r1, r6
 800654a:	0028      	movs	r0, r5
 800654c:	f7ff fed7 	bl	80062fe <memcpy>
 8006550:	0031      	movs	r1, r6
 8006552:	0038      	movs	r0, r7
 8006554:	f7ff fef0 	bl	8006338 <_free_r>
 8006558:	e7da      	b.n	8006510 <_realloc_r+0x14>
	...

0800655c <_sbrk_r>:
 800655c:	2300      	movs	r3, #0
 800655e:	b570      	push	{r4, r5, r6, lr}
 8006560:	4d06      	ldr	r5, [pc, #24]	; (800657c <_sbrk_r+0x20>)
 8006562:	0004      	movs	r4, r0
 8006564:	0008      	movs	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fb fb9c 	bl	8001ca4 <_sbrk>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d103      	bne.n	8006578 <_sbrk_r+0x1c>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d000      	beq.n	8006578 <_sbrk_r+0x1c>
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	bd70      	pop	{r4, r5, r6, pc}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	20000274 	.word	0x20000274

08006580 <__malloc_lock>:
 8006580:	b510      	push	{r4, lr}
 8006582:	4802      	ldr	r0, [pc, #8]	; (800658c <__malloc_lock+0xc>)
 8006584:	f000 f814 	bl	80065b0 <__retarget_lock_acquire_recursive>
 8006588:	bd10      	pop	{r4, pc}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	20000278 	.word	0x20000278

08006590 <__malloc_unlock>:
 8006590:	b510      	push	{r4, lr}
 8006592:	4802      	ldr	r0, [pc, #8]	; (800659c <__malloc_unlock+0xc>)
 8006594:	f000 f80d 	bl	80065b2 <__retarget_lock_release_recursive>
 8006598:	bd10      	pop	{r4, pc}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	20000278 	.word	0x20000278

080065a0 <_malloc_usable_size_r>:
 80065a0:	1f0b      	subs	r3, r1, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	1f18      	subs	r0, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da01      	bge.n	80065ae <_malloc_usable_size_r+0xe>
 80065aa:	580b      	ldr	r3, [r1, r0]
 80065ac:	18c0      	adds	r0, r0, r3
 80065ae:	4770      	bx	lr

080065b0 <__retarget_lock_acquire_recursive>:
 80065b0:	4770      	bx	lr

080065b2 <__retarget_lock_release_recursive>:
 80065b2:	4770      	bx	lr

080065b4 <_init>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ba:	bc08      	pop	{r3}
 80065bc:	469e      	mov	lr, r3
 80065be:	4770      	bx	lr

080065c0 <_fini>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr
