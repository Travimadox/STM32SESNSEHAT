
SENSEHAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006548  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006710  08006710  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006710  08006710  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006710  08006710  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006710  08006710  00016710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000078  08006790  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006790  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001447e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029af  00000000  00000000  0003451e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00036ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00038028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014448  00000000  00000000  00039058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016338  00000000  00000000  0004d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079e72  00000000  00000000  000637d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd64a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004368  00000000  00000000  000dd69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065f0 	.word	0x080065f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080065f0 	.word	0x080065f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_fadd>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	46c6      	mov	lr, r8
 8000248:	0243      	lsls	r3, r0, #9
 800024a:	0a5b      	lsrs	r3, r3, #9
 800024c:	024e      	lsls	r6, r1, #9
 800024e:	0045      	lsls	r5, r0, #1
 8000250:	004f      	lsls	r7, r1, #1
 8000252:	00da      	lsls	r2, r3, #3
 8000254:	0fc4      	lsrs	r4, r0, #31
 8000256:	469c      	mov	ip, r3
 8000258:	0a70      	lsrs	r0, r6, #9
 800025a:	4690      	mov	r8, r2
 800025c:	b500      	push	{lr}
 800025e:	0e2d      	lsrs	r5, r5, #24
 8000260:	0e3f      	lsrs	r7, r7, #24
 8000262:	0fc9      	lsrs	r1, r1, #31
 8000264:	09b6      	lsrs	r6, r6, #6
 8000266:	428c      	cmp	r4, r1
 8000268:	d04b      	beq.n	8000302 <__aeabi_fadd+0xbe>
 800026a:	1bea      	subs	r2, r5, r7
 800026c:	2a00      	cmp	r2, #0
 800026e:	dd36      	ble.n	80002de <__aeabi_fadd+0x9a>
 8000270:	2f00      	cmp	r7, #0
 8000272:	d061      	beq.n	8000338 <__aeabi_fadd+0xf4>
 8000274:	2dff      	cmp	r5, #255	; 0xff
 8000276:	d100      	bne.n	800027a <__aeabi_fadd+0x36>
 8000278:	e0ad      	b.n	80003d6 <__aeabi_fadd+0x192>
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	04db      	lsls	r3, r3, #19
 800027e:	431e      	orrs	r6, r3
 8000280:	2a1b      	cmp	r2, #27
 8000282:	dc00      	bgt.n	8000286 <__aeabi_fadd+0x42>
 8000284:	e0d3      	b.n	800042e <__aeabi_fadd+0x1ea>
 8000286:	2001      	movs	r0, #1
 8000288:	4643      	mov	r3, r8
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	0143      	lsls	r3, r0, #5
 800028e:	d400      	bmi.n	8000292 <__aeabi_fadd+0x4e>
 8000290:	e08c      	b.n	80003ac <__aeabi_fadd+0x168>
 8000292:	0180      	lsls	r0, r0, #6
 8000294:	0987      	lsrs	r7, r0, #6
 8000296:	0038      	movs	r0, r7
 8000298:	f000 fcf6 	bl	8000c88 <__clzsi2>
 800029c:	3805      	subs	r0, #5
 800029e:	4087      	lsls	r7, r0
 80002a0:	4285      	cmp	r5, r0
 80002a2:	dc00      	bgt.n	80002a6 <__aeabi_fadd+0x62>
 80002a4:	e0b6      	b.n	8000414 <__aeabi_fadd+0x1d0>
 80002a6:	1a2d      	subs	r5, r5, r0
 80002a8:	48b3      	ldr	r0, [pc, #716]	; (8000578 <__aeabi_fadd+0x334>)
 80002aa:	4038      	ands	r0, r7
 80002ac:	0743      	lsls	r3, r0, #29
 80002ae:	d004      	beq.n	80002ba <__aeabi_fadd+0x76>
 80002b0:	230f      	movs	r3, #15
 80002b2:	4003      	ands	r3, r0
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d000      	beq.n	80002ba <__aeabi_fadd+0x76>
 80002b8:	3004      	adds	r0, #4
 80002ba:	0143      	lsls	r3, r0, #5
 80002bc:	d400      	bmi.n	80002c0 <__aeabi_fadd+0x7c>
 80002be:	e078      	b.n	80003b2 <__aeabi_fadd+0x16e>
 80002c0:	1c6a      	adds	r2, r5, #1
 80002c2:	2dfe      	cmp	r5, #254	; 0xfe
 80002c4:	d065      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80002c6:	0180      	lsls	r0, r0, #6
 80002c8:	0a43      	lsrs	r3, r0, #9
 80002ca:	469c      	mov	ip, r3
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	4663      	mov	r3, ip
 80002d0:	05d0      	lsls	r0, r2, #23
 80002d2:	4318      	orrs	r0, r3
 80002d4:	07e4      	lsls	r4, r4, #31
 80002d6:	4320      	orrs	r0, r4
 80002d8:	bc80      	pop	{r7}
 80002da:	46b8      	mov	r8, r7
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d035      	beq.n	800034e <__aeabi_fadd+0x10a>
 80002e2:	1b7a      	subs	r2, r7, r5
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d000      	beq.n	80002ea <__aeabi_fadd+0xa6>
 80002e8:	e0af      	b.n	800044a <__aeabi_fadd+0x206>
 80002ea:	4643      	mov	r3, r8
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fadd+0xae>
 80002f0:	e0a7      	b.n	8000442 <__aeabi_fadd+0x1fe>
 80002f2:	1e53      	subs	r3, r2, #1
 80002f4:	2a01      	cmp	r2, #1
 80002f6:	d100      	bne.n	80002fa <__aeabi_fadd+0xb6>
 80002f8:	e12f      	b.n	800055a <__aeabi_fadd+0x316>
 80002fa:	2aff      	cmp	r2, #255	; 0xff
 80002fc:	d069      	beq.n	80003d2 <__aeabi_fadd+0x18e>
 80002fe:	001a      	movs	r2, r3
 8000300:	e0aa      	b.n	8000458 <__aeabi_fadd+0x214>
 8000302:	1be9      	subs	r1, r5, r7
 8000304:	2900      	cmp	r1, #0
 8000306:	dd70      	ble.n	80003ea <__aeabi_fadd+0x1a6>
 8000308:	2f00      	cmp	r7, #0
 800030a:	d037      	beq.n	800037c <__aeabi_fadd+0x138>
 800030c:	2dff      	cmp	r5, #255	; 0xff
 800030e:	d062      	beq.n	80003d6 <__aeabi_fadd+0x192>
 8000310:	2380      	movs	r3, #128	; 0x80
 8000312:	04db      	lsls	r3, r3, #19
 8000314:	431e      	orrs	r6, r3
 8000316:	291b      	cmp	r1, #27
 8000318:	dc00      	bgt.n	800031c <__aeabi_fadd+0xd8>
 800031a:	e0b0      	b.n	800047e <__aeabi_fadd+0x23a>
 800031c:	2001      	movs	r0, #1
 800031e:	4440      	add	r0, r8
 8000320:	0143      	lsls	r3, r0, #5
 8000322:	d543      	bpl.n	80003ac <__aeabi_fadd+0x168>
 8000324:	3501      	adds	r5, #1
 8000326:	2dff      	cmp	r5, #255	; 0xff
 8000328:	d033      	beq.n	8000392 <__aeabi_fadd+0x14e>
 800032a:	2301      	movs	r3, #1
 800032c:	4a93      	ldr	r2, [pc, #588]	; (800057c <__aeabi_fadd+0x338>)
 800032e:	4003      	ands	r3, r0
 8000330:	0840      	lsrs	r0, r0, #1
 8000332:	4010      	ands	r0, r2
 8000334:	4318      	orrs	r0, r3
 8000336:	e7b9      	b.n	80002ac <__aeabi_fadd+0x68>
 8000338:	2e00      	cmp	r6, #0
 800033a:	d100      	bne.n	800033e <__aeabi_fadd+0xfa>
 800033c:	e083      	b.n	8000446 <__aeabi_fadd+0x202>
 800033e:	1e51      	subs	r1, r2, #1
 8000340:	2a01      	cmp	r2, #1
 8000342:	d100      	bne.n	8000346 <__aeabi_fadd+0x102>
 8000344:	e0d8      	b.n	80004f8 <__aeabi_fadd+0x2b4>
 8000346:	2aff      	cmp	r2, #255	; 0xff
 8000348:	d045      	beq.n	80003d6 <__aeabi_fadd+0x192>
 800034a:	000a      	movs	r2, r1
 800034c:	e798      	b.n	8000280 <__aeabi_fadd+0x3c>
 800034e:	27fe      	movs	r7, #254	; 0xfe
 8000350:	1c6a      	adds	r2, r5, #1
 8000352:	4217      	tst	r7, r2
 8000354:	d000      	beq.n	8000358 <__aeabi_fadd+0x114>
 8000356:	e086      	b.n	8000466 <__aeabi_fadd+0x222>
 8000358:	2d00      	cmp	r5, #0
 800035a:	d000      	beq.n	800035e <__aeabi_fadd+0x11a>
 800035c:	e0b7      	b.n	80004ce <__aeabi_fadd+0x28a>
 800035e:	4643      	mov	r3, r8
 8000360:	2b00      	cmp	r3, #0
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0x122>
 8000364:	e0f3      	b.n	800054e <__aeabi_fadd+0x30a>
 8000366:	2200      	movs	r2, #0
 8000368:	2e00      	cmp	r6, #0
 800036a:	d0b0      	beq.n	80002ce <__aeabi_fadd+0x8a>
 800036c:	1b98      	subs	r0, r3, r6
 800036e:	0143      	lsls	r3, r0, #5
 8000370:	d400      	bmi.n	8000374 <__aeabi_fadd+0x130>
 8000372:	e0fa      	b.n	800056a <__aeabi_fadd+0x326>
 8000374:	4643      	mov	r3, r8
 8000376:	000c      	movs	r4, r1
 8000378:	1af0      	subs	r0, r6, r3
 800037a:	e797      	b.n	80002ac <__aeabi_fadd+0x68>
 800037c:	2e00      	cmp	r6, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x13e>
 8000380:	e0c8      	b.n	8000514 <__aeabi_fadd+0x2d0>
 8000382:	1e4a      	subs	r2, r1, #1
 8000384:	2901      	cmp	r1, #1
 8000386:	d100      	bne.n	800038a <__aeabi_fadd+0x146>
 8000388:	e0ae      	b.n	80004e8 <__aeabi_fadd+0x2a4>
 800038a:	29ff      	cmp	r1, #255	; 0xff
 800038c:	d023      	beq.n	80003d6 <__aeabi_fadd+0x192>
 800038e:	0011      	movs	r1, r2
 8000390:	e7c1      	b.n	8000316 <__aeabi_fadd+0xd2>
 8000392:	2300      	movs	r3, #0
 8000394:	22ff      	movs	r2, #255	; 0xff
 8000396:	469c      	mov	ip, r3
 8000398:	e799      	b.n	80002ce <__aeabi_fadd+0x8a>
 800039a:	21fe      	movs	r1, #254	; 0xfe
 800039c:	1c6a      	adds	r2, r5, #1
 800039e:	4211      	tst	r1, r2
 80003a0:	d077      	beq.n	8000492 <__aeabi_fadd+0x24e>
 80003a2:	2aff      	cmp	r2, #255	; 0xff
 80003a4:	d0f5      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80003a6:	0015      	movs	r5, r2
 80003a8:	4446      	add	r6, r8
 80003aa:	0870      	lsrs	r0, r6, #1
 80003ac:	0743      	lsls	r3, r0, #29
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fadd+0x16e>
 80003b0:	e77e      	b.n	80002b0 <__aeabi_fadd+0x6c>
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	2dff      	cmp	r5, #255	; 0xff
 80003b6:	d00e      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003b8:	025b      	lsls	r3, r3, #9
 80003ba:	0a5b      	lsrs	r3, r3, #9
 80003bc:	469c      	mov	ip, r3
 80003be:	b2ea      	uxtb	r2, r5
 80003c0:	e785      	b.n	80002ce <__aeabi_fadd+0x8a>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d007      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	03d2      	lsls	r2, r2, #15
 80003ca:	4213      	tst	r3, r2
 80003cc:	d003      	beq.n	80003d6 <__aeabi_fadd+0x192>
 80003ce:	4210      	tst	r0, r2
 80003d0:	d101      	bne.n	80003d6 <__aeabi_fadd+0x192>
 80003d2:	000c      	movs	r4, r1
 80003d4:	0003      	movs	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0db      	beq.n	8000392 <__aeabi_fadd+0x14e>
 80003da:	2080      	movs	r0, #128	; 0x80
 80003dc:	03c0      	lsls	r0, r0, #15
 80003de:	4318      	orrs	r0, r3
 80003e0:	0240      	lsls	r0, r0, #9
 80003e2:	0a43      	lsrs	r3, r0, #9
 80003e4:	469c      	mov	ip, r3
 80003e6:	22ff      	movs	r2, #255	; 0xff
 80003e8:	e771      	b.n	80002ce <__aeabi_fadd+0x8a>
 80003ea:	2900      	cmp	r1, #0
 80003ec:	d0d5      	beq.n	800039a <__aeabi_fadd+0x156>
 80003ee:	1b7a      	subs	r2, r7, r5
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d160      	bne.n	80004b6 <__aeabi_fadd+0x272>
 80003f4:	4643      	mov	r3, r8
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d024      	beq.n	8000444 <__aeabi_fadd+0x200>
 80003fa:	1e53      	subs	r3, r2, #1
 80003fc:	2a01      	cmp	r2, #1
 80003fe:	d073      	beq.n	80004e8 <__aeabi_fadd+0x2a4>
 8000400:	2aff      	cmp	r2, #255	; 0xff
 8000402:	d0e7      	beq.n	80003d4 <__aeabi_fadd+0x190>
 8000404:	001a      	movs	r2, r3
 8000406:	2a1b      	cmp	r2, #27
 8000408:	dc00      	bgt.n	800040c <__aeabi_fadd+0x1c8>
 800040a:	e085      	b.n	8000518 <__aeabi_fadd+0x2d4>
 800040c:	2001      	movs	r0, #1
 800040e:	003d      	movs	r5, r7
 8000410:	1980      	adds	r0, r0, r6
 8000412:	e785      	b.n	8000320 <__aeabi_fadd+0xdc>
 8000414:	2320      	movs	r3, #32
 8000416:	003a      	movs	r2, r7
 8000418:	1b45      	subs	r5, r0, r5
 800041a:	0038      	movs	r0, r7
 800041c:	3501      	adds	r5, #1
 800041e:	40ea      	lsrs	r2, r5
 8000420:	1b5d      	subs	r5, r3, r5
 8000422:	40a8      	lsls	r0, r5
 8000424:	1e43      	subs	r3, r0, #1
 8000426:	4198      	sbcs	r0, r3
 8000428:	2500      	movs	r5, #0
 800042a:	4310      	orrs	r0, r2
 800042c:	e73e      	b.n	80002ac <__aeabi_fadd+0x68>
 800042e:	2320      	movs	r3, #32
 8000430:	0030      	movs	r0, r6
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	0031      	movs	r1, r6
 8000436:	4098      	lsls	r0, r3
 8000438:	40d1      	lsrs	r1, r2
 800043a:	1e43      	subs	r3, r0, #1
 800043c:	4198      	sbcs	r0, r3
 800043e:	4308      	orrs	r0, r1
 8000440:	e722      	b.n	8000288 <__aeabi_fadd+0x44>
 8000442:	000c      	movs	r4, r1
 8000444:	0003      	movs	r3, r0
 8000446:	0015      	movs	r5, r2
 8000448:	e7b4      	b.n	80003b4 <__aeabi_fadd+0x170>
 800044a:	2fff      	cmp	r7, #255	; 0xff
 800044c:	d0c1      	beq.n	80003d2 <__aeabi_fadd+0x18e>
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	4640      	mov	r0, r8
 8000452:	04db      	lsls	r3, r3, #19
 8000454:	4318      	orrs	r0, r3
 8000456:	4680      	mov	r8, r0
 8000458:	2a1b      	cmp	r2, #27
 800045a:	dd51      	ble.n	8000500 <__aeabi_fadd+0x2bc>
 800045c:	2001      	movs	r0, #1
 800045e:	000c      	movs	r4, r1
 8000460:	003d      	movs	r5, r7
 8000462:	1a30      	subs	r0, r6, r0
 8000464:	e712      	b.n	800028c <__aeabi_fadd+0x48>
 8000466:	4643      	mov	r3, r8
 8000468:	1b9f      	subs	r7, r3, r6
 800046a:	017b      	lsls	r3, r7, #5
 800046c:	d42b      	bmi.n	80004c6 <__aeabi_fadd+0x282>
 800046e:	2f00      	cmp	r7, #0
 8000470:	d000      	beq.n	8000474 <__aeabi_fadd+0x230>
 8000472:	e710      	b.n	8000296 <__aeabi_fadd+0x52>
 8000474:	2300      	movs	r3, #0
 8000476:	2400      	movs	r4, #0
 8000478:	2200      	movs	r2, #0
 800047a:	469c      	mov	ip, r3
 800047c:	e727      	b.n	80002ce <__aeabi_fadd+0x8a>
 800047e:	2320      	movs	r3, #32
 8000480:	0032      	movs	r2, r6
 8000482:	0030      	movs	r0, r6
 8000484:	40ca      	lsrs	r2, r1
 8000486:	1a59      	subs	r1, r3, r1
 8000488:	4088      	lsls	r0, r1
 800048a:	1e43      	subs	r3, r0, #1
 800048c:	4198      	sbcs	r0, r3
 800048e:	4310      	orrs	r0, r2
 8000490:	e745      	b.n	800031e <__aeabi_fadd+0xda>
 8000492:	2d00      	cmp	r5, #0
 8000494:	d14a      	bne.n	800052c <__aeabi_fadd+0x2e8>
 8000496:	4643      	mov	r3, r8
 8000498:	2b00      	cmp	r3, #0
 800049a:	d063      	beq.n	8000564 <__aeabi_fadd+0x320>
 800049c:	2200      	movs	r2, #0
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x260>
 80004a2:	e714      	b.n	80002ce <__aeabi_fadd+0x8a>
 80004a4:	0030      	movs	r0, r6
 80004a6:	4440      	add	r0, r8
 80004a8:	0143      	lsls	r3, r0, #5
 80004aa:	d400      	bmi.n	80004ae <__aeabi_fadd+0x26a>
 80004ac:	e77e      	b.n	80003ac <__aeabi_fadd+0x168>
 80004ae:	4b32      	ldr	r3, [pc, #200]	; (8000578 <__aeabi_fadd+0x334>)
 80004b0:	3501      	adds	r5, #1
 80004b2:	4018      	ands	r0, r3
 80004b4:	e77a      	b.n	80003ac <__aeabi_fadd+0x168>
 80004b6:	2fff      	cmp	r7, #255	; 0xff
 80004b8:	d08c      	beq.n	80003d4 <__aeabi_fadd+0x190>
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	4641      	mov	r1, r8
 80004be:	04db      	lsls	r3, r3, #19
 80004c0:	4319      	orrs	r1, r3
 80004c2:	4688      	mov	r8, r1
 80004c4:	e79f      	b.n	8000406 <__aeabi_fadd+0x1c2>
 80004c6:	4643      	mov	r3, r8
 80004c8:	000c      	movs	r4, r1
 80004ca:	1af7      	subs	r7, r6, r3
 80004cc:	e6e3      	b.n	8000296 <__aeabi_fadd+0x52>
 80004ce:	4642      	mov	r2, r8
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fadd+0x292>
 80004d4:	e775      	b.n	80003c2 <__aeabi_fadd+0x17e>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d000      	beq.n	80004dc <__aeabi_fadd+0x298>
 80004da:	e77a      	b.n	80003d2 <__aeabi_fadd+0x18e>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	03db      	lsls	r3, r3, #15
 80004e0:	2400      	movs	r4, #0
 80004e2:	469c      	mov	ip, r3
 80004e4:	22ff      	movs	r2, #255	; 0xff
 80004e6:	e6f2      	b.n	80002ce <__aeabi_fadd+0x8a>
 80004e8:	0030      	movs	r0, r6
 80004ea:	4440      	add	r0, r8
 80004ec:	2501      	movs	r5, #1
 80004ee:	0143      	lsls	r3, r0, #5
 80004f0:	d400      	bmi.n	80004f4 <__aeabi_fadd+0x2b0>
 80004f2:	e75b      	b.n	80003ac <__aeabi_fadd+0x168>
 80004f4:	2502      	movs	r5, #2
 80004f6:	e718      	b.n	800032a <__aeabi_fadd+0xe6>
 80004f8:	4643      	mov	r3, r8
 80004fa:	2501      	movs	r5, #1
 80004fc:	1b98      	subs	r0, r3, r6
 80004fe:	e6c5      	b.n	800028c <__aeabi_fadd+0x48>
 8000500:	2320      	movs	r3, #32
 8000502:	4644      	mov	r4, r8
 8000504:	4640      	mov	r0, r8
 8000506:	40d4      	lsrs	r4, r2
 8000508:	1a9a      	subs	r2, r3, r2
 800050a:	4090      	lsls	r0, r2
 800050c:	1e43      	subs	r3, r0, #1
 800050e:	4198      	sbcs	r0, r3
 8000510:	4320      	orrs	r0, r4
 8000512:	e7a4      	b.n	800045e <__aeabi_fadd+0x21a>
 8000514:	000d      	movs	r5, r1
 8000516:	e74d      	b.n	80003b4 <__aeabi_fadd+0x170>
 8000518:	2320      	movs	r3, #32
 800051a:	4641      	mov	r1, r8
 800051c:	4640      	mov	r0, r8
 800051e:	40d1      	lsrs	r1, r2
 8000520:	1a9a      	subs	r2, r3, r2
 8000522:	4090      	lsls	r0, r2
 8000524:	1e43      	subs	r3, r0, #1
 8000526:	4198      	sbcs	r0, r3
 8000528:	4308      	orrs	r0, r1
 800052a:	e770      	b.n	800040e <__aeabi_fadd+0x1ca>
 800052c:	4642      	mov	r2, r8
 800052e:	2a00      	cmp	r2, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x2f0>
 8000532:	e74f      	b.n	80003d4 <__aeabi_fadd+0x190>
 8000534:	2e00      	cmp	r6, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2f6>
 8000538:	e74d      	b.n	80003d6 <__aeabi_fadd+0x192>
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	03d2      	lsls	r2, r2, #15
 800053e:	4213      	tst	r3, r2
 8000540:	d100      	bne.n	8000544 <__aeabi_fadd+0x300>
 8000542:	e748      	b.n	80003d6 <__aeabi_fadd+0x192>
 8000544:	4210      	tst	r0, r2
 8000546:	d000      	beq.n	800054a <__aeabi_fadd+0x306>
 8000548:	e745      	b.n	80003d6 <__aeabi_fadd+0x192>
 800054a:	0003      	movs	r3, r0
 800054c:	e743      	b.n	80003d6 <__aeabi_fadd+0x192>
 800054e:	2e00      	cmp	r6, #0
 8000550:	d090      	beq.n	8000474 <__aeabi_fadd+0x230>
 8000552:	000c      	movs	r4, r1
 8000554:	4684      	mov	ip, r0
 8000556:	2200      	movs	r2, #0
 8000558:	e6b9      	b.n	80002ce <__aeabi_fadd+0x8a>
 800055a:	4643      	mov	r3, r8
 800055c:	000c      	movs	r4, r1
 800055e:	1af0      	subs	r0, r6, r3
 8000560:	3501      	adds	r5, #1
 8000562:	e693      	b.n	800028c <__aeabi_fadd+0x48>
 8000564:	4684      	mov	ip, r0
 8000566:	2200      	movs	r2, #0
 8000568:	e6b1      	b.n	80002ce <__aeabi_fadd+0x8a>
 800056a:	2800      	cmp	r0, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x32c>
 800056e:	e71d      	b.n	80003ac <__aeabi_fadd+0x168>
 8000570:	2300      	movs	r3, #0
 8000572:	2400      	movs	r4, #0
 8000574:	469c      	mov	ip, r3
 8000576:	e6aa      	b.n	80002ce <__aeabi_fadd+0x8a>
 8000578:	fbffffff 	.word	0xfbffffff
 800057c:	7dffffff 	.word	0x7dffffff

08000580 <__aeabi_fmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	464f      	mov	r7, r9
 8000584:	4646      	mov	r6, r8
 8000586:	46d6      	mov	lr, sl
 8000588:	0244      	lsls	r4, r0, #9
 800058a:	0045      	lsls	r5, r0, #1
 800058c:	b5c0      	push	{r6, r7, lr}
 800058e:	0a64      	lsrs	r4, r4, #9
 8000590:	1c0f      	adds	r7, r1, #0
 8000592:	0e2d      	lsrs	r5, r5, #24
 8000594:	0fc6      	lsrs	r6, r0, #31
 8000596:	2d00      	cmp	r5, #0
 8000598:	d100      	bne.n	800059c <__aeabi_fmul+0x1c>
 800059a:	e08d      	b.n	80006b8 <__aeabi_fmul+0x138>
 800059c:	2dff      	cmp	r5, #255	; 0xff
 800059e:	d100      	bne.n	80005a2 <__aeabi_fmul+0x22>
 80005a0:	e092      	b.n	80006c8 <__aeabi_fmul+0x148>
 80005a2:	2300      	movs	r3, #0
 80005a4:	2080      	movs	r0, #128	; 0x80
 80005a6:	4699      	mov	r9, r3
 80005a8:	469a      	mov	sl, r3
 80005aa:	00e4      	lsls	r4, r4, #3
 80005ac:	04c0      	lsls	r0, r0, #19
 80005ae:	4304      	orrs	r4, r0
 80005b0:	3d7f      	subs	r5, #127	; 0x7f
 80005b2:	0278      	lsls	r0, r7, #9
 80005b4:	0a43      	lsrs	r3, r0, #9
 80005b6:	4698      	mov	r8, r3
 80005b8:	007b      	lsls	r3, r7, #1
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	0fff      	lsrs	r7, r7, #31
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fmul+0x44>
 80005c2:	e070      	b.n	80006a6 <__aeabi_fmul+0x126>
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fmul+0x4a>
 80005c8:	e086      	b.n	80006d8 <__aeabi_fmul+0x158>
 80005ca:	4642      	mov	r2, r8
 80005cc:	00d0      	lsls	r0, r2, #3
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	3b7f      	subs	r3, #127	; 0x7f
 80005d2:	18ed      	adds	r5, r5, r3
 80005d4:	2300      	movs	r3, #0
 80005d6:	04d2      	lsls	r2, r2, #19
 80005d8:	4302      	orrs	r2, r0
 80005da:	4690      	mov	r8, r2
 80005dc:	469c      	mov	ip, r3
 80005de:	0031      	movs	r1, r6
 80005e0:	464b      	mov	r3, r9
 80005e2:	4079      	eors	r1, r7
 80005e4:	1c68      	adds	r0, r5, #1
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d81c      	bhi.n	8000624 <__aeabi_fmul+0xa4>
 80005ea:	4a76      	ldr	r2, [pc, #472]	; (80007c4 <__aeabi_fmul+0x244>)
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	58d3      	ldr	r3, [r2, r3]
 80005f0:	469f      	mov	pc, r3
 80005f2:	0039      	movs	r1, r7
 80005f4:	4644      	mov	r4, r8
 80005f6:	46e2      	mov	sl, ip
 80005f8:	4653      	mov	r3, sl
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d00f      	beq.n	800061e <__aeabi_fmul+0x9e>
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d100      	bne.n	8000604 <__aeabi_fmul+0x84>
 8000602:	e0d7      	b.n	80007b4 <__aeabi_fmul+0x234>
 8000604:	2b01      	cmp	r3, #1
 8000606:	d137      	bne.n	8000678 <__aeabi_fmul+0xf8>
 8000608:	2000      	movs	r0, #0
 800060a:	2400      	movs	r4, #0
 800060c:	05c0      	lsls	r0, r0, #23
 800060e:	4320      	orrs	r0, r4
 8000610:	07c9      	lsls	r1, r1, #31
 8000612:	4308      	orrs	r0, r1
 8000614:	bce0      	pop	{r5, r6, r7}
 8000616:	46ba      	mov	sl, r7
 8000618:	46b1      	mov	r9, r6
 800061a:	46a8      	mov	r8, r5
 800061c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061e:	20ff      	movs	r0, #255	; 0xff
 8000620:	2400      	movs	r4, #0
 8000622:	e7f3      	b.n	800060c <__aeabi_fmul+0x8c>
 8000624:	0c26      	lsrs	r6, r4, #16
 8000626:	0424      	lsls	r4, r4, #16
 8000628:	0c22      	lsrs	r2, r4, #16
 800062a:	4644      	mov	r4, r8
 800062c:	0424      	lsls	r4, r4, #16
 800062e:	0c24      	lsrs	r4, r4, #16
 8000630:	4643      	mov	r3, r8
 8000632:	0027      	movs	r7, r4
 8000634:	0c1b      	lsrs	r3, r3, #16
 8000636:	4357      	muls	r7, r2
 8000638:	4374      	muls	r4, r6
 800063a:	435a      	muls	r2, r3
 800063c:	435e      	muls	r6, r3
 800063e:	1912      	adds	r2, r2, r4
 8000640:	0c3b      	lsrs	r3, r7, #16
 8000642:	189b      	adds	r3, r3, r2
 8000644:	429c      	cmp	r4, r3
 8000646:	d903      	bls.n	8000650 <__aeabi_fmul+0xd0>
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	0252      	lsls	r2, r2, #9
 800064c:	4694      	mov	ip, r2
 800064e:	4466      	add	r6, ip
 8000650:	043f      	lsls	r7, r7, #16
 8000652:	041a      	lsls	r2, r3, #16
 8000654:	0c3f      	lsrs	r7, r7, #16
 8000656:	19d2      	adds	r2, r2, r7
 8000658:	0194      	lsls	r4, r2, #6
 800065a:	1e67      	subs	r7, r4, #1
 800065c:	41bc      	sbcs	r4, r7
 800065e:	0c1b      	lsrs	r3, r3, #16
 8000660:	0e92      	lsrs	r2, r2, #26
 8000662:	199b      	adds	r3, r3, r6
 8000664:	4314      	orrs	r4, r2
 8000666:	019b      	lsls	r3, r3, #6
 8000668:	431c      	orrs	r4, r3
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	d400      	bmi.n	8000670 <__aeabi_fmul+0xf0>
 800066e:	e09b      	b.n	80007a8 <__aeabi_fmul+0x228>
 8000670:	2301      	movs	r3, #1
 8000672:	0862      	lsrs	r2, r4, #1
 8000674:	401c      	ands	r4, r3
 8000676:	4314      	orrs	r4, r2
 8000678:	0002      	movs	r2, r0
 800067a:	327f      	adds	r2, #127	; 0x7f
 800067c:	2a00      	cmp	r2, #0
 800067e:	dd64      	ble.n	800074a <__aeabi_fmul+0x1ca>
 8000680:	0763      	lsls	r3, r4, #29
 8000682:	d004      	beq.n	800068e <__aeabi_fmul+0x10e>
 8000684:	230f      	movs	r3, #15
 8000686:	4023      	ands	r3, r4
 8000688:	2b04      	cmp	r3, #4
 800068a:	d000      	beq.n	800068e <__aeabi_fmul+0x10e>
 800068c:	3404      	adds	r4, #4
 800068e:	0123      	lsls	r3, r4, #4
 8000690:	d503      	bpl.n	800069a <__aeabi_fmul+0x11a>
 8000692:	0002      	movs	r2, r0
 8000694:	4b4c      	ldr	r3, [pc, #304]	; (80007c8 <__aeabi_fmul+0x248>)
 8000696:	3280      	adds	r2, #128	; 0x80
 8000698:	401c      	ands	r4, r3
 800069a:	2afe      	cmp	r2, #254	; 0xfe
 800069c:	dcbf      	bgt.n	800061e <__aeabi_fmul+0x9e>
 800069e:	01a4      	lsls	r4, r4, #6
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	b2d0      	uxtb	r0, r2
 80006a4:	e7b2      	b.n	800060c <__aeabi_fmul+0x8c>
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d13d      	bne.n	8000728 <__aeabi_fmul+0x1a8>
 80006ac:	464a      	mov	r2, r9
 80006ae:	3301      	adds	r3, #1
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4691      	mov	r9, r2
 80006b4:	469c      	mov	ip, r3
 80006b6:	e792      	b.n	80005de <__aeabi_fmul+0x5e>
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d129      	bne.n	8000710 <__aeabi_fmul+0x190>
 80006bc:	2304      	movs	r3, #4
 80006be:	4699      	mov	r9, r3
 80006c0:	3b03      	subs	r3, #3
 80006c2:	2500      	movs	r5, #0
 80006c4:	469a      	mov	sl, r3
 80006c6:	e774      	b.n	80005b2 <__aeabi_fmul+0x32>
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	d11b      	bne.n	8000704 <__aeabi_fmul+0x184>
 80006cc:	2308      	movs	r3, #8
 80006ce:	4699      	mov	r9, r3
 80006d0:	3b06      	subs	r3, #6
 80006d2:	25ff      	movs	r5, #255	; 0xff
 80006d4:	469a      	mov	sl, r3
 80006d6:	e76c      	b.n	80005b2 <__aeabi_fmul+0x32>
 80006d8:	4643      	mov	r3, r8
 80006da:	35ff      	adds	r5, #255	; 0xff
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10b      	bne.n	80006f8 <__aeabi_fmul+0x178>
 80006e0:	2302      	movs	r3, #2
 80006e2:	464a      	mov	r2, r9
 80006e4:	431a      	orrs	r2, r3
 80006e6:	4691      	mov	r9, r2
 80006e8:	469c      	mov	ip, r3
 80006ea:	e778      	b.n	80005de <__aeabi_fmul+0x5e>
 80006ec:	4653      	mov	r3, sl
 80006ee:	0031      	movs	r1, r6
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fmul+0x176>
 80006f4:	e783      	b.n	80005fe <__aeabi_fmul+0x7e>
 80006f6:	e792      	b.n	800061e <__aeabi_fmul+0x9e>
 80006f8:	2303      	movs	r3, #3
 80006fa:	464a      	mov	r2, r9
 80006fc:	431a      	orrs	r2, r3
 80006fe:	4691      	mov	r9, r2
 8000700:	469c      	mov	ip, r3
 8000702:	e76c      	b.n	80005de <__aeabi_fmul+0x5e>
 8000704:	230c      	movs	r3, #12
 8000706:	4699      	mov	r9, r3
 8000708:	3b09      	subs	r3, #9
 800070a:	25ff      	movs	r5, #255	; 0xff
 800070c:	469a      	mov	sl, r3
 800070e:	e750      	b.n	80005b2 <__aeabi_fmul+0x32>
 8000710:	0020      	movs	r0, r4
 8000712:	f000 fab9 	bl	8000c88 <__clzsi2>
 8000716:	2576      	movs	r5, #118	; 0x76
 8000718:	1f43      	subs	r3, r0, #5
 800071a:	409c      	lsls	r4, r3
 800071c:	2300      	movs	r3, #0
 800071e:	426d      	negs	r5, r5
 8000720:	4699      	mov	r9, r3
 8000722:	469a      	mov	sl, r3
 8000724:	1a2d      	subs	r5, r5, r0
 8000726:	e744      	b.n	80005b2 <__aeabi_fmul+0x32>
 8000728:	4640      	mov	r0, r8
 800072a:	f000 faad 	bl	8000c88 <__clzsi2>
 800072e:	4642      	mov	r2, r8
 8000730:	1f43      	subs	r3, r0, #5
 8000732:	409a      	lsls	r2, r3
 8000734:	2300      	movs	r3, #0
 8000736:	1a2d      	subs	r5, r5, r0
 8000738:	4690      	mov	r8, r2
 800073a:	469c      	mov	ip, r3
 800073c:	3d76      	subs	r5, #118	; 0x76
 800073e:	e74e      	b.n	80005de <__aeabi_fmul+0x5e>
 8000740:	2480      	movs	r4, #128	; 0x80
 8000742:	2100      	movs	r1, #0
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	03e4      	lsls	r4, r4, #15
 8000748:	e760      	b.n	800060c <__aeabi_fmul+0x8c>
 800074a:	2301      	movs	r3, #1
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	2b1b      	cmp	r3, #27
 8000750:	dd00      	ble.n	8000754 <__aeabi_fmul+0x1d4>
 8000752:	e759      	b.n	8000608 <__aeabi_fmul+0x88>
 8000754:	0022      	movs	r2, r4
 8000756:	309e      	adds	r0, #158	; 0x9e
 8000758:	40da      	lsrs	r2, r3
 800075a:	4084      	lsls	r4, r0
 800075c:	0013      	movs	r3, r2
 800075e:	1e62      	subs	r2, r4, #1
 8000760:	4194      	sbcs	r4, r2
 8000762:	431c      	orrs	r4, r3
 8000764:	0763      	lsls	r3, r4, #29
 8000766:	d004      	beq.n	8000772 <__aeabi_fmul+0x1f2>
 8000768:	230f      	movs	r3, #15
 800076a:	4023      	ands	r3, r4
 800076c:	2b04      	cmp	r3, #4
 800076e:	d000      	beq.n	8000772 <__aeabi_fmul+0x1f2>
 8000770:	3404      	adds	r4, #4
 8000772:	0163      	lsls	r3, r4, #5
 8000774:	d51a      	bpl.n	80007ac <__aeabi_fmul+0x22c>
 8000776:	2001      	movs	r0, #1
 8000778:	2400      	movs	r4, #0
 800077a:	e747      	b.n	800060c <__aeabi_fmul+0x8c>
 800077c:	2080      	movs	r0, #128	; 0x80
 800077e:	03c0      	lsls	r0, r0, #15
 8000780:	4204      	tst	r4, r0
 8000782:	d009      	beq.n	8000798 <__aeabi_fmul+0x218>
 8000784:	4643      	mov	r3, r8
 8000786:	4203      	tst	r3, r0
 8000788:	d106      	bne.n	8000798 <__aeabi_fmul+0x218>
 800078a:	4644      	mov	r4, r8
 800078c:	4304      	orrs	r4, r0
 800078e:	0264      	lsls	r4, r4, #9
 8000790:	0039      	movs	r1, r7
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	0a64      	lsrs	r4, r4, #9
 8000796:	e739      	b.n	800060c <__aeabi_fmul+0x8c>
 8000798:	2080      	movs	r0, #128	; 0x80
 800079a:	03c0      	lsls	r0, r0, #15
 800079c:	4304      	orrs	r4, r0
 800079e:	0264      	lsls	r4, r4, #9
 80007a0:	0031      	movs	r1, r6
 80007a2:	20ff      	movs	r0, #255	; 0xff
 80007a4:	0a64      	lsrs	r4, r4, #9
 80007a6:	e731      	b.n	800060c <__aeabi_fmul+0x8c>
 80007a8:	0028      	movs	r0, r5
 80007aa:	e765      	b.n	8000678 <__aeabi_fmul+0xf8>
 80007ac:	01a4      	lsls	r4, r4, #6
 80007ae:	2000      	movs	r0, #0
 80007b0:	0a64      	lsrs	r4, r4, #9
 80007b2:	e72b      	b.n	800060c <__aeabi_fmul+0x8c>
 80007b4:	2080      	movs	r0, #128	; 0x80
 80007b6:	03c0      	lsls	r0, r0, #15
 80007b8:	4304      	orrs	r4, r0
 80007ba:	0264      	lsls	r4, r4, #9
 80007bc:	20ff      	movs	r0, #255	; 0xff
 80007be:	0a64      	lsrs	r4, r4, #9
 80007c0:	e724      	b.n	800060c <__aeabi_fmul+0x8c>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	08006664 	.word	0x08006664
 80007c8:	f7ffffff 	.word	0xf7ffffff

080007cc <__aeabi_fsub>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	46ce      	mov	lr, r9
 80007d0:	4647      	mov	r7, r8
 80007d2:	0243      	lsls	r3, r0, #9
 80007d4:	0a5b      	lsrs	r3, r3, #9
 80007d6:	024e      	lsls	r6, r1, #9
 80007d8:	00da      	lsls	r2, r3, #3
 80007da:	4694      	mov	ip, r2
 80007dc:	0a72      	lsrs	r2, r6, #9
 80007de:	4691      	mov	r9, r2
 80007e0:	0045      	lsls	r5, r0, #1
 80007e2:	004a      	lsls	r2, r1, #1
 80007e4:	b580      	push	{r7, lr}
 80007e6:	0e2d      	lsrs	r5, r5, #24
 80007e8:	001f      	movs	r7, r3
 80007ea:	0fc4      	lsrs	r4, r0, #31
 80007ec:	0e12      	lsrs	r2, r2, #24
 80007ee:	0fc9      	lsrs	r1, r1, #31
 80007f0:	09b6      	lsrs	r6, r6, #6
 80007f2:	2aff      	cmp	r2, #255	; 0xff
 80007f4:	d05b      	beq.n	80008ae <__aeabi_fsub+0xe2>
 80007f6:	2001      	movs	r0, #1
 80007f8:	4041      	eors	r1, r0
 80007fa:	428c      	cmp	r4, r1
 80007fc:	d039      	beq.n	8000872 <__aeabi_fsub+0xa6>
 80007fe:	1aa8      	subs	r0, r5, r2
 8000800:	2800      	cmp	r0, #0
 8000802:	dd5a      	ble.n	80008ba <__aeabi_fsub+0xee>
 8000804:	2a00      	cmp	r2, #0
 8000806:	d06a      	beq.n	80008de <__aeabi_fsub+0x112>
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d100      	bne.n	800080e <__aeabi_fsub+0x42>
 800080c:	e0d9      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4316      	orrs	r6, r2
 8000814:	281b      	cmp	r0, #27
 8000816:	dc00      	bgt.n	800081a <__aeabi_fsub+0x4e>
 8000818:	e0e9      	b.n	80009ee <__aeabi_fsub+0x222>
 800081a:	2001      	movs	r0, #1
 800081c:	4663      	mov	r3, ip
 800081e:	1a18      	subs	r0, r3, r0
 8000820:	0143      	lsls	r3, r0, #5
 8000822:	d400      	bmi.n	8000826 <__aeabi_fsub+0x5a>
 8000824:	e0b4      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000826:	0180      	lsls	r0, r0, #6
 8000828:	0987      	lsrs	r7, r0, #6
 800082a:	0038      	movs	r0, r7
 800082c:	f000 fa2c 	bl	8000c88 <__clzsi2>
 8000830:	3805      	subs	r0, #5
 8000832:	4087      	lsls	r7, r0
 8000834:	4285      	cmp	r5, r0
 8000836:	dc00      	bgt.n	800083a <__aeabi_fsub+0x6e>
 8000838:	e0cc      	b.n	80009d4 <__aeabi_fsub+0x208>
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	48b5      	ldr	r0, [pc, #724]	; (8000b14 <__aeabi_fsub+0x348>)
 800083e:	4038      	ands	r0, r7
 8000840:	0743      	lsls	r3, r0, #29
 8000842:	d004      	beq.n	800084e <__aeabi_fsub+0x82>
 8000844:	230f      	movs	r3, #15
 8000846:	4003      	ands	r3, r0
 8000848:	2b04      	cmp	r3, #4
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x82>
 800084c:	3004      	adds	r0, #4
 800084e:	0143      	lsls	r3, r0, #5
 8000850:	d400      	bmi.n	8000854 <__aeabi_fsub+0x88>
 8000852:	e0a0      	b.n	8000996 <__aeabi_fsub+0x1ca>
 8000854:	1c6a      	adds	r2, r5, #1
 8000856:	2dfe      	cmp	r5, #254	; 0xfe
 8000858:	d100      	bne.n	800085c <__aeabi_fsub+0x90>
 800085a:	e08d      	b.n	8000978 <__aeabi_fsub+0x1ac>
 800085c:	0180      	lsls	r0, r0, #6
 800085e:	0a47      	lsrs	r7, r0, #9
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	05d0      	lsls	r0, r2, #23
 8000864:	4338      	orrs	r0, r7
 8000866:	07e4      	lsls	r4, r4, #31
 8000868:	4320      	orrs	r0, r4
 800086a:	bcc0      	pop	{r6, r7}
 800086c:	46b9      	mov	r9, r7
 800086e:	46b0      	mov	r8, r6
 8000870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000872:	1aa8      	subs	r0, r5, r2
 8000874:	4680      	mov	r8, r0
 8000876:	2800      	cmp	r0, #0
 8000878:	dd45      	ble.n	8000906 <__aeabi_fsub+0x13a>
 800087a:	2a00      	cmp	r2, #0
 800087c:	d070      	beq.n	8000960 <__aeabi_fsub+0x194>
 800087e:	2dff      	cmp	r5, #255	; 0xff
 8000880:	d100      	bne.n	8000884 <__aeabi_fsub+0xb8>
 8000882:	e09e      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	04db      	lsls	r3, r3, #19
 8000888:	431e      	orrs	r6, r3
 800088a:	4643      	mov	r3, r8
 800088c:	2b1b      	cmp	r3, #27
 800088e:	dc00      	bgt.n	8000892 <__aeabi_fsub+0xc6>
 8000890:	e0d2      	b.n	8000a38 <__aeabi_fsub+0x26c>
 8000892:	2001      	movs	r0, #1
 8000894:	4460      	add	r0, ip
 8000896:	0143      	lsls	r3, r0, #5
 8000898:	d57a      	bpl.n	8000990 <__aeabi_fsub+0x1c4>
 800089a:	3501      	adds	r5, #1
 800089c:	2dff      	cmp	r5, #255	; 0xff
 800089e:	d06b      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 80008a0:	2301      	movs	r3, #1
 80008a2:	4a9d      	ldr	r2, [pc, #628]	; (8000b18 <__aeabi_fsub+0x34c>)
 80008a4:	4003      	ands	r3, r0
 80008a6:	0840      	lsrs	r0, r0, #1
 80008a8:	4010      	ands	r0, r2
 80008aa:	4318      	orrs	r0, r3
 80008ac:	e7c8      	b.n	8000840 <__aeabi_fsub+0x74>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d020      	beq.n	80008f4 <__aeabi_fsub+0x128>
 80008b2:	428c      	cmp	r4, r1
 80008b4:	d023      	beq.n	80008fe <__aeabi_fsub+0x132>
 80008b6:	0028      	movs	r0, r5
 80008b8:	38ff      	subs	r0, #255	; 0xff
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d039      	beq.n	8000932 <__aeabi_fsub+0x166>
 80008be:	1b57      	subs	r7, r2, r5
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d000      	beq.n	80008c6 <__aeabi_fsub+0xfa>
 80008c4:	e09d      	b.n	8000a02 <__aeabi_fsub+0x236>
 80008c6:	4663      	mov	r3, ip
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_fsub+0x102>
 80008cc:	e0db      	b.n	8000a86 <__aeabi_fsub+0x2ba>
 80008ce:	1e7b      	subs	r3, r7, #1
 80008d0:	2f01      	cmp	r7, #1
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x10a>
 80008d4:	e10d      	b.n	8000af2 <__aeabi_fsub+0x326>
 80008d6:	2fff      	cmp	r7, #255	; 0xff
 80008d8:	d071      	beq.n	80009be <__aeabi_fsub+0x1f2>
 80008da:	001f      	movs	r7, r3
 80008dc:	e098      	b.n	8000a10 <__aeabi_fsub+0x244>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fsub+0x118>
 80008e2:	e0a7      	b.n	8000a34 <__aeabi_fsub+0x268>
 80008e4:	1e42      	subs	r2, r0, #1
 80008e6:	2801      	cmp	r0, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_fsub+0x120>
 80008ea:	e0e6      	b.n	8000aba <__aeabi_fsub+0x2ee>
 80008ec:	28ff      	cmp	r0, #255	; 0xff
 80008ee:	d068      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80008f0:	0010      	movs	r0, r2
 80008f2:	e78f      	b.n	8000814 <__aeabi_fsub+0x48>
 80008f4:	2001      	movs	r0, #1
 80008f6:	4041      	eors	r1, r0
 80008f8:	42a1      	cmp	r1, r4
 80008fa:	d000      	beq.n	80008fe <__aeabi_fsub+0x132>
 80008fc:	e77f      	b.n	80007fe <__aeabi_fsub+0x32>
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	4240      	negs	r0, r0
 8000902:	4680      	mov	r8, r0
 8000904:	44a8      	add	r8, r5
 8000906:	4640      	mov	r0, r8
 8000908:	2800      	cmp	r0, #0
 800090a:	d038      	beq.n	800097e <__aeabi_fsub+0x1b2>
 800090c:	1b51      	subs	r1, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fsub+0x148>
 8000912:	e0ae      	b.n	8000a72 <__aeabi_fsub+0x2a6>
 8000914:	2aff      	cmp	r2, #255	; 0xff
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x14e>
 8000918:	e0df      	b.n	8000ada <__aeabi_fsub+0x30e>
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	4660      	mov	r0, ip
 800091e:	04db      	lsls	r3, r3, #19
 8000920:	4318      	orrs	r0, r3
 8000922:	4684      	mov	ip, r0
 8000924:	291b      	cmp	r1, #27
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0x15e>
 8000928:	e0d9      	b.n	8000ade <__aeabi_fsub+0x312>
 800092a:	2001      	movs	r0, #1
 800092c:	0015      	movs	r5, r2
 800092e:	1980      	adds	r0, r0, r6
 8000930:	e7b1      	b.n	8000896 <__aeabi_fsub+0xca>
 8000932:	20fe      	movs	r0, #254	; 0xfe
 8000934:	1c6a      	adds	r2, r5, #1
 8000936:	4210      	tst	r0, r2
 8000938:	d171      	bne.n	8000a1e <__aeabi_fsub+0x252>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d000      	beq.n	8000940 <__aeabi_fsub+0x174>
 800093e:	e0a6      	b.n	8000a8e <__aeabi_fsub+0x2c2>
 8000940:	4663      	mov	r3, ip
 8000942:	2b00      	cmp	r3, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_fsub+0x17c>
 8000946:	e0d9      	b.n	8000afc <__aeabi_fsub+0x330>
 8000948:	2200      	movs	r2, #0
 800094a:	2e00      	cmp	r6, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x184>
 800094e:	e788      	b.n	8000862 <__aeabi_fsub+0x96>
 8000950:	1b98      	subs	r0, r3, r6
 8000952:	0143      	lsls	r3, r0, #5
 8000954:	d400      	bmi.n	8000958 <__aeabi_fsub+0x18c>
 8000956:	e0e1      	b.n	8000b1c <__aeabi_fsub+0x350>
 8000958:	4663      	mov	r3, ip
 800095a:	000c      	movs	r4, r1
 800095c:	1af0      	subs	r0, r6, r3
 800095e:	e76f      	b.n	8000840 <__aeabi_fsub+0x74>
 8000960:	2e00      	cmp	r6, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x19a>
 8000964:	e0b7      	b.n	8000ad6 <__aeabi_fsub+0x30a>
 8000966:	0002      	movs	r2, r0
 8000968:	3a01      	subs	r2, #1
 800096a:	2801      	cmp	r0, #1
 800096c:	d100      	bne.n	8000970 <__aeabi_fsub+0x1a4>
 800096e:	e09c      	b.n	8000aaa <__aeabi_fsub+0x2de>
 8000970:	28ff      	cmp	r0, #255	; 0xff
 8000972:	d026      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 8000974:	4690      	mov	r8, r2
 8000976:	e788      	b.n	800088a <__aeabi_fsub+0xbe>
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	2700      	movs	r7, #0
 800097c:	e771      	b.n	8000862 <__aeabi_fsub+0x96>
 800097e:	20fe      	movs	r0, #254	; 0xfe
 8000980:	1c6a      	adds	r2, r5, #1
 8000982:	4210      	tst	r0, r2
 8000984:	d064      	beq.n	8000a50 <__aeabi_fsub+0x284>
 8000986:	2aff      	cmp	r2, #255	; 0xff
 8000988:	d0f6      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 800098a:	0015      	movs	r5, r2
 800098c:	4466      	add	r6, ip
 800098e:	0870      	lsrs	r0, r6, #1
 8000990:	0743      	lsls	r3, r0, #29
 8000992:	d000      	beq.n	8000996 <__aeabi_fsub+0x1ca>
 8000994:	e756      	b.n	8000844 <__aeabi_fsub+0x78>
 8000996:	08c3      	lsrs	r3, r0, #3
 8000998:	2dff      	cmp	r5, #255	; 0xff
 800099a:	d012      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 800099c:	025b      	lsls	r3, r3, #9
 800099e:	0a5f      	lsrs	r7, r3, #9
 80009a0:	b2ea      	uxtb	r2, r5
 80009a2:	e75e      	b.n	8000862 <__aeabi_fsub+0x96>
 80009a4:	4662      	mov	r2, ip
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x1e0>
 80009aa:	e096      	b.n	8000ada <__aeabi_fsub+0x30e>
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d008      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	03d2      	lsls	r2, r2, #15
 80009b4:	4213      	tst	r3, r2
 80009b6:	d004      	beq.n	80009c2 <__aeabi_fsub+0x1f6>
 80009b8:	4648      	mov	r0, r9
 80009ba:	4210      	tst	r0, r2
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fsub+0x1f6>
 80009be:	000c      	movs	r4, r1
 80009c0:	464b      	mov	r3, r9
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0d8      	beq.n	8000978 <__aeabi_fsub+0x1ac>
 80009c6:	2780      	movs	r7, #128	; 0x80
 80009c8:	03ff      	lsls	r7, r7, #15
 80009ca:	431f      	orrs	r7, r3
 80009cc:	027f      	lsls	r7, r7, #9
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	0a7f      	lsrs	r7, r7, #9
 80009d2:	e746      	b.n	8000862 <__aeabi_fsub+0x96>
 80009d4:	2320      	movs	r3, #32
 80009d6:	003a      	movs	r2, r7
 80009d8:	1b45      	subs	r5, r0, r5
 80009da:	0038      	movs	r0, r7
 80009dc:	3501      	adds	r5, #1
 80009de:	40ea      	lsrs	r2, r5
 80009e0:	1b5d      	subs	r5, r3, r5
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	1e43      	subs	r3, r0, #1
 80009e6:	4198      	sbcs	r0, r3
 80009e8:	2500      	movs	r5, #0
 80009ea:	4310      	orrs	r0, r2
 80009ec:	e728      	b.n	8000840 <__aeabi_fsub+0x74>
 80009ee:	2320      	movs	r3, #32
 80009f0:	1a1b      	subs	r3, r3, r0
 80009f2:	0032      	movs	r2, r6
 80009f4:	409e      	lsls	r6, r3
 80009f6:	40c2      	lsrs	r2, r0
 80009f8:	0030      	movs	r0, r6
 80009fa:	1e43      	subs	r3, r0, #1
 80009fc:	4198      	sbcs	r0, r3
 80009fe:	4310      	orrs	r0, r2
 8000a00:	e70c      	b.n	800081c <__aeabi_fsub+0x50>
 8000a02:	2aff      	cmp	r2, #255	; 0xff
 8000a04:	d0db      	beq.n	80009be <__aeabi_fsub+0x1f2>
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	4660      	mov	r0, ip
 8000a0a:	04db      	lsls	r3, r3, #19
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	4684      	mov	ip, r0
 8000a10:	2f1b      	cmp	r7, #27
 8000a12:	dd56      	ble.n	8000ac2 <__aeabi_fsub+0x2f6>
 8000a14:	2001      	movs	r0, #1
 8000a16:	000c      	movs	r4, r1
 8000a18:	0015      	movs	r5, r2
 8000a1a:	1a30      	subs	r0, r6, r0
 8000a1c:	e700      	b.n	8000820 <__aeabi_fsub+0x54>
 8000a1e:	4663      	mov	r3, ip
 8000a20:	1b9f      	subs	r7, r3, r6
 8000a22:	017b      	lsls	r3, r7, #5
 8000a24:	d43d      	bmi.n	8000aa2 <__aeabi_fsub+0x2d6>
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0x260>
 8000a2a:	e6fe      	b.n	800082a <__aeabi_fsub+0x5e>
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2700      	movs	r7, #0
 8000a32:	e716      	b.n	8000862 <__aeabi_fsub+0x96>
 8000a34:	0005      	movs	r5, r0
 8000a36:	e7af      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000a38:	0032      	movs	r2, r6
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	4641      	mov	r1, r8
 8000a3e:	40da      	lsrs	r2, r3
 8000a40:	2320      	movs	r3, #32
 8000a42:	1a5b      	subs	r3, r3, r1
 8000a44:	409e      	lsls	r6, r3
 8000a46:	0030      	movs	r0, r6
 8000a48:	1e43      	subs	r3, r0, #1
 8000a4a:	4198      	sbcs	r0, r3
 8000a4c:	4310      	orrs	r0, r2
 8000a4e:	e721      	b.n	8000894 <__aeabi_fsub+0xc8>
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d1a7      	bne.n	80009a4 <__aeabi_fsub+0x1d8>
 8000a54:	4663      	mov	r3, ip
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d059      	beq.n	8000b0e <__aeabi_fsub+0x342>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x296>
 8000a60:	e6ff      	b.n	8000862 <__aeabi_fsub+0x96>
 8000a62:	0030      	movs	r0, r6
 8000a64:	4460      	add	r0, ip
 8000a66:	0143      	lsls	r3, r0, #5
 8000a68:	d592      	bpl.n	8000990 <__aeabi_fsub+0x1c4>
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <__aeabi_fsub+0x348>)
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	4018      	ands	r0, r3
 8000a70:	e78e      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000a72:	4663      	mov	r3, ip
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d047      	beq.n	8000b08 <__aeabi_fsub+0x33c>
 8000a78:	1e4b      	subs	r3, r1, #1
 8000a7a:	2901      	cmp	r1, #1
 8000a7c:	d015      	beq.n	8000aaa <__aeabi_fsub+0x2de>
 8000a7e:	29ff      	cmp	r1, #255	; 0xff
 8000a80:	d02b      	beq.n	8000ada <__aeabi_fsub+0x30e>
 8000a82:	0019      	movs	r1, r3
 8000a84:	e74e      	b.n	8000924 <__aeabi_fsub+0x158>
 8000a86:	000c      	movs	r4, r1
 8000a88:	464b      	mov	r3, r9
 8000a8a:	003d      	movs	r5, r7
 8000a8c:	e784      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d18b      	bne.n	80009ac <__aeabi_fsub+0x1e0>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d192      	bne.n	80009be <__aeabi_fsub+0x1f2>
 8000a98:	2780      	movs	r7, #128	; 0x80
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	03ff      	lsls	r7, r7, #15
 8000aa0:	e6df      	b.n	8000862 <__aeabi_fsub+0x96>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	1af7      	subs	r7, r6, r3
 8000aa8:	e6bf      	b.n	800082a <__aeabi_fsub+0x5e>
 8000aaa:	0030      	movs	r0, r6
 8000aac:	4460      	add	r0, ip
 8000aae:	2501      	movs	r5, #1
 8000ab0:	0143      	lsls	r3, r0, #5
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_fsub+0x2ea>
 8000ab4:	e76c      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000ab6:	2502      	movs	r5, #2
 8000ab8:	e6f2      	b.n	80008a0 <__aeabi_fsub+0xd4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2501      	movs	r5, #1
 8000abe:	1b98      	subs	r0, r3, r6
 8000ac0:	e6ae      	b.n	8000820 <__aeabi_fsub+0x54>
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	4664      	mov	r4, ip
 8000ac6:	4660      	mov	r0, ip
 8000ac8:	40fc      	lsrs	r4, r7
 8000aca:	1bdf      	subs	r7, r3, r7
 8000acc:	40b8      	lsls	r0, r7
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	4320      	orrs	r0, r4
 8000ad4:	e79f      	b.n	8000a16 <__aeabi_fsub+0x24a>
 8000ad6:	0005      	movs	r5, r0
 8000ad8:	e75e      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000ada:	464b      	mov	r3, r9
 8000adc:	e771      	b.n	80009c2 <__aeabi_fsub+0x1f6>
 8000ade:	2320      	movs	r3, #32
 8000ae0:	4665      	mov	r5, ip
 8000ae2:	4660      	mov	r0, ip
 8000ae4:	40cd      	lsrs	r5, r1
 8000ae6:	1a59      	subs	r1, r3, r1
 8000ae8:	4088      	lsls	r0, r1
 8000aea:	1e43      	subs	r3, r0, #1
 8000aec:	4198      	sbcs	r0, r3
 8000aee:	4328      	orrs	r0, r5
 8000af0:	e71c      	b.n	800092c <__aeabi_fsub+0x160>
 8000af2:	4663      	mov	r3, ip
 8000af4:	000c      	movs	r4, r1
 8000af6:	2501      	movs	r5, #1
 8000af8:	1af0      	subs	r0, r6, r3
 8000afa:	e691      	b.n	8000820 <__aeabi_fsub+0x54>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d095      	beq.n	8000a2c <__aeabi_fsub+0x260>
 8000b00:	000c      	movs	r4, r1
 8000b02:	464f      	mov	r7, r9
 8000b04:	2200      	movs	r2, #0
 8000b06:	e6ac      	b.n	8000862 <__aeabi_fsub+0x96>
 8000b08:	464b      	mov	r3, r9
 8000b0a:	000d      	movs	r5, r1
 8000b0c:	e744      	b.n	8000998 <__aeabi_fsub+0x1cc>
 8000b0e:	464f      	mov	r7, r9
 8000b10:	2200      	movs	r2, #0
 8000b12:	e6a6      	b.n	8000862 <__aeabi_fsub+0x96>
 8000b14:	fbffffff 	.word	0xfbffffff
 8000b18:	7dffffff 	.word	0x7dffffff
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x356>
 8000b20:	e736      	b.n	8000990 <__aeabi_fsub+0x1c4>
 8000b22:	2400      	movs	r4, #0
 8000b24:	2700      	movs	r7, #0
 8000b26:	e69c      	b.n	8000862 <__aeabi_fsub+0x96>

08000b28 <__aeabi_f2iz>:
 8000b28:	0241      	lsls	r1, r0, #9
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0fc3      	lsrs	r3, r0, #31
 8000b2e:	0a49      	lsrs	r1, r1, #9
 8000b30:	2000      	movs	r0, #0
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	2a7e      	cmp	r2, #126	; 0x7e
 8000b36:	dd03      	ble.n	8000b40 <__aeabi_f2iz+0x18>
 8000b38:	2a9d      	cmp	r2, #157	; 0x9d
 8000b3a:	dd02      	ble.n	8000b42 <__aeabi_f2iz+0x1a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <__aeabi_f2iz+0x3c>)
 8000b3e:	1898      	adds	r0, r3, r2
 8000b40:	4770      	bx	lr
 8000b42:	2080      	movs	r0, #128	; 0x80
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	4301      	orrs	r1, r0
 8000b48:	2a95      	cmp	r2, #149	; 0x95
 8000b4a:	dc07      	bgt.n	8000b5c <__aeabi_f2iz+0x34>
 8000b4c:	2096      	movs	r0, #150	; 0x96
 8000b4e:	1a82      	subs	r2, r0, r2
 8000b50:	40d1      	lsrs	r1, r2
 8000b52:	4248      	negs	r0, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_f2iz+0x18>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_f2iz+0x18>
 8000b5c:	3a96      	subs	r2, #150	; 0x96
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	e7f7      	b.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	7fffffff 	.word	0x7fffffff

08000b68 <__aeabi_i2f>:
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d013      	beq.n	8000b96 <__aeabi_i2f+0x2e>
 8000b6e:	17c3      	asrs	r3, r0, #31
 8000b70:	18c6      	adds	r6, r0, r3
 8000b72:	405e      	eors	r6, r3
 8000b74:	0fc4      	lsrs	r4, r0, #31
 8000b76:	0030      	movs	r0, r6
 8000b78:	f000 f886 	bl	8000c88 <__clzsi2>
 8000b7c:	239e      	movs	r3, #158	; 0x9e
 8000b7e:	0005      	movs	r5, r0
 8000b80:	1a1b      	subs	r3, r3, r0
 8000b82:	2b96      	cmp	r3, #150	; 0x96
 8000b84:	dc0f      	bgt.n	8000ba6 <__aeabi_i2f+0x3e>
 8000b86:	2808      	cmp	r0, #8
 8000b88:	dd01      	ble.n	8000b8e <__aeabi_i2f+0x26>
 8000b8a:	3d08      	subs	r5, #8
 8000b8c:	40ae      	lsls	r6, r5
 8000b8e:	0276      	lsls	r6, r6, #9
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e002      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	2600      	movs	r6, #0
 8000b9c:	05c0      	lsls	r0, r0, #23
 8000b9e:	4330      	orrs	r0, r6
 8000ba0:	07e4      	lsls	r4, r4, #31
 8000ba2:	4320      	orrs	r0, r4
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba6:	2b99      	cmp	r3, #153	; 0x99
 8000ba8:	dd0c      	ble.n	8000bc4 <__aeabi_i2f+0x5c>
 8000baa:	2205      	movs	r2, #5
 8000bac:	0031      	movs	r1, r6
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	40d1      	lsrs	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	0001      	movs	r1, r0
 8000bb6:	0030      	movs	r0, r6
 8000bb8:	311b      	adds	r1, #27
 8000bba:	4088      	lsls	r0, r1
 8000bbc:	1e41      	subs	r1, r0, #1
 8000bbe:	4188      	sbcs	r0, r1
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	0016      	movs	r6, r2
 8000bc4:	2d05      	cmp	r5, #5
 8000bc6:	dc12      	bgt.n	8000bee <__aeabi_i2f+0x86>
 8000bc8:	0031      	movs	r1, r6
 8000bca:	4f0d      	ldr	r7, [pc, #52]	; (8000c00 <__aeabi_i2f+0x98>)
 8000bcc:	4039      	ands	r1, r7
 8000bce:	0772      	lsls	r2, r6, #29
 8000bd0:	d009      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	4030      	ands	r0, r6
 8000bd6:	2804      	cmp	r0, #4
 8000bd8:	d005      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bda:	3104      	adds	r1, #4
 8000bdc:	014a      	lsls	r2, r1, #5
 8000bde:	d502      	bpl.n	8000be6 <__aeabi_i2f+0x7e>
 8000be0:	239f      	movs	r3, #159	; 0x9f
 8000be2:	4039      	ands	r1, r7
 8000be4:	1b5b      	subs	r3, r3, r5
 8000be6:	0189      	lsls	r1, r1, #6
 8000be8:	0a4e      	lsrs	r6, r1, #9
 8000bea:	b2d8      	uxtb	r0, r3
 8000bec:	e7d6      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bee:	1f6a      	subs	r2, r5, #5
 8000bf0:	4096      	lsls	r6, r2
 8000bf2:	0031      	movs	r1, r6
 8000bf4:	4f02      	ldr	r7, [pc, #8]	; (8000c00 <__aeabi_i2f+0x98>)
 8000bf6:	4039      	ands	r1, r7
 8000bf8:	0772      	lsls	r2, r6, #29
 8000bfa:	d0f4      	beq.n	8000be6 <__aeabi_i2f+0x7e>
 8000bfc:	e7e9      	b.n	8000bd2 <__aeabi_i2f+0x6a>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	fbffffff 	.word	0xfbffffff

08000c04 <__aeabi_ui2f>:
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	1e05      	subs	r5, r0, #0
 8000c08:	d00e      	beq.n	8000c28 <__aeabi_ui2f+0x24>
 8000c0a:	f000 f83d 	bl	8000c88 <__clzsi2>
 8000c0e:	239e      	movs	r3, #158	; 0x9e
 8000c10:	0004      	movs	r4, r0
 8000c12:	1a1b      	subs	r3, r3, r0
 8000c14:	2b96      	cmp	r3, #150	; 0x96
 8000c16:	dc0c      	bgt.n	8000c32 <__aeabi_ui2f+0x2e>
 8000c18:	2808      	cmp	r0, #8
 8000c1a:	dd01      	ble.n	8000c20 <__aeabi_ui2f+0x1c>
 8000c1c:	3c08      	subs	r4, #8
 8000c1e:	40a5      	lsls	r5, r4
 8000c20:	026d      	lsls	r5, r5, #9
 8000c22:	0a6d      	lsrs	r5, r5, #9
 8000c24:	b2d8      	uxtb	r0, r3
 8000c26:	e001      	b.n	8000c2c <__aeabi_ui2f+0x28>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	05c0      	lsls	r0, r0, #23
 8000c2e:	4328      	orrs	r0, r5
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
 8000c32:	2b99      	cmp	r3, #153	; 0x99
 8000c34:	dd09      	ble.n	8000c4a <__aeabi_ui2f+0x46>
 8000c36:	0002      	movs	r2, r0
 8000c38:	0029      	movs	r1, r5
 8000c3a:	321b      	adds	r2, #27
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	1e4a      	subs	r2, r1, #1
 8000c40:	4191      	sbcs	r1, r2
 8000c42:	2205      	movs	r2, #5
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	40d5      	lsrs	r5, r2
 8000c48:	430d      	orrs	r5, r1
 8000c4a:	2c05      	cmp	r4, #5
 8000c4c:	dc12      	bgt.n	8000c74 <__aeabi_ui2f+0x70>
 8000c4e:	0029      	movs	r1, r5
 8000c50:	4e0c      	ldr	r6, [pc, #48]	; (8000c84 <__aeabi_ui2f+0x80>)
 8000c52:	4031      	ands	r1, r6
 8000c54:	076a      	lsls	r2, r5, #29
 8000c56:	d009      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c58:	200f      	movs	r0, #15
 8000c5a:	4028      	ands	r0, r5
 8000c5c:	2804      	cmp	r0, #4
 8000c5e:	d005      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c60:	3104      	adds	r1, #4
 8000c62:	014a      	lsls	r2, r1, #5
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_ui2f+0x68>
 8000c66:	239f      	movs	r3, #159	; 0x9f
 8000c68:	4031      	ands	r1, r6
 8000c6a:	1b1b      	subs	r3, r3, r4
 8000c6c:	0189      	lsls	r1, r1, #6
 8000c6e:	0a4d      	lsrs	r5, r1, #9
 8000c70:	b2d8      	uxtb	r0, r3
 8000c72:	e7db      	b.n	8000c2c <__aeabi_ui2f+0x28>
 8000c74:	1f62      	subs	r2, r4, #5
 8000c76:	4095      	lsls	r5, r2
 8000c78:	0029      	movs	r1, r5
 8000c7a:	4e02      	ldr	r6, [pc, #8]	; (8000c84 <__aeabi_ui2f+0x80>)
 8000c7c:	4031      	ands	r1, r6
 8000c7e:	076a      	lsls	r2, r5, #29
 8000c80:	d0f4      	beq.n	8000c6c <__aeabi_ui2f+0x68>
 8000c82:	e7e9      	b.n	8000c58 <__aeabi_ui2f+0x54>
 8000c84:	fbffffff 	.word	0xfbffffff

08000c88 <__clzsi2>:
 8000c88:	211c      	movs	r1, #28
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d301      	bcc.n	8000c96 <__clzsi2+0xe>
 8000c92:	0c00      	lsrs	r0, r0, #16
 8000c94:	3910      	subs	r1, #16
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	d301      	bcc.n	8000ca0 <__clzsi2+0x18>
 8000c9c:	0a00      	lsrs	r0, r0, #8
 8000c9e:	3908      	subs	r1, #8
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d301      	bcc.n	8000caa <__clzsi2+0x22>
 8000ca6:	0900      	lsrs	r0, r0, #4
 8000ca8:	3904      	subs	r1, #4
 8000caa:	a202      	add	r2, pc, #8	; (adr r2, 8000cb4 <__clzsi2+0x2c>)
 8000cac:	5c10      	ldrb	r0, [r2, r0]
 8000cae:	1840      	adds	r0, r0, r1
 8000cb0:	4770      	bx	lr
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	02020304 	.word	0x02020304
 8000cb8:	01010101 	.word	0x01010101
	...

08000cc4 <bytestowrite>:
  * @param  size: Size of the data.
  * @param  offset: Start byte offset in the page.
  * @retval Number of bytes remaining to write.
  */
static uint16_t bytestowrite(uint16_t size, uint16_t offset)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	1c0a      	adds	r2, r1, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
  if ((size + offset) < PAGE_SIZE) return size;
 8000cd6:	1dbb      	adds	r3, r7, #6
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	18d3      	adds	r3, r2, r3
 8000ce0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce2:	dc02      	bgt.n	8000cea <bytestowrite+0x26>
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	e004      	b.n	8000cf4 <bytestowrite+0x30>
  else return PAGE_SIZE - offset;
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29b      	uxth	r3, r3
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <EEPROM_Write>:
  float float_variable = thing.a;
  return float_variable;
}

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfe:	b08f      	sub	sp, #60	; 0x3c
 8000d00:	af04      	add	r7, sp, #16
 8000d02:	0004      	movs	r4, r0
 8000d04:	0008      	movs	r0, r1
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	0019      	movs	r1, r3
 8000d0a:	250e      	movs	r5, #14
 8000d0c:	197b      	adds	r3, r7, r5
 8000d0e:	1c22      	adds	r2, r4, #0
 8000d10:	801a      	strh	r2, [r3, #0]
 8000d12:	240c      	movs	r4, #12
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	1c02      	adds	r2, r0, #0
 8000d18:	801a      	strh	r2, [r3, #0]
 8000d1a:	1dbb      	adds	r3, r7, #6
 8000d1c:	1c0a      	adds	r2, r1, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
  // Find out the number of bit, where the page addressing starts
  int paddrposition = log(PAGE_SIZE) / log(2);
 8000d20:	2306      	movs	r3, #6
 8000d22:	61fb      	str	r3, [r7, #28]

  // Calculate the start page and the end page
  uint16_t startPage = page;
 8000d24:	2326      	movs	r3, #38	; 0x26
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	197a      	adds	r2, r7, r5
 8000d2a:	8812      	ldrh	r2, [r2, #0]
 8000d2c:	801a      	strh	r2, [r3, #0]
  uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da00      	bge.n	8000d3e <EEPROM_Write+0x42>
 8000d3c:	333f      	adds	r3, #63	; 0x3f
 8000d3e:	119b      	asrs	r3, r3, #6
 8000d40:	b299      	uxth	r1, r3
 8000d42:	201a      	movs	r0, #26
 8000d44:	183b      	adds	r3, r7, r0
 8000d46:	220e      	movs	r2, #14
 8000d48:	18ba      	adds	r2, r7, r2
 8000d4a:	8812      	ldrh	r2, [r2, #0]
 8000d4c:	188a      	adds	r2, r1, r2
 8000d4e:	801a      	strh	r2, [r3, #0]

  // Number of pages to be written
  uint16_t numofpages = (endPage - startPage) + 1;
 8000d50:	183a      	adds	r2, r7, r0
 8000d52:	2326      	movs	r3, #38	; 0x26
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	8812      	ldrh	r2, [r2, #0]
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	2318      	movs	r3, #24
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	3201      	adds	r2, #1
 8000d64:	801a      	strh	r2, [r3, #0]
  uint16_t pos = 0;
 8000d66:	2324      	movs	r3, #36	; 0x24
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]

  // Write the data
  for (int i = 0; i < numofpages; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
 8000d72:	e04d      	b.n	8000e10 <EEPROM_Write+0x114>
  {
        // Calculate the address of the memory location
    // Here we add the page address with the byte address
    uint16_t MemAddress = startPage << paddrposition | offset;
 8000d74:	2626      	movs	r6, #38	; 0x26
 8000d76:	19bb      	adds	r3, r7, r6
 8000d78:	881a      	ldrh	r2, [r3, #0]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	210c      	movs	r1, #12
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2000      	movs	r0, #0
 8000d88:	5e1b      	ldrsh	r3, [r3, r0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	2316      	movs	r3, #22
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	801a      	strh	r2, [r3, #0]
    uint16_t bytesremaining = bytestowrite(size, offset);  // Calculate the remaining bytes to be written
 8000d94:	2514      	movs	r5, #20
 8000d96:	197c      	adds	r4, r7, r5
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	881a      	ldrh	r2, [r3, #0]
 8000d9c:	1dbb      	adds	r3, r7, #6
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff ff8e 	bl	8000cc4 <bytestowrite>
 8000da8:	0003      	movs	r3, r0
 8000daa:	8023      	strh	r3, [r4, #0]

    HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // Write the data to the EEPROM
 8000dac:	2424      	movs	r4, #36	; 0x24
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	2216      	movs	r2, #22
 8000db8:	18ba      	adds	r2, r7, r2
 8000dba:	8811      	ldrh	r1, [r2, #0]
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <EEPROM_Write+0x12c>)
 8000dbe:	22fa      	movs	r2, #250	; 0xfa
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	9202      	str	r2, [sp, #8]
 8000dc4:	197a      	adds	r2, r7, r5
 8000dc6:	8812      	ldrh	r2, [r2, #0]
 8000dc8:	9201      	str	r2, [sp, #4]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2302      	movs	r3, #2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	21a0      	movs	r1, #160	; 0xa0
 8000dd2:	f002 f8a9 	bl	8002f28 <HAL_I2C_Mem_Write>

    startPage += 1;  // Increment the page, so that a new page address can be selected for further write
 8000dd6:	19bb      	adds	r3, r7, r6
 8000dd8:	19ba      	adds	r2, r7, r6
 8000dda:	8812      	ldrh	r2, [r2, #0]
 8000ddc:	3201      	adds	r2, #1
 8000dde:	801a      	strh	r2, [r3, #0]
    offset = 0;   // Since we will be writing to a new page, so offset will be 0
 8000de0:	210c      	movs	r1, #12
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	801a      	strh	r2, [r3, #0]
    size = size - bytesremaining;  // Reduce the size of the bytes
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	1db9      	adds	r1, r7, #6
 8000dec:	197a      	adds	r2, r7, r5
 8000dee:	8809      	ldrh	r1, [r1, #0]
 8000df0:	8812      	ldrh	r2, [r2, #0]
 8000df2:	1a8a      	subs	r2, r1, r2
 8000df4:	801a      	strh	r2, [r3, #0]
    pos += bytesremaining;  // Update the position for the data buffer
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	1939      	adds	r1, r7, r4
 8000dfa:	197a      	adds	r2, r7, r5
 8000dfc:	8809      	ldrh	r1, [r1, #0]
 8000dfe:	8812      	ldrh	r2, [r2, #0]
 8000e00:	188a      	adds	r2, r1, r2
 8000e02:	801a      	strh	r2, [r3, #0]

    HAL_Delay(5);  // Write cycle delay (5ms)
 8000e04:	2005      	movs	r0, #5
 8000e06:	f001 f8a3 	bl	8001f50 <HAL_Delay>
  for (int i = 0; i < numofpages; i++)
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	2318      	movs	r3, #24
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbab      	blt.n	8000d74 <EEPROM_Write+0x78>
  }
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00b      	add	sp, #44	; 0x2c
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	200000dc 	.word	0x200000dc

08000e2c <EEPROM_Read>:
  * @param  data: Pointer to the data to write in bytes.
  * @param  size: Size of the data.
  * @retval None.
  */
void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b08f      	sub	sp, #60	; 0x3c
 8000e30:	af04      	add	r7, sp, #16
 8000e32:	0004      	movs	r4, r0
 8000e34:	0008      	movs	r0, r1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	0019      	movs	r1, r3
 8000e3a:	250e      	movs	r5, #14
 8000e3c:	197b      	adds	r3, r7, r5
 8000e3e:	1c22      	adds	r2, r4, #0
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	240c      	movs	r4, #12
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	1dbb      	adds	r3, r7, #6
 8000e4c:	1c0a      	adds	r2, r1, #0
 8000e4e:	801a      	strh	r2, [r3, #0]
  int paddrposition = log(PAGE_SIZE) / log(2);
 8000e50:	2306      	movs	r3, #6
 8000e52:	61fb      	str	r3, [r7, #28]

  uint16_t startPage = page;
 8000e54:	2326      	movs	r3, #38	; 0x26
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	197a      	adds	r2, r7, r5
 8000e5a:	8812      	ldrh	r2, [r2, #0]
 8000e5c:	801a      	strh	r2, [r3, #0]
  uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000e5e:	1dbb      	adds	r3, r7, #6
 8000e60:	881a      	ldrh	r2, [r3, #0]
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	18d3      	adds	r3, r2, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da00      	bge.n	8000e6e <EEPROM_Read+0x42>
 8000e6c:	333f      	adds	r3, #63	; 0x3f
 8000e6e:	119b      	asrs	r3, r3, #6
 8000e70:	b299      	uxth	r1, r3
 8000e72:	201a      	movs	r0, #26
 8000e74:	183b      	adds	r3, r7, r0
 8000e76:	220e      	movs	r2, #14
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	8812      	ldrh	r2, [r2, #0]
 8000e7c:	188a      	adds	r2, r1, r2
 8000e7e:	801a      	strh	r2, [r3, #0]

  uint16_t numofpages = (endPage - startPage) + 1;
 8000e80:	183a      	adds	r2, r7, r0
 8000e82:	2326      	movs	r3, #38	; 0x26
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	8812      	ldrh	r2, [r2, #0]
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	2318      	movs	r3, #24
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	3201      	adds	r2, #1
 8000e94:	801a      	strh	r2, [r3, #0]
  uint16_t pos = 0;
 8000e96:	2324      	movs	r3, #36	; 0x24
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	801a      	strh	r2, [r3, #0]

  for (int i = 0; i < numofpages; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
 8000ea2:	e04a      	b.n	8000f3a <EEPROM_Read+0x10e>
  {
    uint16_t MemAddress = startPage << paddrposition | offset;
 8000ea4:	2626      	movs	r6, #38	; 0x26
 8000ea6:	19bb      	adds	r3, r7, r6
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	210c      	movs	r1, #12
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	5e1b      	ldrsh	r3, [r3, r0]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	2316      	movs	r3, #22
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	801a      	strh	r2, [r3, #0]
    uint16_t bytesremaining = bytestowrite(size, offset);
 8000ec4:	2514      	movs	r5, #20
 8000ec6:	197c      	adds	r4, r7, r5
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	881a      	ldrh	r2, [r3, #0]
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fef6 	bl	8000cc4 <bytestowrite>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	8023      	strh	r3, [r4, #0]
    HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000edc:	2424      	movs	r4, #36	; 0x24
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	18d3      	adds	r3, r2, r3
 8000ee6:	2216      	movs	r2, #22
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	8811      	ldrh	r1, [r2, #0]
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <EEPROM_Read+0x124>)
 8000eee:	22fa      	movs	r2, #250	; 0xfa
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	9202      	str	r2, [sp, #8]
 8000ef4:	197a      	adds	r2, r7, r5
 8000ef6:	8812      	ldrh	r2, [r2, #0]
 8000ef8:	9201      	str	r2, [sp, #4]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2302      	movs	r3, #2
 8000efe:	000a      	movs	r2, r1
 8000f00:	21a0      	movs	r1, #160	; 0xa0
 8000f02:	f002 f93f 	bl	8003184 <HAL_I2C_Mem_Read>
    startPage += 1;
 8000f06:	19bb      	adds	r3, r7, r6
 8000f08:	19ba      	adds	r2, r7, r6
 8000f0a:	8812      	ldrh	r2, [r2, #0]
 8000f0c:	3201      	adds	r2, #1
 8000f0e:	801a      	strh	r2, [r3, #0]
    offset = 0;
 8000f10:	210c      	movs	r1, #12
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	801a      	strh	r2, [r3, #0]
    size = size - bytesremaining;
 8000f18:	1dbb      	adds	r3, r7, #6
 8000f1a:	1db9      	adds	r1, r7, #6
 8000f1c:	197a      	adds	r2, r7, r5
 8000f1e:	8809      	ldrh	r1, [r1, #0]
 8000f20:	8812      	ldrh	r2, [r2, #0]
 8000f22:	1a8a      	subs	r2, r1, r2
 8000f24:	801a      	strh	r2, [r3, #0]
    pos += bytesremaining;
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	1939      	adds	r1, r7, r4
 8000f2a:	197a      	adds	r2, r7, r5
 8000f2c:	8809      	ldrh	r1, [r1, #0]
 8000f2e:	8812      	ldrh	r2, [r2, #0]
 8000f30:	188a      	adds	r2, r1, r2
 8000f32:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < numofpages; i++)
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	3301      	adds	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
 8000f3a:	2318      	movs	r3, #24
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	6a3a      	ldr	r2, [r7, #32]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbae      	blt.n	8000ea4 <EEPROM_Read+0x78>
  }
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b00b      	add	sp, #44	; 0x2c
 8000f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f50:	200000dc 	.word	0x200000dc

08000f54 <EEPROM_PageErase>:
  * @param  page: Number of page to erase
  *         In order to erase multiple pages, just use this function in the for loop
  * @retval None
  */
void EEPROM_PageErase(uint16_t page)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b098      	sub	sp, #96	; 0x60
 8000f58:	af04      	add	r7, sp, #16
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	1dbb      	adds	r3, r7, #6
 8000f5e:	801a      	strh	r2, [r3, #0]
  // Calculate the memory address based on the page number
  int paddrposition = log(PAGE_SIZE) / log(2);
 8000f60:	2306      	movs	r3, #6
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint16_t MemAddress = page << paddrposition;
 8000f64:	1dbb      	adds	r3, r7, #6
 8000f66:	881a      	ldrh	r2, [r3, #0]
 8000f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	244a      	movs	r4, #74	; 0x4a
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	801a      	strh	r2, [r3, #0]

  // Create a buffer to store the reset values
  uint8_t data[PAGE_SIZE];
  memset(data, 0xff, PAGE_SIZE);
 8000f72:	2508      	movs	r5, #8
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	2240      	movs	r2, #64	; 0x40
 8000f78:	21ff      	movs	r1, #255	; 0xff
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f004 fec6 	bl	8005d0c <memset>

  // Write the data to the EEPROM
  HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	881a      	ldrh	r2, [r3, #0]
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <EEPROM_PageErase+0x58>)
 8000f86:	23fa      	movs	r3, #250	; 0xfa
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2340      	movs	r3, #64	; 0x40
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	197b      	adds	r3, r7, r5
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2302      	movs	r3, #2
 8000f96:	21a0      	movs	r1, #160	; 0xa0
 8000f98:	f001 ffc6 	bl	8002f28 <HAL_I2C_Mem_Write>

  HAL_Delay(5);  // Write cycle delay (5ms)
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f000 ffd7 	bl	8001f50 <HAL_Delay>
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b014      	add	sp, #80	; 0x50
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	200000dc 	.word	0x200000dc

08000fb0 <LDR_Init>:
static float c;

/**
 * @brief Initialize the LDR with calibration constants
 */
void LDR_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    m = 2.675f;
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <LDR_Init+0x18>)
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <LDR_Init+0x1c>)
 8000fb8:	601a      	str	r2, [r3, #0]
    c = -66.88f;
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <LDR_Init+0x20>)
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <LDR_Init+0x24>)
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	20000094 	.word	0x20000094
 8000fcc:	402b3333 	.word	0x402b3333
 8000fd0:	20000098 	.word	0x20000098
 8000fd4:	c285c28f 	.word	0xc285c28f

08000fd8 <LDR_ReadADC>:
/**
 * @brief Read ADC value from the LDR
 * @param hadc Pointer to an ADC_HandleTypeDef structure that contains the configuration information for the specified ADC
 * @return 32-bit unsigned integer ADC value
 */
uint32_t LDR_ReadADC(ADC_HandleTypeDef *hadc) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    uint32_t adc_value;

    // Start ADC conversion
    HAL_ADC_Start(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 f918 	bl	8002218 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	210a      	movs	r1, #10
 8000fec:	0018      	movs	r0, r3
 8000fee:	f001 f9a7 	bl	8002340 <HAL_ADC_PollForConversion>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d105      	bne.n	8001002 <LDR_ReadADC+0x2a>
        // Read ADC value
        adc_value = HAL_ADC_GetValue(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fa39 	bl	8002470 <HAL_ADC_GetValue>
 8000ffe:	0003      	movs	r3, r0
 8001000:	60fb      	str	r3, [r7, #12]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	0018      	movs	r0, r3
 8001006:	f001 f95b 	bl	80022c0 <HAL_ADC_Stop>

    return adc_value;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}

08001014 <LDR_ReadAnalogLightIntensity>:
/**
 * @brief Read analog light intensity using the LDR
 * @param hadc Pointer to an ADC_HandleTypeDef structure that contains the configuration information for the specified ADC
 * @return Floating-point light intensity value
 */
float LDR_ReadAnalogLightIntensity(ADC_HandleTypeDef *hadc) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    uint32_t adc_value = LDR_ReadADC(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff ffda 	bl	8000fd8 <LDR_ReadADC>
 8001024:	0003      	movs	r3, r0
 8001026:	60fb      	str	r3, [r7, #12]
    return m * adc_value + c;
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff fdeb 	bl	8000c04 <__aeabi_ui2f>
 800102e:	1c02      	adds	r2, r0, #0
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <LDR_ReadAnalogLightIntensity+0x44>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1c19      	adds	r1, r3, #0
 8001036:	1c10      	adds	r0, r2, #0
 8001038:	f7ff faa2 	bl	8000580 <__aeabi_fmul>
 800103c:	1c03      	adds	r3, r0, #0
 800103e:	1c1a      	adds	r2, r3, #0
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <LDR_ReadAnalogLightIntensity+0x48>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1c19      	adds	r1, r3, #0
 8001046:	1c10      	adds	r0, r2, #0
 8001048:	f7ff f8fc 	bl	8000244 <__aeabi_fadd>
 800104c:	1c03      	adds	r3, r0, #0
}
 800104e:	1c18      	adds	r0, r3, #0
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000094 	.word	0x20000094
 800105c:	20000098 	.word	0x20000098

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 ff10 	bl	8001e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f85a 	bl	8001120 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fa50 	bl	8001510 <MX_GPIO_Init>
  MX_ADC_Init();
 8001070:	f000 f8ca 	bl	8001208 <MX_ADC_Init>
  MX_I2C1_Init();
 8001074:	f000 f924 	bl	80012c0 <MX_I2C1_Init>
  MX_RTC_Init();
 8001078:	f000 f962 	bl	8001340 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800107c:	f000 fa18 	bl	80014b0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001080:	f000 f9c0 	bl	8001404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Set calibration constants for the LDR
  LDR_Init();
 8001084:	f7ff ff94 	bl	8000fb0 <LDR_Init>

  //Set Time and Date
    status = RTC_SetTime(&hrtc, hours, minutes, seconds);
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <main+0x8c>)
 800108a:	7819      	ldrb	r1, [r3, #0]
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <main+0x90>)
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <main+0x94>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4818      	ldr	r0, [pc, #96]	; (80010f8 <main+0x98>)
 8001096:	f000 fbfa 	bl	800188e <RTC_SetTime>
 800109a:	0003      	movs	r3, r0
 800109c:	001a      	movs	r2, r3
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <main+0x9c>)
 80010a0:	701a      	strb	r2, [r3, #0]

    if (status != HAL_OK) {
        // Handle error will be implemented later
    }

    RTC_SetDate(&hrtc, day, month, year);
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <main+0xa0>)
 80010a4:	7819      	ldrb	r1, [r3, #0]
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <main+0xa4>)
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <main+0xa8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <main+0x98>)
 80010b0:	f000 fc53 	bl	800195a <RTC_SetDate>

    //Initiliaze temperature sensor
    if (TMP102_Init(&hi2c1) != HAL_OK) {
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <main+0xac>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fe50 	bl	8001d5c <TMP102_Init>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d007      	beq.n	80010d0 <main+0x70>
          // Handle error (e.g., turn on an LED or print a message)
    	  strcpy((char*)temp_string,"Error Tx\r\n");
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <main+0xb0>)
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <main+0xb4>)
 80010c4:	ca03      	ldmia	r2!, {r0, r1}
 80010c6:	c303      	stmia	r3!, {r0, r1}
 80010c8:	8811      	ldrh	r1, [r2, #0]
 80010ca:	8019      	strh	r1, [r3, #0]
 80010cc:	7892      	ldrb	r2, [r2, #2]
 80010ce:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Back -up for demo in case interrupts dont work
	  //Remember to implement function to update the usb_plugged flag
	  if(usb_plugged){
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <main+0xb8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <main+0x7e>
		  read_and_transmit_all_data();
 80010d8:	f000 fb7a 	bl	80017d0 <read_and_transmit_all_data>
 80010dc:	e001      	b.n	80010e2 <main+0x82>
	  }
	  else{
		  read_and_store_data();
 80010de:	f000 fa95 	bl	800160c <read_and_store_data>
	  }

	  HAL_Delay(10000);
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <main+0xbc>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f000 ff33 	bl	8001f50 <HAL_Delay>
	  if(usb_plugged){
 80010ea:	e7f1      	b.n	80010d0 <main+0x70>
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000001 	.word	0x20000001
 80010f4:	20000220 	.word	0x20000220
 80010f8:	20000130 	.word	0x20000130
 80010fc:	2000025a 	.word	0x2000025a
 8001100:	20000002 	.word	0x20000002
 8001104:	20000003 	.word	0x20000003
 8001108:	20000004 	.word	0x20000004
 800110c:	200000dc 	.word	0x200000dc
 8001110:	20000244 	.word	0x20000244
 8001114:	08006608 	.word	0x08006608
 8001118:	2000025f 	.word	0x2000025f
 800111c:	00002710 	.word	0x00002710

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b097      	sub	sp, #92	; 0x5c
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	2428      	movs	r4, #40	; 0x28
 8001128:	193b      	adds	r3, r7, r4
 800112a:	0018      	movs	r0, r3
 800112c:	2330      	movs	r3, #48	; 0x30
 800112e:	001a      	movs	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	f004 fdeb 	bl	8005d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001136:	2318      	movs	r3, #24
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	0018      	movs	r0, r3
 800113c:	2310      	movs	r3, #16
 800113e:	001a      	movs	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	f004 fde3 	bl	8005d0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	0018      	movs	r0, r3
 800114a:	2314      	movs	r3, #20
 800114c:	001a      	movs	r2, r3
 800114e:	2100      	movs	r1, #0
 8001150:	f004 fddc 	bl	8005d0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001154:	0021      	movs	r1, r4
 8001156:	187b      	adds	r3, r7, r1
 8001158:	221a      	movs	r2, #26
 800115a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2201      	movs	r2, #1
 8001160:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001162:	187b      	adds	r3, r7, r1
 8001164:	2201      	movs	r2, #1
 8001166:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001168:	187b      	adds	r3, r7, r1
 800116a:	2210      	movs	r2, #16
 800116c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2210      	movs	r2, #16
 8001172:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2201      	movs	r2, #1
 8001178:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2202      	movs	r2, #2
 800117e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	22a0      	movs	r2, #160	; 0xa0
 800118a:	0392      	lsls	r2, r2, #14
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2200      	movs	r2, #0
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	187b      	adds	r3, r7, r1
 8001196:	0018      	movs	r0, r3
 8001198:	f002 fcba 	bl	8003b10 <HAL_RCC_OscConfig>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011a0:	f000 fb70 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	2118      	movs	r1, #24
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2202      	movs	r2, #2
 80011b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2101      	movs	r1, #1
 80011c2:	0018      	movs	r0, r3
 80011c4:	f002 ffbe 	bl	8004144 <HAL_RCC_ClockConfig>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011cc:	f000 fb5a 	bl	8001884 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <SystemClock_Config+0xe4>)
 80011d4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	0018      	movs	r0, r3
 80011ee:	f003 f8ed 	bl	80043cc <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80011f6:	f000 fb45 	bl	8001884 <Error_Handler>
  }
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b017      	add	sp, #92	; 0x5c
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	00010021 	.word	0x00010021

08001208 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	0018      	movs	r0, r3
 8001212:	230c      	movs	r3, #12
 8001214:	001a      	movs	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	f004 fd78 	bl	8005d0c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_ADC_Init+0xb0>)
 800121e:	4a27      	ldr	r2, [pc, #156]	; (80012bc <MX_ADC_Init+0xb4>)
 8001220:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_ADC_Init+0xb0>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001236:	2201      	movs	r2, #1
 8001238:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_ADC_Init+0xb0>)
 800123c:	2204      	movs	r2, #4
 800123e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001242:	2200      	movs	r2, #0
 8001244:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001248:	2200      	movs	r2, #0
 800124a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_ADC_Init+0xb0>)
 800124e:	2201      	movs	r2, #1
 8001250:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001254:	2200      	movs	r2, #0
 8001256:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_ADC_Init+0xb0>)
 800125a:	22c2      	movs	r2, #194	; 0xc2
 800125c:	32ff      	adds	r2, #255	; 0xff
 800125e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001268:	2224      	movs	r2, #36	; 0x24
 800126a:	2100      	movs	r1, #0
 800126c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001270:	2201      	movs	r2, #1
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_ADC_Init+0xb0>)
 8001276:	0018      	movs	r0, r3
 8001278:	f000 fe8e 	bl	8001f98 <HAL_ADC_Init>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001280:	f000 fb00 	bl	8001884 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2205      	movs	r2, #5
 8001288:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	0152      	lsls	r2, r2, #5
 8001290:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	0552      	lsls	r2, r2, #21
 8001298:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800129a:	1d3a      	adds	r2, r7, #4
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_ADC_Init+0xb0>)
 800129e:	0011      	movs	r1, r2
 80012a0:	0018      	movs	r0, r3
 80012a2:	f001 f8f1 	bl	8002488 <HAL_ADC_ConfigChannel>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80012aa:	f000 faeb 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	2000009c 	.word	0x2000009c
 80012bc:	40012400 	.word	0x40012400

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_I2C1_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <MX_I2C1_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_I2C1_Init+0x74>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <MX_I2C1_Init+0x7c>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_I2C1_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_I2C1_Init+0x74>)
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 fd7d 	bl	8002dfc <HAL_I2C_Init>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d001      	beq.n	800130a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001306:	f000 fabd 	bl	8001884 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_I2C1_Init+0x74>)
 800130c:	2100      	movs	r1, #0
 800130e:	0018      	movs	r0, r3
 8001310:	f002 fb66 	bl	80039e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001314:	1e03      	subs	r3, r0, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001318:	f000 fab4 	bl	8001884 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <MX_I2C1_Init+0x74>)
 800131e:	2100      	movs	r1, #0
 8001320:	0018      	movs	r0, r3
 8001322:	f002 fba9 	bl	8003a78 <HAL_I2CEx_ConfigDigitalFilter>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d001      	beq.n	800132e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 faab 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000dc 	.word	0x200000dc
 8001338:	40005400 	.word	0x40005400
 800133c:	2000090e 	.word	0x2000090e

08001340 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	0018      	movs	r0, r3
 800134a:	2314      	movs	r3, #20
 800134c:	001a      	movs	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	f004 fcdc 	bl	8005d0c <memset>
  RTC_DateTypeDef sDate = {0};
 8001354:	003b      	movs	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <MX_RTC_Init+0xbc>)
 800135c:	4a28      	ldr	r2, [pc, #160]	; (8001400 <MX_RTC_Init+0xc0>)
 800135e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_RTC_Init+0xbc>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <MX_RTC_Init+0xbc>)
 8001368:	227f      	movs	r2, #127	; 0x7f
 800136a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_RTC_Init+0xbc>)
 800136e:	22ff      	movs	r2, #255	; 0xff
 8001370:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_RTC_Init+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_RTC_Init+0xbc>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_RTC_Init+0xbc>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_RTC_Init+0xbc>)
 8001386:	0018      	movs	r0, r3
 8001388:	f003 f8fe 	bl	8004588 <HAL_RTC_Init>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001390:	f000 fa78 	bl	8001884 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013b2:	1d39      	adds	r1, r7, #4
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_RTC_Init+0xbc>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	0018      	movs	r0, r3
 80013ba:	f003 f97d 	bl	80046b8 <HAL_RTC_SetTime>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80013c2:	f000 fa5f 	bl	8001884 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013c6:	003b      	movs	r3, r7
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80013cc:	003b      	movs	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80013d2:	003b      	movs	r3, r7
 80013d4:	2201      	movs	r2, #1
 80013d6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80013d8:	003b      	movs	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013de:	0039      	movs	r1, r7
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_RTC_Init+0xbc>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	0018      	movs	r0, r3
 80013e6:	f003 fa6b 	bl	80048c0 <HAL_RTC_SetDate>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80013ee:	f000 fa49 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b006      	add	sp, #24
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	20000130 	.word	0x20000130
 8001400:	40002800 	.word	0x40002800

08001404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	2308      	movs	r3, #8
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	0018      	movs	r0, r3
 8001410:	2310      	movs	r3, #16
 8001412:	001a      	movs	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	f004 fc79 	bl	8005d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141a:	003b      	movs	r3, r7
 800141c:	0018      	movs	r0, r3
 800141e:	2308      	movs	r3, #8
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f004 fc72 	bl	8005d0c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM2_Init+0xa0>)
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	05d2      	lsls	r2, r2, #23
 800142e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_TIM2_Init+0xa0>)
 8001432:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <MX_TIM2_Init+0xa4>)
 8001434:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM2_Init+0xa0>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 144000;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_TIM2_Init+0xa0>)
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <MX_TIM2_Init+0xa8>)
 8001440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM2_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_TIM2_Init+0xa0>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM2_Init+0xa0>)
 8001450:	0018      	movs	r0, r3
 8001452:	f003 fbe9 	bl	8004c28 <HAL_TIM_Base_Init>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800145a:	f000 fa13 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145e:	2108      	movs	r1, #8
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	0152      	lsls	r2, r2, #5
 8001466:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001468:	187a      	adds	r2, r7, r1
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_TIM2_Init+0xa0>)
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f003 fd40 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001478:	f000 fa04 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	003b      	movs	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	003b      	movs	r3, r7
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001488:	003a      	movs	r2, r7
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_TIM2_Init+0xa0>)
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f003 ff46 	bl	8005320 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001498:	f000 f9f4 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b006      	add	sp, #24
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000150 	.word	0x20000150
 80014a8:	00002710 	.word	0x00002710
 80014ac:	00023280 	.word	0x00023280

080014b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <MX_USART1_UART_Init+0x5c>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014bc:	2296      	movs	r2, #150	; 0x96
 80014be:	0212      	lsls	r2, r2, #8
 80014c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f003 ff81 	bl	80053fc <HAL_UART_Init>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014fe:	f000 f9c1 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000198 	.word	0x20000198
 800150c:	40013800 	.word	0x40013800

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b08b      	sub	sp, #44	; 0x2c
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	2414      	movs	r4, #20
 8001518:	193b      	adds	r3, r7, r4
 800151a:	0018      	movs	r0, r3
 800151c:	2314      	movs	r3, #20
 800151e:	001a      	movs	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f004 fbf3 	bl	8005d0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b37      	ldr	r3, [pc, #220]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <MX_GPIO_Init+0xf4>)
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	0309      	lsls	r1, r1, #12
 8001530:	430a      	orrs	r2, r1
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	4b33      	ldr	r3, [pc, #204]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	031b      	lsls	r3, r3, #12
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	03c9      	lsls	r1, r1, #15
 800154c:	430a      	orrs	r2, r1
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	03db      	lsls	r3, r3, #15
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b29      	ldr	r3, [pc, #164]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0289      	lsls	r1, r1, #10
 8001568:	430a      	orrs	r2, r1
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <MX_GPIO_Init+0xf4>)
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	029b      	lsls	r3, r3, #10
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_GPIO_Init+0xf4>)
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	02c9      	lsls	r1, r1, #11
 8001584:	430a      	orrs	r2, r1
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_GPIO_Init+0xf4>)
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	02db      	lsls	r3, r3, #11
 8001590:	4013      	ands	r3, r2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001596:	193b      	adds	r3, r7, r4
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159c:	193b      	adds	r3, r7, r4
 800159e:	2288      	movs	r2, #136	; 0x88
 80015a0:	0352      	lsls	r2, r2, #13
 80015a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a4:	193b      	adds	r3, r7, r4
 80015a6:	2201      	movs	r2, #1
 80015a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	193a      	adds	r2, r7, r4
 80015ac:	2390      	movs	r3, #144	; 0x90
 80015ae:	05db      	lsls	r3, r3, #23
 80015b0:	0011      	movs	r1, r2
 80015b2:	0018      	movs	r0, r3
 80015b4:	f001 fa96 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015b8:	0021      	movs	r1, r4
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	00d2      	lsls	r2, r2, #3
 80015c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2288      	movs	r2, #136	; 0x88
 80015c6:	0352      	lsls	r2, r2, #13
 80015c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2201      	movs	r2, #1
 80015ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <MX_GPIO_Init+0xf8>)
 80015d4:	0019      	movs	r1, r3
 80015d6:	0010      	movs	r0, r2
 80015d8:	f001 fa84 	bl	8002ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2005      	movs	r0, #5
 80015e2:	f001 fa4d 	bl	8002a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80015e6:	2005      	movs	r0, #5
 80015e8:	f001 fa5f 	bl	8002aaa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2007      	movs	r0, #7
 80015f2:	f001 fa45 	bl	8002a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80015f6:	2007      	movs	r0, #7
 80015f8:	f001 fa57 	bl	8002aaa <HAL_NVIC_EnableIRQ>

}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b00b      	add	sp, #44	; 0x2c
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	48000400 	.word	0x48000400

0800160c <read_and_store_data>:


}*/

void read_and_store_data(void)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b097      	sub	sp, #92	; 0x5c
 8001610:	af02      	add	r7, sp, #8
    // If the EEPROM is full, don't perform any write operations
    if(eeprom_full) {
 8001612:	4b58      	ldr	r3, [pc, #352]	; (8001774 <read_and_store_data+0x168>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d000      	beq.n	800161c <read_and_store_data+0x10>
 800161a:	e0a6      	b.n	800176a <read_and_store_data+0x15e>
        return;
    }
	  //Read Light Intensity
	  light_intensity = LDR_ReadAnalogLightIntensity(&hadc);
 800161c:	4b56      	ldr	r3, [pc, #344]	; (8001778 <read_and_store_data+0x16c>)
 800161e:	0018      	movs	r0, r3
 8001620:	f7ff fcf8 	bl	8001014 <LDR_ReadAnalogLightIntensity>
 8001624:	1c02      	adds	r2, r0, #0
 8001626:	4b55      	ldr	r3, [pc, #340]	; (800177c <read_and_store_data+0x170>)
 8001628:	601a      	str	r2, [r3, #0]

	  int light_whole = (int)light_intensity;
 800162a:	4b54      	ldr	r3, [pc, #336]	; (800177c <read_and_store_data+0x170>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	1c18      	adds	r0, r3, #0
 8001630:	f7ff fa7a 	bl	8000b28 <__aeabi_f2iz>
 8001634:	0003      	movs	r3, r0
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int light_frac = (int)(100 * (light_intensity - light_whole));
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <read_and_store_data+0x170>)
 800163a:	681c      	ldr	r4, [r3, #0]
 800163c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800163e:	f7ff fa93 	bl	8000b68 <__aeabi_i2f>
 8001642:	1c03      	adds	r3, r0, #0
 8001644:	1c19      	adds	r1, r3, #0
 8001646:	1c20      	adds	r0, r4, #0
 8001648:	f7ff f8c0 	bl	80007cc <__aeabi_fsub>
 800164c:	1c03      	adds	r3, r0, #0
 800164e:	494c      	ldr	r1, [pc, #304]	; (8001780 <read_and_store_data+0x174>)
 8001650:	1c18      	adds	r0, r3, #0
 8001652:	f7fe ff95 	bl	8000580 <__aeabi_fmul>
 8001656:	1c03      	adds	r3, r0, #0
 8001658:	1c18      	adds	r0, r3, #0
 800165a:	f7ff fa65 	bl	8000b28 <__aeabi_f2iz>
 800165e:	0003      	movs	r3, r0
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
	  sprintf(light_string, "%d.%02d", light_whole, light_frac);
 8001662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001666:	4947      	ldr	r1, [pc, #284]	; (8001784 <read_and_store_data+0x178>)
 8001668:	4847      	ldr	r0, [pc, #284]	; (8001788 <read_and_store_data+0x17c>)
 800166a:	f004 fb57 	bl	8005d1c <siprintf>

	  //Read Temperature
	  temperature = TMP102_ReadTemperature(&hi2c1);
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <read_and_store_data+0x180>)
 8001670:	0018      	movs	r0, r3
 8001672:	f000 fba5 	bl	8001dc0 <TMP102_ReadTemperature>
 8001676:	1c02      	adds	r2, r0, #0
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <read_and_store_data+0x184>)
 800167a:	601a      	str	r2, [r3, #0]
	  int temp_whole = (int)temperature;
 800167c:	4b44      	ldr	r3, [pc, #272]	; (8001790 <read_and_store_data+0x184>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1c18      	adds	r0, r3, #0
 8001682:	f7ff fa51 	bl	8000b28 <__aeabi_f2iz>
 8001686:	0003      	movs	r3, r0
 8001688:	647b      	str	r3, [r7, #68]	; 0x44
	  int temp_frac = (int)(100 * (temperature - temp_whole));
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <read_and_store_data+0x184>)
 800168c:	681c      	ldr	r4, [r3, #0]
 800168e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001690:	f7ff fa6a 	bl	8000b68 <__aeabi_i2f>
 8001694:	1c03      	adds	r3, r0, #0
 8001696:	1c19      	adds	r1, r3, #0
 8001698:	1c20      	adds	r0, r4, #0
 800169a:	f7ff f897 	bl	80007cc <__aeabi_fsub>
 800169e:	1c03      	adds	r3, r0, #0
 80016a0:	4937      	ldr	r1, [pc, #220]	; (8001780 <read_and_store_data+0x174>)
 80016a2:	1c18      	adds	r0, r3, #0
 80016a4:	f7fe ff6c 	bl	8000580 <__aeabi_fmul>
 80016a8:	1c03      	adds	r3, r0, #0
 80016aa:	1c18      	adds	r0, r3, #0
 80016ac:	f7ff fa3c 	bl	8000b28 <__aeabi_f2iz>
 80016b0:	0003      	movs	r3, r0
 80016b2:	643b      	str	r3, [r7, #64]	; 0x40
	  sprintf(temp_string, "%d.%02d", temp_whole, temp_frac);
 80016b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016b8:	4932      	ldr	r1, [pc, #200]	; (8001784 <read_and_store_data+0x178>)
 80016ba:	4836      	ldr	r0, [pc, #216]	; (8001794 <read_and_store_data+0x188>)
 80016bc:	f004 fb2e 	bl	8005d1c <siprintf>

	   //Get the date
	   RTC_GetDate(&hrtc, &dayread, &monthread, &yearread);
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <read_and_store_data+0x18c>)
 80016c2:	4a36      	ldr	r2, [pc, #216]	; (800179c <read_and_store_data+0x190>)
 80016c4:	4936      	ldr	r1, [pc, #216]	; (80017a0 <read_and_store_data+0x194>)
 80016c6:	4837      	ldr	r0, [pc, #220]	; (80017a4 <read_and_store_data+0x198>)
 80016c8:	f000 f971 	bl	80019ae <RTC_GetDate>
	   // Convert the integers to a string
	   sprintf(date_string, "%02d-%02d-%02d", dayread, monthread, yearread);
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <read_and_store_data+0x194>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	001a      	movs	r2, r3
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <read_and_store_data+0x190>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	001c      	movs	r4, r3
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <read_and_store_data+0x18c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4932      	ldr	r1, [pc, #200]	; (80017a8 <read_and_store_data+0x19c>)
 80016de:	4833      	ldr	r0, [pc, #204]	; (80017ac <read_and_store_data+0x1a0>)
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	0023      	movs	r3, r4
 80016e4:	f004 fb1a 	bl	8005d1c <siprintf>

	   //Get the time
	   status = RTC_GetTime(&hrtc, &read_hours, &read_minutes, &read_seconds);
 80016e8:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <read_and_store_data+0x1a4>)
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <read_and_store_data+0x1a8>)
 80016ec:	4932      	ldr	r1, [pc, #200]	; (80017b8 <read_and_store_data+0x1ac>)
 80016ee:	482d      	ldr	r0, [pc, #180]	; (80017a4 <read_and_store_data+0x198>)
 80016f0:	f000 f903 	bl	80018fa <RTC_GetTime>
 80016f4:	0003      	movs	r3, r0
 80016f6:	001a      	movs	r2, r3
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <read_and_store_data+0x1b0>)
 80016fa:	701a      	strb	r2, [r3, #0]
	   if (status != HAL_OK) {
	       // Handle error
	   }

	   // Convert the integers to a string
	   sprintf(time_string, "%02d:%02d:%02d", read_hours, read_minutes, read_seconds);
 80016fc:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <read_and_store_data+0x1ac>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	001a      	movs	r2, r3
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <read_and_store_data+0x1a8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	001c      	movs	r4, r3
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <read_and_store_data+0x1a4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	492c      	ldr	r1, [pc, #176]	; (80017c0 <read_and_store_data+0x1b4>)
 800170e:	482d      	ldr	r0, [pc, #180]	; (80017c4 <read_and_store_data+0x1b8>)
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	0023      	movs	r3, r4
 8001714:	f004 fb02 	bl	8005d1c <siprintf>

	    // Create a complete message string
	    //char message[message_size + 1]; // +1 for the null terminator

	    char message[64];
	    sprintf(message, "Date: %s Time: %s Temp: %s Light: %s\r\n", date_string, time_string, temp_string, light_string);
 8001718:	4c2a      	ldr	r4, [pc, #168]	; (80017c4 <read_and_store_data+0x1b8>)
 800171a:	4a24      	ldr	r2, [pc, #144]	; (80017ac <read_and_store_data+0x1a0>)
 800171c:	492a      	ldr	r1, [pc, #168]	; (80017c8 <read_and_store_data+0x1bc>)
 800171e:	0038      	movs	r0, r7
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <read_and_store_data+0x17c>)
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <read_and_store_data+0x188>)
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	0023      	movs	r3, r4
 800172a:	f004 faf7 	bl	8005d1c <siprintf>

	    // Check if the message can fit into the current page. If not, go to the next page.
	    if(current_page < PAGE_NUM) {
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <read_and_store_data+0x1c0>)
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	429a      	cmp	r2, r3
 8001738:	d213      	bcs.n	8001762 <read_and_store_data+0x156>
	    	// Write the message to the EEPROM
	    	EEPROM_Write(current_page, 0, (uint8_t *)message, strlen(message));
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <read_and_store_data+0x1c0>)
 800173c:	881c      	ldrh	r4, [r3, #0]
 800173e:	003b      	movs	r3, r7
 8001740:	0018      	movs	r0, r3
 8001742:	f7fe fce1 	bl	8000108 <strlen>
 8001746:	0003      	movs	r3, r0
 8001748:	b29b      	uxth	r3, r3
 800174a:	003a      	movs	r2, r7
 800174c:	2100      	movs	r1, #0
 800174e:	0020      	movs	r0, r4
 8001750:	f7ff fad4 	bl	8000cfc <EEPROM_Write>
	    	current_page++;
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <read_and_store_data+0x1c0>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <read_and_store_data+0x1c0>)
 800175e:	801a      	strh	r2, [r3, #0]
 8001760:	e004      	b.n	800176c <read_and_store_data+0x160>

	    }

	    else{
	    	eeprom_full = true;
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <read_and_store_data+0x168>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e000      	b.n	800176c <read_and_store_data+0x160>
        return;
 800176a:	46c0      	nop			; (mov r8, r8)
	    } else {
	        // EEPROM is full, set the flag to prevent further writing
	        eeprom_full = true;
	    }
	     */
}
 800176c:	46bd      	mov	sp, r7
 800176e:	b015      	add	sp, #84	; 0x54
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	2000025e 	.word	0x2000025e
 8001778:	2000009c 	.word	0x2000009c
 800177c:	2000023c 	.word	0x2000023c
 8001780:	42c80000 	.word	0x42c80000
 8001784:	08006614 	.word	0x08006614
 8001788:	20000250 	.word	0x20000250
 800178c:	200000dc 	.word	0x200000dc
 8001790:	20000240 	.word	0x20000240
 8001794:	20000244 	.word	0x20000244
 8001798:	2000022f 	.word	0x2000022f
 800179c:	2000022e 	.word	0x2000022e
 80017a0:	2000022d 	.word	0x2000022d
 80017a4:	20000130 	.word	0x20000130
 80017a8:	0800661c 	.word	0x0800661c
 80017ac:	20000230 	.word	0x20000230
 80017b0:	20000223 	.word	0x20000223
 80017b4:	20000222 	.word	0x20000222
 80017b8:	20000221 	.word	0x20000221
 80017bc:	2000025a 	.word	0x2000025a
 80017c0:	0800662c 	.word	0x0800662c
 80017c4:	20000224 	.word	0x20000224
 80017c8:	0800663c 	.word	0x0800663c
 80017cc:	2000025c 	.word	0x2000025c

080017d0 <read_and_transmit_all_data>:

} */


void read_and_transmit_all_data(void)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b095      	sub	sp, #84	; 0x54
 80017d4:	af00      	add	r7, sp, #0

    // Buffer to hold the data read from the EEPROM
    uint8_t data[PAGE_SIZE + 1];  // +1 for the null terminator

    // Loop through all pages
    for(uint16_t page = 0; page < PAGE_NUM; page++) {
 80017d6:	234e      	movs	r3, #78	; 0x4e
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	e01a      	b.n	8001816 <read_and_transmit_all_data+0x46>
        // Read data from the current page of the EEPROM
        EEPROM_Read(page, 0, data, PAGE_SIZE);
 80017e0:	1d3a      	adds	r2, r7, #4
 80017e2:	244e      	movs	r4, #78	; 0x4e
 80017e4:	193b      	adds	r3, r7, r4
 80017e6:	8818      	ldrh	r0, [r3, #0]
 80017e8:	2340      	movs	r3, #64	; 0x40
 80017ea:	2100      	movs	r1, #0
 80017ec:	f7ff fb1e 	bl	8000e2c <EEPROM_Read>

        // Ensure that the data is null-terminated
        data[PAGE_SIZE] = '\0';
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	2100      	movs	r1, #0
 80017f6:	5499      	strb	r1, [r3, r2]

        // Transmit the data over UART
        HAL_UART_Transmit(&huart1, data, PAGE_SIZE, 1000);
 80017f8:	23fa      	movs	r3, #250	; 0xfa
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	1d39      	adds	r1, r7, #4
 80017fe:	4815      	ldr	r0, [pc, #84]	; (8001854 <read_and_transmit_all_data+0x84>)
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	f003 fe4f 	bl	80054a4 <HAL_UART_Transmit>


        // Delay between each UART transmission
        HAL_Delay(10);
 8001806:	200a      	movs	r0, #10
 8001808:	f000 fba2 	bl	8001f50 <HAL_Delay>
    for(uint16_t page = 0; page < PAGE_NUM; page++) {
 800180c:	193b      	adds	r3, r7, r4
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	193b      	adds	r3, r7, r4
 8001812:	3201      	adds	r2, #1
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	234e      	movs	r3, #78	; 0x4e
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	881a      	ldrh	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	429a      	cmp	r2, r3
 8001822:	d3dd      	bcc.n	80017e0 <read_and_transmit_all_data+0x10>
    }

    //Erase everything after transmission
    for (int i=0; i<512; i++)
 8001824:	2300      	movs	r3, #0
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
 8001828:	e007      	b.n	800183a <read_and_transmit_all_data+0x6a>
    {
  	  EEPROM_PageErase(i);
 800182a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800182c:	b29b      	uxth	r3, r3
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff fb90 	bl	8000f54 <EEPROM_PageErase>
    for (int i=0; i<512; i++)
 8001834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001836:	3301      	adds	r3, #1
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
 800183a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf2      	blt.n	800182a <read_and_transmit_all_data+0x5a>
    }
    eeprom_full = false;
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <read_and_transmit_all_data+0x88>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b015      	add	sp, #84	; 0x54
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	20000198 	.word	0x20000198
 8001858:	2000025e 	.word	0x2000025e

0800185c <HAL_GPIO_EXTI_Callback>:
It specifically handles the interrupt triggered by the PB10 pin, indicating that the USB has been plugged in.
When this interrupt occurs, the function starts transmitting all the stored data over UART.
@param GPIO_Pin The GPIO pin that triggered the interrupt
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	0002      	movs	r2, r0
 8001864:	1dbb      	adds	r3, r7, #6
 8001866:	801a      	strh	r2, [r3, #0]
	// If The INT Source Is EXTI 10 (PB10 Pin) indicating USB has been plugged in

	if(GPIO_Pin == GPIO_PIN_0){
 8001868:	1dbb      	adds	r3, r7, #6
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <HAL_GPIO_EXTI_Callback+0x1a>
		//Start transmitting data
		//read_and_transmit_all_data();
		usb_plugged = true;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GPIO_EXTI_Callback+0x24>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]

	}
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b002      	add	sp, #8
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	2000025f 	.word	0x2000025f

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>

0800188e <RTC_SetTime>:
 * @param hours Hours value to set (0-23)
 * @param minutes Minutes value to set (0-59)
 * @param seconds Seconds value to set (0-59)
 * @return HAL status (HAL_OK, HAL_ERROR, HAL_BUSY, or HAL_TIMEOUT)
 */
HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 800188e:	b590      	push	{r4, r7, lr}
 8001890:	b089      	sub	sp, #36	; 0x24
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	000c      	movs	r4, r1
 8001898:	0010      	movs	r0, r2
 800189a:	0019      	movs	r1, r3
 800189c:	1cfb      	adds	r3, r7, #3
 800189e:	1c22      	adds	r2, r4, #0
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	1cbb      	adds	r3, r7, #2
 80018a4:	1c02      	adds	r2, r0, #0
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	1c7b      	adds	r3, r7, #1
 80018aa:	1c0a      	adds	r2, r1, #0
 80018ac:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 80018ae:	240c      	movs	r4, #12
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	0018      	movs	r0, r3
 80018b4:	2314      	movs	r3, #20
 80018b6:	001a      	movs	r2, r3
 80018b8:	2100      	movs	r1, #0
 80018ba:	f004 fa27 	bl	8005d0c <memset>

    sTime.Hours = hours;
 80018be:	0021      	movs	r1, r4
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	1cfa      	adds	r2, r7, #3
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	1cba      	adds	r2, r7, #2
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	1c7a      	adds	r2, r7, #1
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]

    return HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80018e4:	1879      	adds	r1, r7, r1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	0018      	movs	r0, r3
 80018ec:	f002 fee4 	bl	80046b8 <HAL_RTC_SetTime>
 80018f0:	0003      	movs	r3, r0
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b009      	add	sp, #36	; 0x24
 80018f8:	bd90      	pop	{r4, r7, pc}

080018fa <RTC_GetTime>:
 * @param hours Pointer to an uint8_t variable to store the hours value
 * @param minutes Pointer to an uint8_t variable to store the minutes value
 * @param seconds Pointer to an uint8_t variable to store the seconds value
 * @return HAL status (HAL_OK, HAL_ERROR, HAL_BUSY, or HAL_TIMEOUT)
 */
HAL_StatusTypeDef RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 80018fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fc:	b08b      	sub	sp, #44	; 0x2c
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef sTime = {0};
 8001908:	2510      	movs	r5, #16
 800190a:	197b      	adds	r3, r7, r5
 800190c:	0018      	movs	r0, r3
 800190e:	2314      	movs	r3, #20
 8001910:	001a      	movs	r2, r3
 8001912:	2100      	movs	r1, #0
 8001914:	f004 f9fa 	bl	8005d0c <memset>

    HAL_StatusTypeDef status = HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001918:	2627      	movs	r6, #39	; 0x27
 800191a:	19bc      	adds	r4, r7, r6
 800191c:	1979      	adds	r1, r7, r5
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	0018      	movs	r0, r3
 8001924:	f002 ff6e 	bl	8004804 <HAL_RTC_GetTime>
 8001928:	0003      	movs	r3, r0
 800192a:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK) {
 800192c:	19bb      	adds	r3, r7, r6
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10b      	bne.n	800194c <RTC_GetTime+0x52>
        *hours = sTime.Hours;
 8001934:	197b      	adds	r3, r7, r5
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	701a      	strb	r2, [r3, #0]
        *minutes = sTime.Minutes;
 800193c:	197b      	adds	r3, r7, r5
 800193e:	785a      	ldrb	r2, [r3, #1]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	701a      	strb	r2, [r3, #0]
        *seconds = sTime.Seconds;
 8001944:	197b      	adds	r3, r7, r5
 8001946:	789a      	ldrb	r2, [r3, #2]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800194c:	2327      	movs	r3, #39	; 0x27
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	781b      	ldrb	r3, [r3, #0]
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b00b      	add	sp, #44	; 0x2c
 8001958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800195a <RTC_SetDate>:
@param hrtc Pointer to an RTC_HandleTypeDef structure that contains the configuration information for the specified RTC
@param day The day of the month
@param month The month
@param year The year (from 0 to 99)
*/
void RTC_SetDate(RTC_HandleTypeDef *hrtc, uint8_t day, uint8_t month, uint8_t year) {
 800195a:	b590      	push	{r4, r7, lr}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	000c      	movs	r4, r1
 8001964:	0010      	movs	r0, r2
 8001966:	0019      	movs	r1, r3
 8001968:	1cfb      	adds	r3, r7, #3
 800196a:	1c22      	adds	r2, r4, #0
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	1c02      	adds	r2, r0, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	1c7b      	adds	r3, r7, #1
 8001976:	1c0a      	adds	r2, r1, #0
 8001978:	701a      	strb	r2, [r3, #0]
RTC_DateTypeDef date = {0};
 800197a:	210c      	movs	r1, #12
 800197c:	187b      	adds	r3, r7, r1
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
date.Date = day;
 8001982:	187b      	adds	r3, r7, r1
 8001984:	1cfa      	adds	r2, r7, #3
 8001986:	7812      	ldrb	r2, [r2, #0]
 8001988:	709a      	strb	r2, [r3, #2]
date.Month = month;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	1cba      	adds	r2, r7, #2
 800198e:	7812      	ldrb	r2, [r2, #0]
 8001990:	705a      	strb	r2, [r3, #1]
date.Year = year;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	1c7a      	adds	r2, r7, #1
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	70da      	strb	r2, [r3, #3]
HAL_RTC_SetDate(hrtc, &date, RTC_FORMAT_BIN);
 800199a:	1879      	adds	r1, r7, r1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	0018      	movs	r0, r3
 80019a2:	f002 ff8d 	bl	80048c0 <HAL_RTC_SetDate>
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b005      	add	sp, #20
 80019ac:	bd90      	pop	{r4, r7, pc}

080019ae <RTC_GetDate>:
@param hrtc Pointer to an RTC_HandleTypeDef structure that contains the configuration information for the specified RTC
@param day Pointer to store the day of the month
@param month Pointer to store the month
@param year Pointer to store the year
*/
void RTC_GetDate(RTC_HandleTypeDef *hrtc, uint8_t *day, uint8_t *month, uint8_t *year) {
 80019ae:	b590      	push	{r4, r7, lr}
 80019b0:	b087      	sub	sp, #28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]
RTC_DateTypeDef date = {0};
 80019bc:	2414      	movs	r4, #20
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
HAL_RTC_GetDate(hrtc, &date, RTC_FORMAT_BIN);
 80019c4:	1939      	adds	r1, r7, r4
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	0018      	movs	r0, r3
 80019cc:	f003 f808 	bl	80049e0 <HAL_RTC_GetDate>
*day = date.Date;
 80019d0:	0021      	movs	r1, r4
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	789a      	ldrb	r2, [r3, #2]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	701a      	strb	r2, [r3, #0]
*month = date.Month;
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	785a      	ldrb	r2, [r3, #1]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	701a      	strb	r2, [r3, #0]
*year = date.Year;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	78da      	ldrb	r2, [r3, #3]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	701a      	strb	r2, [r3, #0]
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b007      	add	sp, #28
 80019f0:	bd90      	pop	{r4, r7, pc}
	...

080019f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_MspInit+0x44>)
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_MspInit+0x44>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	619a      	str	r2, [r3, #24]
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_MspInit+0x44>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_MspInit+0x44>)
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_MspInit+0x44>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0549      	lsls	r1, r1, #21
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	61da      	str	r2, [r3, #28]
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_MspInit+0x44>)
 8001a22:	69da      	ldr	r2, [r3, #28]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	055b      	lsls	r3, r3, #21
 8001a28:	4013      	ands	r3, r2
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	2414      	movs	r4, #20
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	0018      	movs	r0, r3
 8001a4a:	2314      	movs	r3, #20
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f004 f95c 	bl	8005d0c <memset>
  if(hadc->Instance==ADC1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_ADC_MspInit+0x84>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12b      	bne.n	8001ab6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_ADC_MspInit+0x88>)
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_ADC_MspInit+0x88>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0089      	lsls	r1, r1, #2
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	619a      	str	r2, [r3, #24]
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_ADC_MspInit+0x88>)
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_ADC_MspInit+0x88>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_ADC_MspInit+0x88>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0289      	lsls	r1, r1, #10
 8001a84:	430a      	orrs	r2, r1
 8001a86:	615a      	str	r2, [r3, #20]
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_ADC_MspInit+0x88>)
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	029b      	lsls	r3, r3, #10
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	2220      	movs	r2, #32
 8001a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	193a      	adds	r2, r7, r4
 8001aaa:	2390      	movs	r3, #144	; 0x90
 8001aac:	05db      	lsls	r3, r3, #23
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 f817 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b00b      	add	sp, #44	; 0x2c
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40012400 	.word	0x40012400
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b08b      	sub	sp, #44	; 0x2c
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	2414      	movs	r4, #20
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	2314      	movs	r3, #20
 8001ad8:	001a      	movs	r2, r3
 8001ada:	2100      	movs	r1, #0
 8001adc:	f004 f916 	bl	8005d0c <memset>
  if(hi2c->Instance==I2C1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_I2C_MspInit+0x90>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d132      	bne.n	8001b50 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_I2C_MspInit+0x94>)
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_I2C_MspInit+0x94>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	02c9      	lsls	r1, r1, #11
 8001af4:	430a      	orrs	r2, r1
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_I2C_MspInit+0x94>)
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	02db      	lsls	r3, r3, #11
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	22c0      	movs	r2, #192	; 0xc0
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	0021      	movs	r1, r4
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2212      	movs	r2, #18
 8001b14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2201      	movs	r2, #1
 8001b26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_I2C_MspInit+0x98>)
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	0010      	movs	r0, r2
 8001b30:	f000 ffd8 	bl	8002ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_I2C_MspInit+0x94>)
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_I2C_MspInit+0x94>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	0389      	lsls	r1, r1, #14
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	61da      	str	r2, [r3, #28]
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_I2C_MspInit+0x94>)
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	039b      	lsls	r3, r3, #14
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b00b      	add	sp, #44	; 0x2c
 8001b56:	bd90      	pop	{r4, r7, pc}
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48000400 	.word	0x48000400

08001b64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HAL_RTC_MspInit+0x28>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d106      	bne.n	8001b84 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RTC_MspInit+0x2c>)
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RTC_MspInit+0x2c>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0209      	lsls	r1, r1, #8
 8001b80:	430a      	orrs	r2, r1
 8001b82:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40002800 	.word	0x40002800
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	05db      	lsls	r3, r3, #23
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d113      	bne.n	8001bd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_TIM_Base_MspInit+0x44>)
 8001baa:	69da      	ldr	r2, [r3, #28]
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_TIM_Base_MspInit+0x44>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	61da      	str	r2, [r3, #28]
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_TIM_Base_MspInit+0x44>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	200f      	movs	r0, #15
 8001bc6:	f000 ff5b 	bl	8002a80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f000 ff6d 	bl	8002aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b08b      	sub	sp, #44	; 0x2c
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	2414      	movs	r4, #20
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	0018      	movs	r0, r3
 8001bea:	2314      	movs	r3, #20
 8001bec:	001a      	movs	r2, r3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	f004 f88c 	bl	8005d0c <memset>
  if(huart->Instance==USART1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <HAL_UART_MspInit+0x94>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d133      	bne.n	8001c66 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_UART_MspInit+0x98>)
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_UART_MspInit+0x98>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	01c9      	lsls	r1, r1, #7
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	619a      	str	r2, [r3, #24]
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_UART_MspInit+0x98>)
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	01db      	lsls	r3, r3, #7
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_UART_MspInit+0x98>)
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_UART_MspInit+0x98>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0289      	lsls	r1, r1, #10
 8001c24:	430a      	orrs	r2, r1
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_UART_MspInit+0x98>)
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	22c0      	movs	r2, #192	; 0xc0
 8001c3a:	00d2      	lsls	r2, r2, #3
 8001c3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	0021      	movs	r1, r4
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	2202      	movs	r2, #2
 8001c44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2201      	movs	r2, #1
 8001c56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	187a      	adds	r2, r7, r1
 8001c5a:	2390      	movs	r3, #144	; 0x90
 8001c5c:	05db      	lsls	r3, r3, #23
 8001c5e:	0011      	movs	r1, r2
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 ff3f 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b00b      	add	sp, #44	; 0x2c
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	40013800 	.word	0x40013800
 8001c74:	40021000 	.word	0x40021000

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <NMI_Handler+0x4>

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9c:	f000 f93c 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f001 f88a 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f001 f880 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <TIM2_IRQHandler+0x14>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f002 fff8 	bl	8004cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	20000150 	.word	0x20000150

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	18d3      	adds	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f003 ffd0 	bl	8005cb8 <__errno>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	425b      	negs	r3, r3
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	18d2      	adds	r2, r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <_sbrk+0x64>)
 8001d34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b006      	add	sp, #24
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20002000 	.word	0x20002000
 8001d44:	00000400 	.word	0x00000400
 8001d48:	20000260 	.word	0x20000260
 8001d4c:	20000280 	.word	0x20000280

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <TMP102_Init>:
 * @brief Initialize the TMP102 temperature sensor.
 * @param hi2c Pointer to an I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef TMP102_Init(I2C_HandleTypeDef *hi2c) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af04      	add	r7, sp, #16
 8001d62:	6078      	str	r0, [r7, #4]
    i2c_handle = hi2c;
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <TMP102_Init+0x60>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]

    uint16_t config = TMP102_CONFIG_CONTINUOUS_CONVERSION;
 8001d6a:	210e      	movs	r1, #14
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
    uint8_t data[2] = {config >> 8, config & 0xFF};
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	200c      	movs	r0, #12
 8001d7e:	183b      	adds	r3, r7, r0
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	0001      	movs	r1, r0
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	705a      	strb	r2, [r3, #1]

    // Write config to the TMP102
    if (HAL_I2C_Mem_Write(i2c_handle, TMP102_I2C_ADDRESS << 1, TMP102_REG_CONFIG, 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <TMP102_Init+0x60>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	2301      	movs	r3, #1
 8001d94:	425b      	negs	r3, r3
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2301      	movs	r3, #1
 8001da2:	2201      	movs	r2, #1
 8001da4:	2190      	movs	r1, #144	; 0x90
 8001da6:	f001 f8bf 	bl	8002f28 <HAL_I2C_Mem_Write>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <TMP102_Init+0x56>
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <TMP102_Init+0x58>
    }

    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000264 	.word	0x20000264

08001dc0 <TMP102_ReadTemperature>:
 * @brief Read temperature from the TMP102 sensor.
 * @param hi2c Pointer to an I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C peripheral.
 * @return Temperature in degrees Celsius as a float.
 */
float TMP102_ReadTemperature(I2C_HandleTypeDef *hi2c) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af04      	add	r7, sp, #16
 8001dc6:	6078      	str	r0, [r7, #4]
    uint8_t data[2];

    // Read temperature data from the TMP102
    if (HAL_I2C_Mem_Read(i2c_handle, TMP102_I2C_ADDRESS << 1, TMP102_REG_TEMPERATURE, 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <TMP102_ReadTemperature+0x6c>)
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	425b      	negs	r3, r3
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	2200      	movs	r2, #0
 8001de0:	2190      	movs	r1, #144	; 0x90
 8001de2:	f001 f9cf 	bl	8003184 <HAL_I2C_Mem_Read>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <TMP102_ReadTemperature+0x2e>
        return NAN;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <TMP102_ReadTemperature+0x70>)
 8001dec:	e01a      	b.n	8001e24 <TMP102_ReadTemperature+0x64>
    }

    int16_t raw_temperature = (data[0] << 4) | (data[1] >> 4);
 8001dee:	220c      	movs	r2, #12
 8001df0:	18bb      	adds	r3, r7, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	b219      	sxth	r1, r3
 8001df8:	18bb      	adds	r3, r7, r2
 8001dfa:	785b      	ldrb	r3, [r3, #1]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	200e      	movs	r0, #14
 8001e04:	183b      	adds	r3, r7, r0
 8001e06:	430a      	orrs	r2, r1
 8001e08:	801a      	strh	r2, [r3, #0]

    // Convert raw temperature data to Celsius
    return (float) raw_temperature * 0.0625f;
 8001e0a:	183b      	adds	r3, r7, r0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	5e9b      	ldrsh	r3, [r3, r2]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7fe fea9 	bl	8000b68 <__aeabi_i2f>
 8001e16:	1c03      	adds	r3, r0, #0
 8001e18:	21f6      	movs	r1, #246	; 0xf6
 8001e1a:	0589      	lsls	r1, r1, #22
 8001e1c:	1c18      	adds	r0, r3, #0
 8001e1e:	f7fe fbaf 	bl	8000580 <__aeabi_fmul>
 8001e22:	1c03      	adds	r3, r0, #0
}
 8001e24:	1c18      	adds	r0, r3, #0
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000264 	.word	0x20000264
 8001e30:	7fc00000 	.word	0x7fc00000

08001e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e36:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001e38:	f7ff ff8a 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3e:	490d      	ldr	r1, [pc, #52]	; (8001e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <LoopForever+0xe>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e54:	4c0a      	ldr	r4, [pc, #40]	; (8001e80 <LoopForever+0x16>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e62:	f003 ff2f 	bl	8005cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e66:	f7ff f8fb 	bl	8001060 <main>

08001e6a <LoopForever>:

LoopForever:
    b LoopForever
 8001e6a:	e7fe      	b.n	8001e6a <LoopForever>
  ldr   r0, =_estack
 8001e6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e78:	08006718 	.word	0x08006718
  ldr r2, =_sbss
 8001e7c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e80:	2000027c 	.word	0x2000027c

08001e84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC1_COMP_IRQHandler>
	...

08001e88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_Init+0x24>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_Init+0x24>)
 8001e92:	2110      	movs	r1, #16
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f809 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9e:	f7ff fda9 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_InitTick+0x5c>)
 8001eba:	681c      	ldr	r4, [r3, #0]
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_InitTick+0x60>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	23fa      	movs	r3, #250	; 0xfa
 8001ec4:	0098      	lsls	r0, r3, #2
 8001ec6:	f7fe f931 	bl	800012c <__udivsi3>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	0019      	movs	r1, r3
 8001ece:	0020      	movs	r0, r4
 8001ed0:	f7fe f92c 	bl	800012c <__udivsi3>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 fdf7 	bl	8002aca <HAL_SYSTICK_Config>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e00f      	b.n	8001f04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d80b      	bhi.n	8001f02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	2301      	movs	r3, #1
 8001eee:	425b      	negs	r3, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 fdc4 	bl	8002a80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_InitTick+0x64>)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b003      	add	sp, #12
 8001f0a:	bd90      	pop	{r4, r7, pc}
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000010 	.word	0x20000010
 8001f14:	2000000c 	.word	0x2000000c

08001f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_IncTick+0x1c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	001a      	movs	r2, r3
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x20>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	18d2      	adds	r2, r2, r3
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_IncTick+0x20>)
 8001f2a:	601a      	str	r2, [r3, #0]
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	20000010 	.word	0x20000010
 8001f38:	20000268 	.word	0x20000268

08001f3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <HAL_GetTick+0x10>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	20000268 	.word	0x20000268

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff fff0 	bl	8001f3c <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3301      	adds	r3, #1
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	001a      	movs	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	189b      	adds	r3, r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	f7ff ffe0 	bl	8001f3c <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	20000010 	.word	0x20000010

08001f98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e125      	b.n	8002202 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2234      	movs	r2, #52	; 0x34
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fd34 	bl	8001a3c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd8:	2210      	movs	r2, #16
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d000      	beq.n	8001fe0 <HAL_ADC_Init+0x48>
 8001fde:	e103      	b.n	80021e8 <HAL_ADC_Init+0x250>
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d000      	beq.n	8001fec <HAL_ADC_Init+0x54>
 8001fea:	e0fd      	b.n	80021e8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001ff6:	d000      	beq.n	8001ffa <HAL_ADC_Init+0x62>
 8001ff8:	e0f6      	b.n	80021e8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	4a83      	ldr	r2, [pc, #524]	; (800220c <HAL_ADC_Init+0x274>)
 8002000:	4013      	ands	r3, r2
 8002002:	2202      	movs	r2, #2
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2203      	movs	r2, #3
 8002012:	4013      	ands	r3, r2
 8002014:	2b01      	cmp	r3, #1
 8002016:	d112      	bne.n	800203e <HAL_ADC_Init+0xa6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	4013      	ands	r3, r2
 8002022:	2b01      	cmp	r3, #1
 8002024:	d009      	beq.n	800203a <HAL_ADC_Init+0xa2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	401a      	ands	r2, r3
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	429a      	cmp	r2, r3
 8002038:	d101      	bne.n	800203e <HAL_ADC_Init+0xa6>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_ADC_Init+0xa8>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d116      	bne.n	8002072 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2218      	movs	r2, #24
 800204c:	4393      	bics	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	0899      	lsrs	r1, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4964      	ldr	r1, [pc, #400]	; (8002210 <HAL_ADC_Init+0x278>)
 800207e:	400a      	ands	r2, r1
 8002080:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7e1b      	ldrb	r3, [r3, #24]
 8002086:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7e5b      	ldrb	r3, [r3, #25]
 800208c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800208e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e9b      	ldrb	r3, [r3, #26]
 8002094:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002096:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	2b01      	cmp	r3, #1
 800209e:	d002      	beq.n	80020a6 <HAL_ADC_Init+0x10e>
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	015b      	lsls	r3, r3, #5
 80020a4:	e000      	b.n	80020a8 <HAL_ADC_Init+0x110>
 80020a6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020a8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80020ae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_Init+0x124>
 80020b8:	2304      	movs	r3, #4
 80020ba:	e000      	b.n	80020be <HAL_ADC_Init+0x126>
 80020bc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80020be:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2124      	movs	r1, #36	; 0x24
 80020c4:	5c5b      	ldrb	r3, [r3, r1]
 80020c6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80020c8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7edb      	ldrb	r3, [r3, #27]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d115      	bne.n	8002104 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7e9b      	ldrb	r3, [r3, #26]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	0252      	lsls	r2, r2, #9
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	e00b      	b.n	8002104 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	2220      	movs	r2, #32
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	2201      	movs	r2, #1
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	23c2      	movs	r3, #194	; 0xc2
 800210a:	33ff      	adds	r3, #255	; 0xff
 800210c:	429a      	cmp	r2, r3
 800210e:	d007      	beq.n	8002120 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002118:	4313      	orrs	r3, r2
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4313      	orrs	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	430a      	orrs	r2, r1
 800212e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	055b      	lsls	r3, r3, #21
 8002138:	429a      	cmp	r2, r3
 800213a:	d01b      	beq.n	8002174 <HAL_ADC_Init+0x1dc>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d017      	beq.n	8002174 <HAL_ADC_Init+0x1dc>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	2b02      	cmp	r3, #2
 800214a:	d013      	beq.n	8002174 <HAL_ADC_Init+0x1dc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	2b03      	cmp	r3, #3
 8002152:	d00f      	beq.n	8002174 <HAL_ADC_Init+0x1dc>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00b      	beq.n	8002174 <HAL_ADC_Init+0x1dc>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	2b05      	cmp	r3, #5
 8002162:	d007      	beq.n	8002174 <HAL_ADC_Init+0x1dc>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	2b06      	cmp	r3, #6
 800216a:	d003      	beq.n	8002174 <HAL_ADC_Init+0x1dc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	2b07      	cmp	r3, #7
 8002172:	d112      	bne.n	800219a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2107      	movs	r1, #7
 8002180:	438a      	bics	r2, r1
 8002182:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6959      	ldr	r1, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	2207      	movs	r2, #7
 8002190:	401a      	ands	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_ADC_Init+0x27c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d10b      	bne.n	80021c2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	2203      	movs	r2, #3
 80021b6:	4393      	bics	r3, r2
 80021b8:	2201      	movs	r2, #1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80021c0:	e01c      	b.n	80021fc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	2212      	movs	r2, #18
 80021c8:	4393      	bics	r3, r2
 80021ca:	2210      	movs	r2, #16
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	2201      	movs	r2, #1
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80021de:	230f      	movs	r3, #15
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80021e6:	e009      	b.n	80021fc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	2210      	movs	r2, #16
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80021f4:	230f      	movs	r3, #15
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021fc:	230f      	movs	r3, #15
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b004      	add	sp, #16
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	fffffefd 	.word	0xfffffefd
 8002210:	fffe0219 	.word	0xfffe0219
 8002214:	833fffe7 	.word	0x833fffe7

08002218 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	230f      	movs	r3, #15
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2204      	movs	r2, #4
 8002230:	4013      	ands	r3, r2
 8002232:	d138      	bne.n	80022a6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2234      	movs	r2, #52	; 0x34
 8002238:	5c9b      	ldrb	r3, [r3, r2]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Start+0x2a>
 800223e:	2302      	movs	r3, #2
 8002240:	e038      	b.n	80022b4 <HAL_ADC_Start+0x9c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2234      	movs	r2, #52	; 0x34
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7e5b      	ldrb	r3, [r3, #25]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d007      	beq.n	8002262 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002252:	230f      	movs	r3, #15
 8002254:	18fc      	adds	r4, r7, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 fa23 	bl	80026a4 <ADC_Enable>
 800225e:	0003      	movs	r3, r0
 8002260:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002262:	230f      	movs	r3, #15
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d120      	bne.n	80022ae <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	4a12      	ldr	r2, [pc, #72]	; (80022bc <HAL_ADC_Start+0xa4>)
 8002272:	4013      	ands	r3, r2
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	0052      	lsls	r2, r2, #1
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2234      	movs	r2, #52	; 0x34
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	221c      	movs	r2, #28
 8002292:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2104      	movs	r1, #4
 80022a0:	430a      	orrs	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	e003      	b.n	80022ae <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022a6:	230f      	movs	r3, #15
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022ae:	230f      	movs	r3, #15
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	781b      	ldrb	r3, [r3, #0]
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b005      	add	sp, #20
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	fffff0fe 	.word	0xfffff0fe

080022c0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	230f      	movs	r3, #15
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2234      	movs	r2, #52	; 0x34
 80022d4:	5c9b      	ldrb	r3, [r3, r2]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_ADC_Stop+0x1e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e029      	b.n	8002332 <HAL_ADC_Stop+0x72>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2234      	movs	r2, #52	; 0x34
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80022e6:	250f      	movs	r5, #15
 80022e8:	197c      	adds	r4, r7, r5
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 face 	bl	800288e <ADC_ConversionStop>
 80022f2:	0003      	movs	r3, r0
 80022f4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d112      	bne.n	8002324 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80022fe:	197c      	adds	r4, r7, r5
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	0018      	movs	r0, r3
 8002304:	f000 fa52 	bl	80027ac <ADC_Disable>
 8002308:	0003      	movs	r3, r0
 800230a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800230c:	197b      	adds	r3, r7, r5
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_ADC_Stop+0x7c>)
 800231a:	4013      	ands	r3, r2
 800231c:	2201      	movs	r2, #1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2234      	movs	r2, #52	; 0x34
 8002328:	2100      	movs	r1, #0
 800232a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800232c:	230f      	movs	r3, #15
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bdb0      	pop	{r4, r5, r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	fffffefe 	.word	0xfffffefe

08002340 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b08      	cmp	r3, #8
 8002350:	d102      	bne.n	8002358 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002352:	2308      	movs	r3, #8
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	e014      	b.n	8002382 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	4013      	ands	r3, r2
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10b      	bne.n	800237e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	2220      	movs	r2, #32
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2234      	movs	r2, #52	; 0x34
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e071      	b.n	8002462 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800237e:	230c      	movs	r3, #12
 8002380:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002382:	f7ff fddb 	bl	8001f3c <HAL_GetTick>
 8002386:	0003      	movs	r3, r0
 8002388:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800238a:	e01f      	b.n	80023cc <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	d01c      	beq.n	80023cc <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x68>
 8002398:	f7ff fdd0 	bl	8001f3c <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d211      	bcs.n	80023cc <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	d10b      	bne.n	80023cc <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	2204      	movs	r2, #4
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2234      	movs	r2, #52	; 0x34
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e04a      	b.n	8002462 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	d0d9      	beq.n	800238c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	23c0      	movs	r3, #192	; 0xc0
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4013      	ands	r3, r2
 80023f2:	d12d      	bne.n	8002450 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d129      	bne.n	8002450 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2208      	movs	r2, #8
 8002404:	4013      	ands	r3, r2
 8002406:	2b08      	cmp	r3, #8
 8002408:	d122      	bne.n	8002450 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d110      	bne.n	8002438 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	210c      	movs	r1, #12
 8002422:	438a      	bics	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_ADC_PollForConversion+0x12c>)
 800242c:	4013      	ands	r3, r2
 800242e:	2201      	movs	r2, #1
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
 8002436:	e00b      	b.n	8002450 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	2220      	movs	r2, #32
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2201      	movs	r2, #1
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e1b      	ldrb	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d103      	bne.n	8002460 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	220c      	movs	r2, #12
 800245e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	fffffefe 	.word	0xfffffefe

08002470 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002492:	230f      	movs	r3, #15
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	055b      	lsls	r3, r3, #21
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d011      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x46>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d00d      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x46>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d009      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x46>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d005      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x46>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d001      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x46>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2234      	movs	r2, #52	; 0x34
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x54>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0d0      	b.n	800267e <HAL_ADC_ConfigChannel+0x1f6>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2234      	movs	r2, #52	; 0x34
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2204      	movs	r2, #4
 80024ec:	4013      	ands	r3, r2
 80024ee:	d000      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x6a>
 80024f0:	e0b4      	b.n	800265c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a64      	ldr	r2, [pc, #400]	; (8002688 <HAL_ADC_ConfigChannel+0x200>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d100      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x76>
 80024fc:	e082      	b.n	8002604 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	055b      	lsls	r3, r3, #21
 800251c:	429a      	cmp	r2, r3
 800251e:	d037      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d033      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b02      	cmp	r3, #2
 800252e:	d02f      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	2b03      	cmp	r3, #3
 8002536:	d02b      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	2b04      	cmp	r3, #4
 800253e:	d027      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2b05      	cmp	r3, #5
 8002546:	d023      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	2b06      	cmp	r3, #6
 800254e:	d01f      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	2b07      	cmp	r3, #7
 8002556:	d01b      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2107      	movs	r1, #7
 8002564:	400b      	ands	r3, r1
 8002566:	429a      	cmp	r2, r3
 8002568:	d012      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2107      	movs	r1, #7
 8002576:	438a      	bics	r2, r1
 8002578:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6959      	ldr	r1, [r3, #20]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2207      	movs	r2, #7
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b10      	cmp	r3, #16
 8002596:	d007      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x120>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b11      	cmp	r3, #17
 800259e:	d003      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x120>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d163      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025a8:	4b38      	ldr	r3, [pc, #224]	; (800268c <HAL_ADC_ConfigChannel+0x204>)
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d009      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0x140>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b11      	cmp	r3, #17
 80025ba:	d102      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x13a>
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	03db      	lsls	r3, r3, #15
 80025c0:	e004      	b.n	80025cc <HAL_ADC_ConfigChannel+0x144>
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	045b      	lsls	r3, r3, #17
 80025c6:	e001      	b.n	80025cc <HAL_ADC_ConfigChannel+0x144>
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	041b      	lsls	r3, r3, #16
 80025cc:	4a2f      	ldr	r2, [pc, #188]	; (800268c <HAL_ADC_ConfigChannel+0x204>)
 80025ce:	430b      	orrs	r3, r1
 80025d0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d14a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_ADC_ConfigChannel+0x208>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	492d      	ldr	r1, [pc, #180]	; (8002694 <HAL_ADC_ConfigChannel+0x20c>)
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7fd fda3 	bl	800012c <__udivsi3>
 80025e6:	0003      	movs	r3, r0
 80025e8:	001a      	movs	r2, r3
 80025ea:	0013      	movs	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025f4:	e002      	b.n	80025fc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x16e>
 8002602:	e035      	b.n	8002670 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	4099      	lsls	r1, r3
 8002612:	000b      	movs	r3, r1
 8002614:	43d9      	mvns	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	400a      	ands	r2, r1
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b10      	cmp	r3, #16
 8002624:	d007      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x1ae>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b11      	cmp	r3, #17
 800262c:	d003      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x1ae>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b12      	cmp	r3, #18
 8002634:	d11c      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_ADC_ConfigChannel+0x204>)
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b10      	cmp	r3, #16
 8002640:	d007      	beq.n	8002652 <HAL_ADC_ConfigChannel+0x1ca>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b11      	cmp	r3, #17
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x1c6>
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_ADC_ConfigChannel+0x210>)
 800264c:	e002      	b.n	8002654 <HAL_ADC_ConfigChannel+0x1cc>
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_ADC_ConfigChannel+0x214>)
 8002650:	e000      	b.n	8002654 <HAL_ADC_ConfigChannel+0x1cc>
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_ADC_ConfigChannel+0x218>)
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_ADC_ConfigChannel+0x204>)
 8002656:	400b      	ands	r3, r1
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e009      	b.n	8002670 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	2220      	movs	r2, #32
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002668:	230f      	movs	r3, #15
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2234      	movs	r2, #52	; 0x34
 8002674:	2100      	movs	r1, #0
 8002676:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	00001001 	.word	0x00001001
 800268c:	40012708 	.word	0x40012708
 8002690:	20000008 	.word	0x20000008
 8002694:	000f4240 	.word	0x000f4240
 8002698:	ffbfffff 	.word	0xffbfffff
 800269c:	feffffff 	.word	0xfeffffff
 80026a0:	ff7fffff 	.word	0xff7fffff

080026a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2203      	movs	r2, #3
 80026bc:	4013      	ands	r3, r2
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d112      	bne.n	80026e8 <ADC_Enable+0x44>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d009      	beq.n	80026e4 <ADC_Enable+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	401a      	ands	r2, r3
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d101      	bne.n	80026e8 <ADC_Enable+0x44>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <ADC_Enable+0x46>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d152      	bne.n	8002794 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <ADC_Enable+0xfc>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	d00d      	beq.n	8002716 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	2210      	movs	r2, #16
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	2201      	movs	r2, #1
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e03f      	b.n	8002796 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <ADC_Enable+0x100>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	491f      	ldr	r1, [pc, #124]	; (80027a8 <ADC_Enable+0x104>)
 800272c:	0018      	movs	r0, r3
 800272e:	f7fd fcfd 	bl	800012c <__udivsi3>
 8002732:	0003      	movs	r3, r0
 8002734:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002736:	e002      	b.n	800273e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3b01      	subs	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f9      	bne.n	8002738 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002744:	f7ff fbfa 	bl	8001f3c <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800274c:	e01b      	b.n	8002786 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800274e:	f7ff fbf5 	bl	8001f3c <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d914      	bls.n	8002786 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	2b01      	cmp	r3, #1
 8002768:	d00d      	beq.n	8002786 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	2210      	movs	r2, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	2201      	movs	r2, #1
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e007      	b.n	8002796 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	2b01      	cmp	r3, #1
 8002792:	d1dc      	bne.n	800274e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b004      	add	sp, #16
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	80000017 	.word	0x80000017
 80027a4:	20000008 	.word	0x20000008
 80027a8:	000f4240 	.word	0x000f4240

080027ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2203      	movs	r2, #3
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d112      	bne.n	80027ec <ADC_Disable+0x40>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d009      	beq.n	80027e8 <ADC_Disable+0x3c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	401a      	ands	r2, r3
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d101      	bne.n	80027ec <ADC_Disable+0x40>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <ADC_Disable+0x42>
 80027ec:	2300      	movs	r3, #0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d048      	beq.n	8002884 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2205      	movs	r2, #5
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d110      	bne.n	8002822 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2102      	movs	r1, #2
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2203      	movs	r2, #3
 8002816:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002818:	f7ff fb90 	bl	8001f3c <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002820:	e029      	b.n	8002876 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	2210      	movs	r2, #16
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	2201      	movs	r2, #1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e023      	b.n	8002886 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800283e:	f7ff fb7d 	bl	8001f3c <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d914      	bls.n	8002876 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2201      	movs	r2, #1
 8002854:	4013      	ands	r3, r2
 8002856:	2b01      	cmp	r3, #1
 8002858:	d10d      	bne.n	8002876 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	2210      	movs	r2, #16
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	2201      	movs	r2, #1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	2b01      	cmp	r3, #1
 8002882:	d0dc      	beq.n	800283e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}

0800288e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2204      	movs	r2, #4
 80028a2:	4013      	ands	r3, r2
 80028a4:	d03a      	beq.n	800291c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2204      	movs	r2, #4
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d10d      	bne.n	80028d0 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80028be:	d107      	bne.n	80028d0 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2110      	movs	r1, #16
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028d0:	f7ff fb34 	bl	8001f3c <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80028d8:	e01a      	b.n	8002910 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028da:	f7ff fb2f 	bl	8001f3c <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d913      	bls.n	8002910 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2204      	movs	r2, #4
 80028f0:	4013      	ands	r3, r2
 80028f2:	d00d      	beq.n	8002910 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	2210      	movs	r2, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	2201      	movs	r2, #1
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e006      	b.n	800291e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2204      	movs	r2, #4
 8002918:	4013      	ands	r3, r2
 800291a:	d1de      	bne.n	80028da <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	0002      	movs	r2, r0
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002934:	1dfb      	adds	r3, r7, #7
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b7f      	cmp	r3, #127	; 0x7f
 800293a:	d809      	bhi.n	8002950 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293c:	1dfb      	adds	r3, r7, #7
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	001a      	movs	r2, r3
 8002942:	231f      	movs	r3, #31
 8002944:	401a      	ands	r2, r3
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <__NVIC_EnableIRQ+0x30>)
 8002948:	2101      	movs	r1, #1
 800294a:	4091      	lsls	r1, r2
 800294c:	000a      	movs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
  }
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	0002      	movs	r2, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800296a:	1dfb      	adds	r3, r7, #7
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b7f      	cmp	r3, #127	; 0x7f
 8002970:	d828      	bhi.n	80029c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002972:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <__NVIC_SetPriority+0xd4>)
 8002974:	1dfb      	adds	r3, r7, #7
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	b25b      	sxtb	r3, r3
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	33c0      	adds	r3, #192	; 0xc0
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	589b      	ldr	r3, [r3, r2]
 8002982:	1dfa      	adds	r2, r7, #7
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	0011      	movs	r1, r2
 8002988:	2203      	movs	r2, #3
 800298a:	400a      	ands	r2, r1
 800298c:	00d2      	lsls	r2, r2, #3
 800298e:	21ff      	movs	r1, #255	; 0xff
 8002990:	4091      	lsls	r1, r2
 8002992:	000a      	movs	r2, r1
 8002994:	43d2      	mvns	r2, r2
 8002996:	401a      	ands	r2, r3
 8002998:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	22ff      	movs	r2, #255	; 0xff
 80029a0:	401a      	ands	r2, r3
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	0018      	movs	r0, r3
 80029a8:	2303      	movs	r3, #3
 80029aa:	4003      	ands	r3, r0
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029b0:	481f      	ldr	r0, [pc, #124]	; (8002a30 <__NVIC_SetPriority+0xd4>)
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	430a      	orrs	r2, r1
 80029bc:	33c0      	adds	r3, #192	; 0xc0
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029c2:	e031      	b.n	8002a28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c4:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <__NVIC_SetPriority+0xd8>)
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	0019      	movs	r1, r3
 80029cc:	230f      	movs	r3, #15
 80029ce:	400b      	ands	r3, r1
 80029d0:	3b08      	subs	r3, #8
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3306      	adds	r3, #6
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	3304      	adds	r3, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1dfa      	adds	r2, r7, #7
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	0011      	movs	r1, r2
 80029e4:	2203      	movs	r2, #3
 80029e6:	400a      	ands	r2, r1
 80029e8:	00d2      	lsls	r2, r2, #3
 80029ea:	21ff      	movs	r1, #255	; 0xff
 80029ec:	4091      	lsls	r1, r2
 80029ee:	000a      	movs	r2, r1
 80029f0:	43d2      	mvns	r2, r2
 80029f2:	401a      	ands	r2, r3
 80029f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	22ff      	movs	r2, #255	; 0xff
 80029fc:	401a      	ands	r2, r3
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	0018      	movs	r0, r3
 8002a04:	2303      	movs	r3, #3
 8002a06:	4003      	ands	r3, r0
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a0c:	4809      	ldr	r0, [pc, #36]	; (8002a34 <__NVIC_SetPriority+0xd8>)
 8002a0e:	1dfb      	adds	r3, r7, #7
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	001c      	movs	r4, r3
 8002a14:	230f      	movs	r3, #15
 8002a16:	4023      	ands	r3, r4
 8002a18:	3b08      	subs	r3, #8
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	3306      	adds	r3, #6
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	18c3      	adds	r3, r0, r3
 8002a24:	3304      	adds	r3, #4
 8002a26:	601a      	str	r2, [r3, #0]
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b003      	add	sp, #12
 8002a2e:	bd90      	pop	{r4, r7, pc}
 8002a30:	e000e100 	.word	0xe000e100
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	045b      	lsls	r3, r3, #17
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d301      	bcc.n	8002a50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e010      	b.n	8002a72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <SysTick_Config+0x44>)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	3a01      	subs	r2, #1
 8002a56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a58:	2301      	movs	r3, #1
 8002a5a:	425b      	negs	r3, r3
 8002a5c:	2103      	movs	r1, #3
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ff7c 	bl	800295c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <SysTick_Config+0x44>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <SysTick_Config+0x44>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	1c02      	adds	r2, r0, #0
 8002a90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff ff5d 	bl	800295c <__NVIC_SetPriority>
}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b25b      	sxtb	r3, r3
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff ff33 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b002      	add	sp, #8
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff ffaf 	bl	8002a38 <SysTick_Config>
 8002ada:	0003      	movs	r3, r0
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b002      	add	sp, #8
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af2:	e14f      	b.n	8002d94 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4091      	lsls	r1, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d100      	bne.n	8002b0c <HAL_GPIO_Init+0x28>
 8002b0a:	e140      	b.n	8002d8e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2203      	movs	r2, #3
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d005      	beq.n	8002b24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d130      	bne.n	8002b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	409a      	lsls	r2, r3
 8002b32:	0013      	movs	r3, r2
 8002b34:	43da      	mvns	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	409a      	lsls	r2, r3
 8002b46:	0013      	movs	r3, r2
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	43da      	mvns	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	2201      	movs	r2, #1
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d017      	beq.n	8002bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d123      	bne.n	8002c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	58d3      	ldr	r3, [r2, r3]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2207      	movs	r2, #7
 8002be0:	4013      	ands	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	220f      	movs	r2, #15
 8002be6:	409a      	lsls	r2, r3
 8002be8:	0013      	movs	r3, r2
 8002bea:	43da      	mvns	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2107      	movs	r1, #7
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	0013      	movs	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	6939      	ldr	r1, [r7, #16]
 8002c14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	409a      	lsls	r2, r3
 8002c24:	0013      	movs	r3, r2
 8002c26:	43da      	mvns	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2203      	movs	r2, #3
 8002c34:	401a      	ands	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	23c0      	movs	r3, #192	; 0xc0
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	4013      	ands	r3, r2
 8002c54:	d100      	bne.n	8002c58 <HAL_GPIO_Init+0x174>
 8002c56:	e09a      	b.n	8002d8e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c58:	4b54      	ldr	r3, [pc, #336]	; (8002dac <HAL_GPIO_Init+0x2c8>)
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	4b53      	ldr	r3, [pc, #332]	; (8002dac <HAL_GPIO_Init+0x2c8>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	619a      	str	r2, [r3, #24]
 8002c64:	4b51      	ldr	r3, [pc, #324]	; (8002dac <HAL_GPIO_Init+0x2c8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c70:	4a4f      	ldr	r2, [pc, #316]	; (8002db0 <HAL_GPIO_Init+0x2cc>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	589b      	ldr	r3, [r3, r2]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2203      	movs	r2, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	0013      	movs	r3, r2
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	2390      	movs	r3, #144	; 0x90
 8002c98:	05db      	lsls	r3, r3, #23
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x1e2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a44      	ldr	r2, [pc, #272]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x1de>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_GPIO_Init+0x2d4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x1da>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a42      	ldr	r2, [pc, #264]	; (8002dbc <HAL_GPIO_Init+0x2d8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x1d6>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x1e4>
 8002cba:	2305      	movs	r3, #5
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x1e4>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x1e4>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x1e4>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	2103      	movs	r1, #3
 8002ccc:	400a      	ands	r2, r1
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd8:	4935      	ldr	r1, [pc, #212]	; (8002db0 <HAL_GPIO_Init+0x2cc>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce6:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	035b      	lsls	r3, r3, #13
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	039b      	lsls	r3, r3, #14
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43da      	mvns	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	029b      	lsls	r3, r3, #10
 8002d52:	4013      	ands	r3, r2
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d5e:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	025b      	lsls	r3, r3, #9
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d88:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	1e13      	subs	r3, r2, #0
 8002d9e:	d000      	beq.n	8002da2 <HAL_GPIO_Init+0x2be>
 8002da0:	e6a8      	b.n	8002af4 <HAL_GPIO_Init+0x10>
  } 
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b006      	add	sp, #24
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010000 	.word	0x40010000
 8002db4:	48000400 	.word	0x48000400
 8002db8:	48000800 	.word	0x48000800
 8002dbc:	48000c00 	.word	0x48000c00
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	0002      	movs	r2, r0
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	1dba      	adds	r2, r7, #6
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d008      	beq.n	8002dee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002dde:	1dba      	adds	r2, r7, #6
 8002de0:	8812      	ldrh	r2, [r2, #0]
 8002de2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de4:	1dbb      	adds	r3, r7, #6
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7fe fd37 	bl	800185c <HAL_GPIO_EXTI_Callback>
  }
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e082      	b.n	8002f14 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2241      	movs	r2, #65	; 0x41
 8002e12:	5c9b      	ldrb	r3, [r3, r2]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7fe fe4f 	bl	8001ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2241      	movs	r2, #65	; 0x41
 8002e2e:	2124      	movs	r1, #36	; 0x24
 8002e30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	438a      	bics	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4934      	ldr	r1, [pc, #208]	; (8002f1c <HAL_I2C_Init+0x120>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4931      	ldr	r1, [pc, #196]	; (8002f20 <HAL_I2C_Init+0x124>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d108      	bne.n	8002e7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	0209      	lsls	r1, r1, #8
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	e007      	b.n	8002e8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2184      	movs	r1, #132	; 0x84
 8002e84:	0209      	lsls	r1, r1, #8
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d104      	bne.n	8002e9c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	491f      	ldr	r1, [pc, #124]	; (8002f24 <HAL_I2C_Init+0x128>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	491a      	ldr	r1, [pc, #104]	; (8002f20 <HAL_I2C_Init+0x124>)
 8002eb8:	400a      	ands	r2, r1
 8002eba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69d9      	ldr	r1, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2241      	movs	r2, #65	; 0x41
 8002f00:	2120      	movs	r1, #32
 8002f02:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2242      	movs	r2, #66	; 0x42
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	f0ffffff 	.word	0xf0ffffff
 8002f20:	ffff7fff 	.word	0xffff7fff
 8002f24:	02008000 	.word	0x02008000

08002f28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b089      	sub	sp, #36	; 0x24
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	000c      	movs	r4, r1
 8002f32:	0010      	movs	r0, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	230a      	movs	r3, #10
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	1c22      	adds	r2, r4, #0
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	2308      	movs	r3, #8
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	1c02      	adds	r2, r0, #0
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	1dbb      	adds	r3, r7, #6
 8002f48:	1c0a      	adds	r2, r1, #0
 8002f4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2241      	movs	r2, #65	; 0x41
 8002f50:	5c9b      	ldrb	r3, [r3, r2]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d000      	beq.n	8002f5a <HAL_I2C_Mem_Write+0x32>
 8002f58:	e10c      	b.n	8003174 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_I2C_Mem_Write+0x42>
 8002f60:	232c      	movs	r3, #44	; 0x2c
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0ff      	b.n	8003176 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2240      	movs	r2, #64	; 0x40
 8002f7a:	5c9b      	ldrb	r3, [r3, r2]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_I2C_Mem_Write+0x5c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0f8      	b.n	8003176 <HAL_I2C_Mem_Write+0x24e>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	; 0x40
 8002f88:	2101      	movs	r1, #1
 8002f8a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f8c:	f7fe ffd6 	bl	8001f3c <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	0219      	lsls	r1, r3, #8
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2319      	movs	r3, #25
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f000 fb0b 	bl	80035bc <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	1e03      	subs	r3, r0, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0e3      	b.n	8003176 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2241      	movs	r2, #65	; 0x41
 8002fb2:	2121      	movs	r1, #33	; 0x21
 8002fb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2242      	movs	r2, #66	; 0x42
 8002fba:	2140      	movs	r1, #64	; 0x40
 8002fbc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	222c      	movs	r2, #44	; 0x2c
 8002fce:	18ba      	adds	r2, r7, r2
 8002fd0:	8812      	ldrh	r2, [r2, #0]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fda:	1dbb      	adds	r3, r7, #6
 8002fdc:	881c      	ldrh	r4, [r3, #0]
 8002fde:	2308      	movs	r3, #8
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	881a      	ldrh	r2, [r3, #0]
 8002fe4:	230a      	movs	r3, #10
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	8819      	ldrh	r1, [r3, #0]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	0023      	movs	r3, r4
 8002ff6:	f000 f9f9 	bl	80033ec <I2C_RequestMemoryWrite>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d005      	beq.n	800300a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2240      	movs	r2, #64	; 0x40
 8003002:	2100      	movs	r1, #0
 8003004:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0b5      	b.n	8003176 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	2bff      	cmp	r3, #255	; 0xff
 8003012:	d911      	bls.n	8003038 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	b2da      	uxtb	r2, r3
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	045c      	lsls	r4, r3, #17
 8003024:	230a      	movs	r3, #10
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	8819      	ldrh	r1, [r3, #0]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	2300      	movs	r3, #0
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	0023      	movs	r3, r4
 8003032:	f000 fc9b 	bl	800396c <I2C_TransferConfig>
 8003036:	e012      	b.n	800305e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	b2da      	uxtb	r2, r3
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	049c      	lsls	r4, r3, #18
 800304c:	230a      	movs	r3, #10
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	8819      	ldrh	r1, [r3, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	2300      	movs	r3, #0
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0023      	movs	r3, r4
 800305a:	f000 fc87 	bl	800396c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 faf7 	bl	8003658 <I2C_WaitOnTXISFlagUntilTimeout>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e081      	b.n	8003176 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d03a      	beq.n	8003122 <HAL_I2C_Mem_Write+0x1fa>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d136      	bne.n	8003122 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	0013      	movs	r3, r2
 80030be:	2200      	movs	r2, #0
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	f000 fa7b 	bl	80035bc <I2C_WaitOnFlagUntilTimeout>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e053      	b.n	8003176 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2bff      	cmp	r3, #255	; 0xff
 80030d6:	d911      	bls.n	80030fc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	22ff      	movs	r2, #255	; 0xff
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	045c      	lsls	r4, r3, #17
 80030e8:	230a      	movs	r3, #10
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	8819      	ldrh	r1, [r3, #0]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	2300      	movs	r3, #0
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	0023      	movs	r3, r4
 80030f6:	f000 fc39 	bl	800396c <I2C_TransferConfig>
 80030fa:	e012      	b.n	8003122 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	b2da      	uxtb	r2, r3
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	049c      	lsls	r4, r3, #18
 8003110:	230a      	movs	r3, #10
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	8819      	ldrh	r1, [r3, #0]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	2300      	movs	r3, #0
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	0023      	movs	r3, r4
 800311e:	f000 fc25 	bl	800396c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d198      	bne.n	800305e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	0018      	movs	r0, r3
 8003134:	f000 fad6 	bl	80036e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003138:	1e03      	subs	r3, r0, #0
 800313a:	d001      	beq.n	8003140 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e01a      	b.n	8003176 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2220      	movs	r2, #32
 8003146:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	490b      	ldr	r1, [pc, #44]	; (8003180 <HAL_I2C_Mem_Write+0x258>)
 8003154:	400a      	ands	r2, r1
 8003156:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2241      	movs	r2, #65	; 0x41
 800315c:	2120      	movs	r1, #32
 800315e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2242      	movs	r2, #66	; 0x42
 8003164:	2100      	movs	r1, #0
 8003166:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2240      	movs	r2, #64	; 0x40
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b007      	add	sp, #28
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	fe00e800 	.word	0xfe00e800

08003184 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	000c      	movs	r4, r1
 800318e:	0010      	movs	r0, r2
 8003190:	0019      	movs	r1, r3
 8003192:	230a      	movs	r3, #10
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	1c22      	adds	r2, r4, #0
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	2308      	movs	r3, #8
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	1c02      	adds	r2, r0, #0
 80031a0:	801a      	strh	r2, [r3, #0]
 80031a2:	1dbb      	adds	r3, r7, #6
 80031a4:	1c0a      	adds	r2, r1, #0
 80031a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2241      	movs	r2, #65	; 0x41
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d000      	beq.n	80031b6 <HAL_I2C_Mem_Read+0x32>
 80031b4:	e110      	b.n	80033d8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_I2C_Mem_Read+0x42>
 80031bc:	232c      	movs	r3, #44	; 0x2c
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	0092      	lsls	r2, r2, #2
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e103      	b.n	80033da <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2240      	movs	r2, #64	; 0x40
 80031d6:	5c9b      	ldrb	r3, [r3, r2]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_I2C_Mem_Read+0x5c>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0fc      	b.n	80033da <HAL_I2C_Mem_Read+0x256>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	2101      	movs	r1, #1
 80031e6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031e8:	f7fe fea8 	bl	8001f3c <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	0219      	lsls	r1, r3, #8
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	2319      	movs	r3, #25
 80031fc:	2201      	movs	r2, #1
 80031fe:	f000 f9dd 	bl	80035bc <I2C_WaitOnFlagUntilTimeout>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0e7      	b.n	80033da <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2241      	movs	r2, #65	; 0x41
 800320e:	2122      	movs	r1, #34	; 0x22
 8003210:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2242      	movs	r2, #66	; 0x42
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	222c      	movs	r2, #44	; 0x2c
 800322a:	18ba      	adds	r2, r7, r2
 800322c:	8812      	ldrh	r2, [r2, #0]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003236:	1dbb      	adds	r3, r7, #6
 8003238:	881c      	ldrh	r4, [r3, #0]
 800323a:	2308      	movs	r3, #8
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	230a      	movs	r3, #10
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	8819      	ldrh	r1, [r3, #0]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	0023      	movs	r3, r4
 8003252:	f000 f92f 	bl	80034b4 <I2C_RequestMemoryRead>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d005      	beq.n	8003266 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2240      	movs	r2, #64	; 0x40
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0b9      	b.n	80033da <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	2bff      	cmp	r3, #255	; 0xff
 800326e:	d911      	bls.n	8003294 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	22ff      	movs	r2, #255	; 0xff
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	b2da      	uxtb	r2, r3
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	045c      	lsls	r4, r3, #17
 8003280:	230a      	movs	r3, #10
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	8819      	ldrh	r1, [r3, #0]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	4b56      	ldr	r3, [pc, #344]	; (80033e4 <HAL_I2C_Mem_Read+0x260>)
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	0023      	movs	r3, r4
 800328e:	f000 fb6d 	bl	800396c <I2C_TransferConfig>
 8003292:	e012      	b.n	80032ba <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	049c      	lsls	r4, r3, #18
 80032a8:	230a      	movs	r3, #10
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	8819      	ldrh	r1, [r3, #0]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_I2C_Mem_Read+0x260>)
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	0023      	movs	r3, r4
 80032b6:	f000 fb59 	bl	800396c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	0013      	movs	r3, r2
 80032c4:	2200      	movs	r2, #0
 80032c6:	2104      	movs	r1, #4
 80032c8:	f000 f978 	bl	80035bc <I2C_WaitOnFlagUntilTimeout>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e082      	b.n	80033da <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03a      	beq.n	8003386 <HAL_I2C_Mem_Read+0x202>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d136      	bne.n	8003386 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	0013      	movs	r3, r2
 8003322:	2200      	movs	r2, #0
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	f000 f949 	bl	80035bc <I2C_WaitOnFlagUntilTimeout>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e053      	b.n	80033da <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	2bff      	cmp	r3, #255	; 0xff
 800333a:	d911      	bls.n	8003360 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	22ff      	movs	r2, #255	; 0xff
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	b2da      	uxtb	r2, r3
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	045c      	lsls	r4, r3, #17
 800334c:	230a      	movs	r3, #10
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	8819      	ldrh	r1, [r3, #0]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	0023      	movs	r3, r4
 800335a:	f000 fb07 	bl	800396c <I2C_TransferConfig>
 800335e:	e012      	b.n	8003386 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	b2da      	uxtb	r2, r3
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	049c      	lsls	r4, r3, #18
 8003374:	230a      	movs	r3, #10
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	8819      	ldrh	r1, [r3, #0]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	0023      	movs	r3, r4
 8003382:	f000 faf3 	bl	800396c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d194      	bne.n	80032ba <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 f9a4 	bl	80036e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e01a      	b.n	80033da <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2220      	movs	r2, #32
 80033aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	490c      	ldr	r1, [pc, #48]	; (80033e8 <HAL_I2C_Mem_Read+0x264>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2241      	movs	r2, #65	; 0x41
 80033c0:	2120      	movs	r1, #32
 80033c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2242      	movs	r2, #66	; 0x42
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2240      	movs	r2, #64	; 0x40
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b007      	add	sp, #28
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	80002400 	.word	0x80002400
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	000c      	movs	r4, r1
 80033f6:	0010      	movs	r0, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	250a      	movs	r5, #10
 80033fc:	197b      	adds	r3, r7, r5
 80033fe:	1c22      	adds	r2, r4, #0
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	2308      	movs	r3, #8
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	1c02      	adds	r2, r0, #0
 8003408:	801a      	strh	r2, [r3, #0]
 800340a:	1dbb      	adds	r3, r7, #6
 800340c:	1c0a      	adds	r2, r1, #0
 800340e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003410:	1dbb      	adds	r3, r7, #6
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	045c      	lsls	r4, r3, #17
 800341a:	197b      	adds	r3, r7, r5
 800341c:	8819      	ldrh	r1, [r3, #0]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <I2C_RequestMemoryWrite+0xc4>)
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	0023      	movs	r3, r4
 8003426:	f000 faa1 	bl	800396c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800342a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342c:	6a39      	ldr	r1, [r7, #32]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 f911 	bl	8003658 <I2C_WaitOnTXISFlagUntilTimeout>
 8003436:	1e03      	subs	r3, r0, #0
 8003438:	d001      	beq.n	800343e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e033      	b.n	80034a6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800343e:	1dbb      	adds	r3, r7, #6
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003446:	2308      	movs	r3, #8
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
 8003454:	e019      	b.n	800348a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003456:	2308      	movs	r3, #8
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	b29b      	uxth	r3, r3
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346a:	6a39      	ldr	r1, [r7, #32]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 f8f2 	bl	8003658 <I2C_WaitOnTXISFlagUntilTimeout>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d001      	beq.n	800347c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e014      	b.n	80034a6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800347c:	2308      	movs	r3, #8
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	0013      	movs	r3, r2
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	f000 f890 	bl	80035bc <I2C_WaitOnFlagUntilTimeout>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d001      	beq.n	80034a4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bdb0      	pop	{r4, r5, r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	80002000 	.word	0x80002000

080034b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80034b4:	b5b0      	push	{r4, r5, r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	000c      	movs	r4, r1
 80034be:	0010      	movs	r0, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	250a      	movs	r5, #10
 80034c4:	197b      	adds	r3, r7, r5
 80034c6:	1c22      	adds	r2, r4, #0
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	2308      	movs	r3, #8
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	1c02      	adds	r2, r0, #0
 80034d0:	801a      	strh	r2, [r3, #0]
 80034d2:	1dbb      	adds	r3, r7, #6
 80034d4:	1c0a      	adds	r2, r1, #0
 80034d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034d8:	1dbb      	adds	r3, r7, #6
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	197b      	adds	r3, r7, r5
 80034e0:	8819      	ldrh	r1, [r3, #0]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	4b23      	ldr	r3, [pc, #140]	; (8003574 <I2C_RequestMemoryRead+0xc0>)
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2300      	movs	r3, #0
 80034ea:	f000 fa3f 	bl	800396c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	6a39      	ldr	r1, [r7, #32]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 f8af 	bl	8003658 <I2C_WaitOnTXISFlagUntilTimeout>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e033      	b.n	800356a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003502:	1dbb      	adds	r3, r7, #6
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800350a:	2308      	movs	r3, #8
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
 8003518:	e019      	b.n	800354e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800351a:	2308      	movs	r3, #8
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	b29b      	uxth	r3, r3
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	6a39      	ldr	r1, [r7, #32]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	0018      	movs	r0, r3
 8003534:	f000 f890 	bl	8003658 <I2C_WaitOnTXISFlagUntilTimeout>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e014      	b.n	800356a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003540:	2308      	movs	r3, #8
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800354e:	6a3a      	ldr	r2, [r7, #32]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	0013      	movs	r3, r2
 8003558:	2200      	movs	r2, #0
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	f000 f82e 	bl	80035bc <I2C_WaitOnFlagUntilTimeout>
 8003560:	1e03      	subs	r3, r0, #0
 8003562:	d001      	beq.n	8003568 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b004      	add	sp, #16
 8003570:	bdb0      	pop	{r4, r5, r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	80002000 	.word	0x80002000

08003578 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2202      	movs	r2, #2
 8003588:	4013      	ands	r3, r2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d103      	bne.n	8003596 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2200      	movs	r2, #0
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2201      	movs	r2, #1
 800359e:	4013      	ands	r3, r2
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d007      	beq.n	80035b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2101      	movs	r1, #1
 80035b0:	430a      	orrs	r2, r1
 80035b2:	619a      	str	r2, [r3, #24]
  }
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035cc:	e030      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	d02d      	beq.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7fe fcb2 	bl	8001f3c <HAL_GetTick>
 80035d8:	0002      	movs	r2, r0
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d122      	bne.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	425a      	negs	r2, r3
 80035fa:	4153      	adcs	r3, r2
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	001a      	movs	r2, r3
 8003600:	1dfb      	adds	r3, r7, #7
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d113      	bne.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	2220      	movs	r2, #32
 800360e:	431a      	orrs	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2241      	movs	r2, #65	; 0x41
 8003618:	2120      	movs	r1, #32
 800361a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2242      	movs	r2, #66	; 0x42
 8003620:	2100      	movs	r1, #0
 8003622:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e00f      	b.n	8003650 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	425a      	negs	r2, r3
 8003640:	4153      	adcs	r3, r2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	001a      	movs	r2, r3
 8003646:	1dfb      	adds	r3, r7, #7
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d0bf      	beq.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003664:	e032      	b.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0018      	movs	r0, r3
 800366e:	f000 f87d 	bl	800376c <I2C_IsErrorOccurred>
 8003672:	1e03      	subs	r3, r0, #0
 8003674:	d001      	beq.n	800367a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e030      	b.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3301      	adds	r3, #1
 800367e:	d025      	beq.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003680:	f7fe fc5c 	bl	8001f3c <HAL_GetTick>
 8003684:	0002      	movs	r2, r0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d302      	bcc.n	8003696 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11a      	bne.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2202      	movs	r2, #2
 800369e:	4013      	ands	r3, r2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d013      	beq.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	2220      	movs	r2, #32
 80036aa:	431a      	orrs	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2241      	movs	r2, #65	; 0x41
 80036b4:	2120      	movs	r1, #32
 80036b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2242      	movs	r2, #66	; 0x42
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2240      	movs	r2, #64	; 0x40
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e007      	b.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2202      	movs	r2, #2
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d1c5      	bne.n	8003666 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f0:	e02f      	b.n	8003752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f000 f837 	bl	800376c <I2C_IsErrorOccurred>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d001      	beq.n	8003706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e02d      	b.n	8003762 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe fc19 	bl	8001f3c <HAL_GetTick>
 800370a:	0002      	movs	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d11a      	bne.n	8003752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2220      	movs	r2, #32
 8003724:	4013      	ands	r3, r2
 8003726:	2b20      	cmp	r3, #32
 8003728:	d013      	beq.n	8003752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	2220      	movs	r2, #32
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2241      	movs	r2, #65	; 0x41
 800373a:	2120      	movs	r1, #32
 800373c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2242      	movs	r2, #66	; 0x42
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2240      	movs	r2, #64	; 0x40
 800374a:	2100      	movs	r1, #0
 800374c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e007      	b.n	8003762 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2220      	movs	r2, #32
 800375a:	4013      	ands	r3, r2
 800375c:	2b20      	cmp	r3, #32
 800375e:	d1c8      	bne.n	80036f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b08b      	sub	sp, #44	; 0x2c
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2327      	movs	r3, #39	; 0x27
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2210      	movs	r2, #16
 8003794:	4013      	ands	r3, r2
 8003796:	d100      	bne.n	800379a <I2C_IsErrorOccurred+0x2e>
 8003798:	e082      	b.n	80038a0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2210      	movs	r2, #16
 80037a0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037a2:	e060      	b.n	8003866 <I2C_IsErrorOccurred+0xfa>
 80037a4:	2427      	movs	r4, #39	; 0x27
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	193a      	adds	r2, r7, r4
 80037aa:	7812      	ldrb	r2, [r2, #0]
 80037ac:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3301      	adds	r3, #1
 80037b2:	d058      	beq.n	8003866 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe fbc2 	bl	8001f3c <HAL_GetTick>
 80037b8:	0002      	movs	r2, r0
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d306      	bcc.n	80037d2 <I2C_IsErrorOccurred+0x66>
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	193a      	adds	r2, r7, r4
 80037c8:	7812      	ldrb	r2, [r2, #0]
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d149      	bne.n	8003866 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	01db      	lsls	r3, r3, #7
 80037dc:	4013      	ands	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037e0:	2013      	movs	r0, #19
 80037e2:	183b      	adds	r3, r7, r0
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	2142      	movs	r1, #66	; 0x42
 80037e8:	5c52      	ldrb	r2, [r2, r1]
 80037ea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	401a      	ands	r2, r3
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d126      	bne.n	800384e <I2C_IsErrorOccurred+0xe2>
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	01db      	lsls	r3, r3, #7
 8003806:	429a      	cmp	r2, r3
 8003808:	d021      	beq.n	800384e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800380a:	183b      	adds	r3, r7, r0
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b20      	cmp	r3, #32
 8003810:	d01d      	beq.n	800384e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2180      	movs	r1, #128	; 0x80
 800381e:	01c9      	lsls	r1, r1, #7
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003824:	f7fe fb8a 	bl	8001f3c <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382c:	e00f      	b.n	800384e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800382e:	f7fe fb85 	bl	8001f3c <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b19      	cmp	r3, #25
 800383a:	d908      	bls.n	800384e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	2220      	movs	r2, #32
 8003840:	4313      	orrs	r3, r2
 8003842:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003844:	2327      	movs	r3, #39	; 0x27
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]

              break;
 800384c:	e00b      	b.n	8003866 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2220      	movs	r2, #32
 8003856:	4013      	ands	r3, r2
 8003858:	2127      	movs	r1, #39	; 0x27
 800385a:	187a      	adds	r2, r7, r1
 800385c:	1879      	adds	r1, r7, r1
 800385e:	7809      	ldrb	r1, [r1, #0]
 8003860:	7011      	strb	r1, [r2, #0]
 8003862:	2b20      	cmp	r3, #32
 8003864:	d1e3      	bne.n	800382e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2220      	movs	r2, #32
 800386e:	4013      	ands	r3, r2
 8003870:	2b20      	cmp	r3, #32
 8003872:	d004      	beq.n	800387e <I2C_IsErrorOccurred+0x112>
 8003874:	2327      	movs	r3, #39	; 0x27
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d092      	beq.n	80037a4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800387e:	2327      	movs	r3, #39	; 0x27
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2220      	movs	r2, #32
 800388e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2204      	movs	r2, #4
 8003894:	4313      	orrs	r3, r2
 8003896:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003898:	2327      	movs	r3, #39	; 0x27
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	4013      	ands	r3, r2
 80038b0:	d00c      	beq.n	80038cc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4313      	orrs	r3, r2
 80038b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	0052      	lsls	r2, r2, #1
 80038c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038c4:	2327      	movs	r3, #39	; 0x27
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00c      	beq.n	80038f0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	2208      	movs	r2, #8
 80038da:	4313      	orrs	r3, r2
 80038dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2280      	movs	r2, #128	; 0x80
 80038e4:	00d2      	lsls	r2, r2, #3
 80038e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038e8:	2327      	movs	r3, #39	; 0x27
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00c      	beq.n	8003914 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2202      	movs	r2, #2
 80038fe:	4313      	orrs	r3, r2
 8003900:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	0092      	lsls	r2, r2, #2
 800390a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800390c:	2327      	movs	r3, #39	; 0x27
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003914:	2327      	movs	r3, #39	; 0x27
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01d      	beq.n	800395a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0018      	movs	r0, r3
 8003922:	f7ff fe29 	bl	8003578 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	490d      	ldr	r1, [pc, #52]	; (8003968 <I2C_IsErrorOccurred+0x1fc>)
 8003932:	400a      	ands	r2, r1
 8003934:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	431a      	orrs	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2241      	movs	r2, #65	; 0x41
 8003946:	2120      	movs	r1, #32
 8003948:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2242      	movs	r2, #66	; 0x42
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2240      	movs	r2, #64	; 0x40
 8003956:	2100      	movs	r1, #0
 8003958:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800395a:	2327      	movs	r3, #39	; 0x27
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	781b      	ldrb	r3, [r3, #0]
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b00b      	add	sp, #44	; 0x2c
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	fe00e800 	.word	0xfe00e800

0800396c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800396c:	b590      	push	{r4, r7, lr}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	0008      	movs	r0, r1
 8003976:	0011      	movs	r1, r2
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	240a      	movs	r4, #10
 800397c:	193b      	adds	r3, r7, r4
 800397e:	1c02      	adds	r2, r0, #0
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	2009      	movs	r0, #9
 8003984:	183b      	adds	r3, r7, r0
 8003986:	1c0a      	adds	r2, r1, #0
 8003988:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800398a:	193b      	adds	r3, r7, r4
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	059b      	lsls	r3, r3, #22
 8003990:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003992:	183b      	adds	r3, r7, r0
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	0419      	lsls	r1, r3, #16
 8003998:	23ff      	movs	r3, #255	; 0xff
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800399e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	4313      	orrs	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b6:	0d51      	lsrs	r1, r2, #21
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	00d2      	lsls	r2, r2, #3
 80039bc:	400a      	ands	r2, r1
 80039be:	4907      	ldr	r1, [pc, #28]	; (80039dc <I2C_TransferConfig+0x70>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	43d2      	mvns	r2, r2
 80039c4:	401a      	ands	r2, r3
 80039c6:	0011      	movs	r1, r2
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b007      	add	sp, #28
 80039d8:	bd90      	pop	{r4, r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	03ff63ff 	.word	0x03ff63ff

080039e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2241      	movs	r2, #65	; 0x41
 80039ee:	5c9b      	ldrb	r3, [r3, r2]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d138      	bne.n	8003a68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	5c9b      	ldrb	r3, [r3, r2]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e032      	b.n	8003a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2240      	movs	r2, #64	; 0x40
 8003a08:	2101      	movs	r1, #1
 8003a0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2241      	movs	r2, #65	; 0x41
 8003a10:	2124      	movs	r1, #36	; 0x24
 8003a12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	438a      	bics	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4911      	ldr	r1, [pc, #68]	; (8003a74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2101      	movs	r1, #1
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2241      	movs	r2, #65	; 0x41
 8003a58:	2120      	movs	r1, #32
 8003a5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2240      	movs	r2, #64	; 0x40
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b002      	add	sp, #8
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	ffffefff 	.word	0xffffefff

08003a78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2241      	movs	r2, #65	; 0x41
 8003a86:	5c9b      	ldrb	r3, [r3, r2]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d139      	bne.n	8003b02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2240      	movs	r2, #64	; 0x40
 8003a92:	5c9b      	ldrb	r3, [r3, r2]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e033      	b.n	8003b04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2240      	movs	r2, #64	; 0x40
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2241      	movs	r2, #65	; 0x41
 8003aa8:	2124      	movs	r1, #36	; 0x24
 8003aaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	438a      	bics	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2241      	movs	r2, #65	; 0x41
 8003af2:	2120      	movs	r1, #32
 8003af4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2240      	movs	r2, #64	; 0x40
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	fffff0ff 	.word	0xfffff0ff

08003b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e301      	b.n	8004126 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2201      	movs	r2, #1
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <HAL_RCC_OscConfig+0x1e>
 8003b2c:	e08d      	b.n	8003c4a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b2e:	4bc3      	ldr	r3, [pc, #780]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	220c      	movs	r2, #12
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d00e      	beq.n	8003b58 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b3a:	4bc0      	ldr	r3, [pc, #768]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	220c      	movs	r2, #12
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x64>
 8003b46:	4bbd      	ldr	r3, [pc, #756]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	025b      	lsls	r3, r3, #9
 8003b4e:	401a      	ands	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	025b      	lsls	r3, r3, #9
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	4bb8      	ldr	r3, [pc, #736]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	4013      	ands	r3, r2
 8003b62:	d100      	bne.n	8003b66 <HAL_RCC_OscConfig+0x56>
 8003b64:	e070      	b.n	8003c48 <HAL_RCC_OscConfig+0x138>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d000      	beq.n	8003b70 <HAL_RCC_OscConfig+0x60>
 8003b6e:	e06b      	b.n	8003c48 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e2d8      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_OscConfig+0x7c>
 8003b7c:	4baf      	ldr	r3, [pc, #700]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4bae      	ldr	r3, [pc, #696]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	0249      	lsls	r1, r1, #9
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e02f      	b.n	8003bec <HAL_RCC_OscConfig+0xdc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <HAL_RCC_OscConfig+0x9e>
 8003b94:	4ba9      	ldr	r3, [pc, #676]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4ba8      	ldr	r3, [pc, #672]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	49a9      	ldr	r1, [pc, #676]	; (8003e40 <HAL_RCC_OscConfig+0x330>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	4ba6      	ldr	r3, [pc, #664]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4ba5      	ldr	r3, [pc, #660]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	49a7      	ldr	r1, [pc, #668]	; (8003e44 <HAL_RCC_OscConfig+0x334>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e01e      	b.n	8003bec <HAL_RCC_OscConfig+0xdc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xc4>
 8003bb6:	4ba1      	ldr	r3, [pc, #644]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4ba0      	ldr	r3, [pc, #640]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	02c9      	lsls	r1, r1, #11
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	4b9d      	ldr	r3, [pc, #628]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b9c      	ldr	r3, [pc, #624]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	0249      	lsls	r1, r1, #9
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xdc>
 8003bd4:	4b99      	ldr	r3, [pc, #612]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b98      	ldr	r3, [pc, #608]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003bda:	4999      	ldr	r1, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x330>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	4b96      	ldr	r3, [pc, #600]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b95      	ldr	r3, [pc, #596]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003be6:	4997      	ldr	r1, [pc, #604]	; (8003e44 <HAL_RCC_OscConfig+0x334>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d014      	beq.n	8003c1e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe f9a2 	bl	8001f3c <HAL_GetTick>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfe:	f7fe f99d 	bl	8001f3c <HAL_GetTick>
 8003c02:	0002      	movs	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b64      	cmp	r3, #100	; 0x64
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e28a      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c10:	4b8a      	ldr	r3, [pc, #552]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0xee>
 8003c1c:	e015      	b.n	8003c4a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fe f98d 	bl	8001f3c <HAL_GetTick>
 8003c22:	0003      	movs	r3, r0
 8003c24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fe f988 	bl	8001f3c <HAL_GetTick>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e275      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b80      	ldr	r3, [pc, #512]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	4013      	ands	r3, r2
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x118>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	4013      	ands	r3, r2
 8003c52:	d100      	bne.n	8003c56 <HAL_RCC_OscConfig+0x146>
 8003c54:	e069      	b.n	8003d2a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c56:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	220c      	movs	r2, #12
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c60:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	220c      	movs	r2, #12
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d11c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x196>
 8003c6c:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	025b      	lsls	r3, r3, #9
 8003c74:	4013      	ands	r3, r2
 8003c76:	d116      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c78:	4b70      	ldr	r3, [pc, #448]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e24b      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b6b      	ldr	r3, [pc, #428]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	22f8      	movs	r2, #248	; 0xf8
 8003c94:	4393      	bics	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	00da      	lsls	r2, r3, #3
 8003c9e:	4b67      	ldr	r3, [pc, #412]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca4:	e041      	b.n	8003d2a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d024      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cae:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b62      	ldr	r3, [pc, #392]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cba:	f7fe f93f 	bl	8001f3c <HAL_GetTick>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fe f93a 	bl	8001f3c <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e227      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d0f1      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce0:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	22f8      	movs	r2, #248	; 0xf8
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00da      	lsls	r2, r3, #3
 8003cf0:	4b52      	ldr	r3, [pc, #328]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e018      	b.n	8003d2a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	438a      	bics	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe f91a 	bl	8001f3c <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fe f915 	bl	8001f3c <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e202      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d20:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2202      	movs	r2, #2
 8003d26:	4013      	ands	r3, r2
 8003d28:	d1f1      	bne.n	8003d0e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	4013      	ands	r3, r2
 8003d32:	d036      	beq.n	8003da2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d019      	beq.n	8003d70 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3c:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d40:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d42:	2101      	movs	r1, #1
 8003d44:	430a      	orrs	r2, r1
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d48:	f7fe f8f8 	bl	8001f3c <HAL_GetTick>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d52:	f7fe f8f3 	bl	8001f3c <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1e0      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d64:	4b35      	ldr	r3, [pc, #212]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	2202      	movs	r2, #2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d0f1      	beq.n	8003d52 <HAL_RCC_OscConfig+0x242>
 8003d6e:	e018      	b.n	8003da2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d70:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d74:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d76:	2101      	movs	r1, #1
 8003d78:	438a      	bics	r2, r1
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fe f8de 	bl	8001f3c <HAL_GetTick>
 8003d80:	0003      	movs	r3, r0
 8003d82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d86:	f7fe f8d9 	bl	8001f3c <HAL_GetTick>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e1c6      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d1f1      	bne.n	8003d86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2204      	movs	r2, #4
 8003da8:	4013      	ands	r3, r2
 8003daa:	d100      	bne.n	8003dae <HAL_RCC_OscConfig+0x29e>
 8003dac:	e0b4      	b.n	8003f18 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	201f      	movs	r0, #31
 8003db0:	183b      	adds	r3, r7, r0
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	055b      	lsls	r3, r3, #21
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d110      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0549      	lsls	r1, r1, #21
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	055b      	lsls	r3, r3, #21
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dde:	183b      	adds	r3, r7, r0
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <HAL_RCC_OscConfig+0x338>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4013      	ands	r3, r2
 8003dee:	d11a      	bne.n	8003e26 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_RCC_OscConfig+0x338>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <HAL_RCC_OscConfig+0x338>)
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	0049      	lsls	r1, r1, #1
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfe:	f7fe f89d 	bl	8001f3c <HAL_GetTick>
 8003e02:	0003      	movs	r3, r0
 8003e04:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e08:	f7fe f898 	bl	8001f3c <HAL_GetTick>
 8003e0c:	0002      	movs	r2, r0
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e185      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_OscConfig+0x338>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10e      	bne.n	8003e4c <HAL_RCC_OscConfig+0x33c>
 8003e2e:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	4b02      	ldr	r3, [pc, #8]	; (8003e3c <HAL_RCC_OscConfig+0x32c>)
 8003e34:	2101      	movs	r1, #1
 8003e36:	430a      	orrs	r2, r1
 8003e38:	621a      	str	r2, [r3, #32]
 8003e3a:	e035      	b.n	8003ea8 <HAL_RCC_OscConfig+0x398>
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	fffeffff 	.word	0xfffeffff
 8003e44:	fffbffff 	.word	0xfffbffff
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x35e>
 8003e54:	4bb6      	ldr	r3, [pc, #728]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	4bb5      	ldr	r3, [pc, #724]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	621a      	str	r2, [r3, #32]
 8003e60:	4bb3      	ldr	r3, [pc, #716]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	4bb2      	ldr	r3, [pc, #712]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e66:	2104      	movs	r1, #4
 8003e68:	438a      	bics	r2, r1
 8003e6a:	621a      	str	r2, [r3, #32]
 8003e6c:	e01c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x398>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x380>
 8003e76:	4bae      	ldr	r3, [pc, #696]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	4bad      	ldr	r3, [pc, #692]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	621a      	str	r2, [r3, #32]
 8003e82:	4bab      	ldr	r3, [pc, #684]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	4baa      	ldr	r3, [pc, #680]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e88:	2101      	movs	r1, #1
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	621a      	str	r2, [r3, #32]
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x398>
 8003e90:	4ba7      	ldr	r3, [pc, #668]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	4ba6      	ldr	r3, [pc, #664]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e96:	2101      	movs	r1, #1
 8003e98:	438a      	bics	r2, r1
 8003e9a:	621a      	str	r2, [r3, #32]
 8003e9c:	4ba4      	ldr	r3, [pc, #656]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	4ba3      	ldr	r3, [pc, #652]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d014      	beq.n	8003eda <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb0:	f7fe f844 	bl	8001f3c <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb8:	e009      	b.n	8003ece <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fe f83f 	bl	8001f3c <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	4a9b      	ldr	r2, [pc, #620]	; (8004134 <HAL_RCC_OscConfig+0x624>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e12b      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ece:	4b98      	ldr	r3, [pc, #608]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x3aa>
 8003ed8:	e013      	b.n	8003f02 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fe f82f 	bl	8001f3c <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee2:	e009      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe f82a 	bl	8001f3c <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	4a91      	ldr	r2, [pc, #580]	; (8004134 <HAL_RCC_OscConfig+0x624>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e116      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	4b8d      	ldr	r3, [pc, #564]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	2202      	movs	r2, #2
 8003efe:	4013      	ands	r3, r2
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f02:	231f      	movs	r3, #31
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	4b87      	ldr	r3, [pc, #540]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f12:	4989      	ldr	r1, [pc, #548]	; (8004138 <HAL_RCC_OscConfig+0x628>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d063      	beq.n	8003fea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d12a      	bne.n	8003f80 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f2a:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2e:	4b80      	ldr	r3, [pc, #512]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f30:	2104      	movs	r1, #4
 8003f32:	430a      	orrs	r2, r1
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f36:	4b7e      	ldr	r3, [pc, #504]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fd fffb 	bl	8001f3c <HAL_GetTick>
 8003f46:	0003      	movs	r3, r0
 8003f48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f4c:	f7fd fff6 	bl	8001f3c <HAL_GetTick>
 8003f50:	0002      	movs	r2, r0
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e0e3      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f5e:	4b74      	ldr	r3, [pc, #464]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f62:	2202      	movs	r2, #2
 8003f64:	4013      	ands	r3, r2
 8003f66:	d0f1      	beq.n	8003f4c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f68:	4b71      	ldr	r3, [pc, #452]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	22f8      	movs	r2, #248	; 0xf8
 8003f6e:	4393      	bics	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	00da      	lsls	r2, r3, #3
 8003f78:	4b6d      	ldr	r3, [pc, #436]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f7e:	e034      	b.n	8003fea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	3305      	adds	r3, #5
 8003f86:	d111      	bne.n	8003fac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f88:	4b69      	ldr	r3, [pc, #420]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f8e:	2104      	movs	r1, #4
 8003f90:	438a      	bics	r2, r1
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f94:	4b66      	ldr	r3, [pc, #408]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	22f8      	movs	r2, #248	; 0xf8
 8003f9a:	4393      	bics	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	00da      	lsls	r2, r3, #3
 8003fa4:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8003faa:	e01e      	b.n	8003fea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fac:	4b60      	ldr	r3, [pc, #384]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb0:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fb2:	2104      	movs	r1, #4
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003fb8:	4b5d      	ldr	r3, [pc, #372]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbc:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc4:	f7fd ffba 	bl	8001f3c <HAL_GetTick>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fce:	f7fd ffb5 	bl	8001f3c <HAL_GetTick>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0a2      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fe0:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d1f1      	bne.n	8003fce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d100      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4e4>
 8003ff2:	e097      	b.n	8004124 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff4:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	220c      	movs	r2, #12
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d100      	bne.n	8004002 <HAL_RCC_OscConfig+0x4f2>
 8004000:	e06b      	b.n	80040da <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d14c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b48      	ldr	r3, [pc, #288]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004010:	494a      	ldr	r1, [pc, #296]	; (800413c <HAL_RCC_OscConfig+0x62c>)
 8004012:	400a      	ands	r2, r1
 8004014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fd ff91 	bl	8001f3c <HAL_GetTick>
 800401a:	0003      	movs	r3, r0
 800401c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd ff8c 	bl	8001f3c <HAL_GetTick>
 8004024:	0002      	movs	r2, r0
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e079      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	049b      	lsls	r3, r3, #18
 800403a:	4013      	ands	r3, r2
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800403e:	4b3c      	ldr	r3, [pc, #240]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	220f      	movs	r2, #15
 8004044:	4393      	bics	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 800404e:	430a      	orrs	r2, r1
 8004050:	62da      	str	r2, [r3, #44]	; 0x2c
 8004052:	4b37      	ldr	r3, [pc, #220]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a3a      	ldr	r2, [pc, #232]	; (8004140 <HAL_RCC_OscConfig+0x630>)
 8004058:	4013      	ands	r3, r2
 800405a:	0019      	movs	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	431a      	orrs	r2, r3
 8004066:	4b32      	ldr	r3, [pc, #200]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800406c:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004072:	2180      	movs	r1, #128	; 0x80
 8004074:	0449      	lsls	r1, r1, #17
 8004076:	430a      	orrs	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fd ff5f 	bl	8001f3c <HAL_GetTick>
 800407e:	0003      	movs	r3, r0
 8004080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd ff5a 	bl	8001f3c <HAL_GetTick>
 8004088:	0002      	movs	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e047      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	049b      	lsls	r3, r3, #18
 800409e:	4013      	ands	r3, r2
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x574>
 80040a2:	e03f      	b.n	8004124 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040aa:	4924      	ldr	r1, [pc, #144]	; (800413c <HAL_RCC_OscConfig+0x62c>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fd ff44 	bl	8001f3c <HAL_GetTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fd ff3f 	bl	8001f3c <HAL_GetTick>
 80040be:	0002      	movs	r2, r0
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e02c      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	049b      	lsls	r3, r3, #18
 80040d4:	4013      	ands	r3, r2
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x5aa>
 80040d8:	e024      	b.n	8004124 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e01f      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_RCC_OscConfig+0x620>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	025b      	lsls	r3, r3, #9
 80040f8:	401a      	ands	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	429a      	cmp	r2, r3
 8004100:	d10e      	bne.n	8004120 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	220f      	movs	r2, #15
 8004106:	401a      	ands	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	23f0      	movs	r3, #240	; 0xf0
 8004114:	039b      	lsls	r3, r3, #14
 8004116:	401a      	ands	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b008      	add	sp, #32
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	40021000 	.word	0x40021000
 8004134:	00001388 	.word	0x00001388
 8004138:	efffffff 	.word	0xefffffff
 800413c:	feffffff 	.word	0xfeffffff
 8004140:	ffc2ffff 	.word	0xffc2ffff

08004144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0b3      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b5b      	ldr	r3, [pc, #364]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	4013      	ands	r3, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d911      	bls.n	800418a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b58      	ldr	r3, [pc, #352]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2201      	movs	r2, #1
 800416c:	4393      	bics	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	4b55      	ldr	r3, [pc, #340]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2201      	movs	r2, #1
 800417e:	4013      	ands	r3, r2
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d001      	beq.n	800418a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e09a      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2202      	movs	r2, #2
 8004190:	4013      	ands	r3, r2
 8004192:	d015      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2204      	movs	r2, #4
 800419a:	4013      	ands	r3, r2
 800419c:	d006      	beq.n	80041ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800419e:	4b4b      	ldr	r3, [pc, #300]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	4b4a      	ldr	r3, [pc, #296]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041a4:	21e0      	movs	r1, #224	; 0xe0
 80041a6:	00c9      	lsls	r1, r1, #3
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b47      	ldr	r3, [pc, #284]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	22f0      	movs	r2, #240	; 0xf0
 80041b2:	4393      	bics	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	4b44      	ldr	r3, [pc, #272]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	d040      	beq.n	800424c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b3e      	ldr	r3, [pc, #248]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	029b      	lsls	r3, r3, #10
 80041da:	4013      	ands	r3, r2
 80041dc:	d114      	bne.n	8004208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06e      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	049b      	lsls	r3, r3, #18
 80041f2:	4013      	ands	r3, r2
 80041f4:	d108      	bne.n	8004208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e062      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2202      	movs	r2, #2
 8004200:	4013      	ands	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e05b      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004208:	4b30      	ldr	r3, [pc, #192]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2203      	movs	r2, #3
 800420e:	4393      	bics	r3, r2
 8004210:	0019      	movs	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800421c:	f7fd fe8e 	bl	8001f3c <HAL_GetTick>
 8004220:	0003      	movs	r3, r0
 8004222:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004224:	e009      	b.n	800423a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004226:	f7fd fe89 	bl	8001f3c <HAL_GetTick>
 800422a:	0002      	movs	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <HAL_RCC_ClockConfig+0x18c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e042      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	220c      	movs	r2, #12
 8004240:	401a      	ands	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1ec      	bne.n	8004226 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	4013      	ands	r3, r2
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d211      	bcs.n	800427e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2201      	movs	r2, #1
 8004260:	4393      	bics	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <HAL_RCC_ClockConfig+0x184>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	4013      	ands	r3, r2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d001      	beq.n	800427e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e020      	b.n	80042c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2204      	movs	r2, #4
 8004284:	4013      	ands	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b10      	ldr	r3, [pc, #64]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <HAL_RCC_ClockConfig+0x190>)
 800428e:	4013      	ands	r3, r2
 8004290:	0019      	movs	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800429c:	f000 f820 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80042a0:	0001      	movs	r1, r0
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x188>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	220f      	movs	r2, #15
 80042aa:	4013      	ands	r3, r2
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <HAL_RCC_ClockConfig+0x194>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	000a      	movs	r2, r1
 80042b2:	40da      	lsrs	r2, r3
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCC_ClockConfig+0x198>)
 80042b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042b8:	2003      	movs	r0, #3
 80042ba:	f7fd fdf9 	bl	8001eb0 <HAL_InitTick>
  
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b004      	add	sp, #16
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40022000 	.word	0x40022000
 80042cc:	40021000 	.word	0x40021000
 80042d0:	00001388 	.word	0x00001388
 80042d4:	fffff8ff 	.word	0xfffff8ff
 80042d8:	080066a4 	.word	0x080066a4
 80042dc:	20000008 	.word	0x20000008

080042e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_GetSysClockFreq+0x9c>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	220c      	movs	r2, #12
 8004304:	4013      	ands	r3, r2
 8004306:	2b04      	cmp	r3, #4
 8004308:	d002      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x30>
 800430a:	2b08      	cmp	r3, #8
 800430c:	d003      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x36>
 800430e:	e02c      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004312:	613b      	str	r3, [r7, #16]
      break;
 8004314:	e02c      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	0c9b      	lsrs	r3, r3, #18
 800431a:	220f      	movs	r2, #15
 800431c:	4013      	ands	r3, r2
 800431e:	4a19      	ldr	r2, [pc, #100]	; (8004384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004320:	5cd3      	ldrb	r3, [r2, r3]
 8004322:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004324:	4b15      	ldr	r3, [pc, #84]	; (800437c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	220f      	movs	r2, #15
 800432a:	4013      	ands	r3, r2
 800432c:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_RCC_GetSysClockFreq+0xa8>)
 800432e:	5cd3      	ldrb	r3, [r2, r3]
 8004330:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	025b      	lsls	r3, r3, #9
 8004338:	4013      	ands	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	4810      	ldr	r0, [pc, #64]	; (8004380 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004340:	f7fb fef4 	bl	800012c <__udivsi3>
 8004344:	0003      	movs	r3, r0
 8004346:	001a      	movs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4353      	muls	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e009      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	000a      	movs	r2, r1
 8004354:	0152      	lsls	r2, r2, #5
 8004356:	1a52      	subs	r2, r2, r1
 8004358:	0193      	lsls	r3, r2, #6
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	185b      	adds	r3, r3, r1
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	613b      	str	r3, [r7, #16]
      break;
 8004368:	e002      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800436c:	613b      	str	r3, [r7, #16]
      break;
 800436e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004370:	693b      	ldr	r3, [r7, #16]
}
 8004372:	0018      	movs	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	b006      	add	sp, #24
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	40021000 	.word	0x40021000
 8004380:	007a1200 	.word	0x007a1200
 8004384:	080066bc 	.word	0x080066bc
 8004388:	080066cc 	.word	0x080066cc

0800438c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004390:	4b02      	ldr	r3, [pc, #8]	; (800439c <HAL_RCC_GetHCLKFreq+0x10>)
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	20000008 	.word	0x20000008

080043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80043a4:	f7ff fff2 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043a8:	0001      	movs	r1, r0
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	2207      	movs	r2, #7
 80043b2:	4013      	ands	r3, r2
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043b6:	5cd3      	ldrb	r3, [r2, r3]
 80043b8:	40d9      	lsrs	r1, r3
 80043ba:	000b      	movs	r3, r1
}    
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	40021000 	.word	0x40021000
 80043c8:	080066b4 	.word	0x080066b4

080043cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	025b      	lsls	r3, r3, #9
 80043e4:	4013      	ands	r3, r2
 80043e6:	d100      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80043e8:	e08e      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2017      	movs	r0, #23
 80043ec:	183b      	adds	r3, r7, r0
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f2:	4b5f      	ldr	r3, [pc, #380]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	055b      	lsls	r3, r3, #21
 80043fa:	4013      	ands	r3, r2
 80043fc:	d110      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043fe:	4b5c      	ldr	r3, [pc, #368]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	4b5b      	ldr	r3, [pc, #364]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004404:	2180      	movs	r1, #128	; 0x80
 8004406:	0549      	lsls	r1, r1, #21
 8004408:	430a      	orrs	r2, r1
 800440a:	61da      	str	r2, [r3, #28]
 800440c:	4b58      	ldr	r3, [pc, #352]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	055b      	lsls	r3, r3, #21
 8004414:	4013      	ands	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441a:	183b      	adds	r3, r7, r0
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	4b54      	ldr	r3, [pc, #336]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4013      	ands	r3, r2
 800442a:	d11a      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800442c:	4b51      	ldr	r3, [pc, #324]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	0049      	lsls	r1, r1, #1
 8004436:	430a      	orrs	r2, r1
 8004438:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443a:	f7fd fd7f 	bl	8001f3c <HAL_GetTick>
 800443e:	0003      	movs	r3, r0
 8004440:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004442:	e008      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004444:	f7fd fd7a 	bl	8001f3c <HAL_GetTick>
 8004448:	0002      	movs	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e087      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4013      	ands	r3, r2
 8004460:	d0f0      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004462:	4b43      	ldr	r3, [pc, #268]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	23c0      	movs	r3, #192	; 0xc0
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4013      	ands	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d034      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	23c0      	movs	r3, #192	; 0xc0
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4013      	ands	r3, r2
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	429a      	cmp	r2, r3
 8004482:	d02c      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004484:	4b3a      	ldr	r3, [pc, #232]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4a3b      	ldr	r2, [pc, #236]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448a:	4013      	ands	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800448e:	4b38      	ldr	r3, [pc, #224]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	4b37      	ldr	r3, [pc, #220]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	0249      	lsls	r1, r1, #9
 8004498:	430a      	orrs	r2, r1
 800449a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800449c:	4b34      	ldr	r3, [pc, #208]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044a2:	4936      	ldr	r1, [pc, #216]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044a8:	4b31      	ldr	r3, [pc, #196]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	4013      	ands	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fd fd41 	bl	8001f3c <HAL_GetTick>
 80044ba:	0003      	movs	r3, r0
 80044bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	e009      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7fd fd3c 	bl	8001f3c <HAL_GetTick>
 80044c4:	0002      	movs	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e048      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	2202      	movs	r2, #2
 80044da:	4013      	ands	r3, r2
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4a25      	ldr	r2, [pc, #148]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044ee:	430a      	orrs	r2, r1
 80044f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044f2:	2317      	movs	r3, #23
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004502:	4920      	ldr	r1, [pc, #128]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004504:	400a      	ands	r2, r1
 8004506:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	2203      	movs	r2, #3
 8004518:	4393      	bics	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4b13      	ldr	r3, [pc, #76]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004522:	430a      	orrs	r2, r1
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2220      	movs	r2, #32
 800452c:	4013      	ands	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	2210      	movs	r2, #16
 8004536:	4393      	bics	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004540:	430a      	orrs	r2, r1
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4013      	ands	r3, r2
 800454e:	d009      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	2240      	movs	r2, #64	; 0x40
 8004556:	4393      	bics	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004560:	430a      	orrs	r2, r1
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b006      	add	sp, #24
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
 8004578:	fffffcff 	.word	0xfffffcff
 800457c:	fffeffff 	.word	0xfffeffff
 8004580:	00001388 	.word	0x00001388
 8004584:	efffffff 	.word	0xefffffff

08004588 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004588:	b5b0      	push	{r4, r5, r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004590:	230f      	movs	r3, #15
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e081      	b.n	80046a6 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7f5b      	ldrb	r3, [r3, #29]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7fd fad5 	bl	8001b64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2210      	movs	r2, #16
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d05c      	beq.n	8004688 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	22ca      	movs	r2, #202	; 0xca
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2253      	movs	r2, #83	; 0x53
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80045de:	250f      	movs	r5, #15
 80045e0:	197c      	adds	r4, r7, r5
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 fa73 	bl	8004ad0 <RTC_EnterInitMode>
 80045ea:	0003      	movs	r3, r0
 80045ec:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80045ee:	0028      	movs	r0, r5
 80045f0:	183b      	adds	r3, r7, r0
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d12c      	bne.n	8004652 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	492b      	ldr	r1, [pc, #172]	; (80046b0 <HAL_RTC_Init+0x128>)
 8004604:	400a      	ands	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6919      	ldr	r1, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	041a      	lsls	r2, r3, #16
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004644:	183c      	adds	r4, r7, r0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0018      	movs	r0, r3
 800464a:	f000 fa84 	bl	8004b56 <RTC_ExitInitMode>
 800464e:	0003      	movs	r3, r0
 8004650:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004652:	230f      	movs	r3, #15
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d110      	bne.n	800467e <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4913      	ldr	r1, [pc, #76]	; (80046b4 <HAL_RTC_Init+0x12c>)
 8004668:	400a      	ands	r2, r1
 800466a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	22ff      	movs	r2, #255	; 0xff
 8004684:	625a      	str	r2, [r3, #36]	; 0x24
 8004686:	e003      	b.n	8004690 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004688:	230f      	movs	r3, #15
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004690:	230f      	movs	r3, #15
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	781b      	ldrb	r3, [r3, #0]
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b004      	add	sp, #16
 80046ac:	bdb0      	pop	{r4, r5, r7, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	ff8fffbf 	.word	0xff8fffbf
 80046b4:	fffbffff 	.word	0xfffbffff

080046b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046b8:	b5b0      	push	{r4, r5, r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	7f1b      	ldrb	r3, [r3, #28]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_RTC_SetTime+0x1c>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e08e      	b.n	80047f2 <HAL_RTC_SetTime+0x13a>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d125      	bne.n	8004732 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	4013      	ands	r3, r2
 80046f0:	d102      	bne.n	80046f8 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2200      	movs	r2, #0
 80046f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 fa53 	bl	8004ba8 <RTC_ByteToBcd2>
 8004702:	0003      	movs	r3, r0
 8004704:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	0018      	movs	r0, r3
 800470c:	f000 fa4c 	bl	8004ba8 <RTC_ByteToBcd2>
 8004710:	0003      	movs	r3, r0
 8004712:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004714:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	789b      	ldrb	r3, [r3, #2]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 fa44 	bl	8004ba8 <RTC_ByteToBcd2>
 8004720:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004722:	0022      	movs	r2, r4
 8004724:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	78db      	ldrb	r3, [r3, #3]
 800472a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e017      	b.n	8004762 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2240      	movs	r2, #64	; 0x40
 800473a:	4013      	ands	r3, r2
 800473c:	d102      	bne.n	8004744 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2200      	movs	r2, #0
 8004742:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	785b      	ldrb	r3, [r3, #1]
 800474e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004750:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004756:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	78db      	ldrb	r3, [r3, #3]
 800475c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	22ca      	movs	r2, #202	; 0xca
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2253      	movs	r2, #83	; 0x53
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004772:	2513      	movs	r5, #19
 8004774:	197c      	adds	r4, r7, r5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f9a9 	bl	8004ad0 <RTC_EnterInitMode>
 800477e:	0003      	movs	r3, r0
 8004780:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004782:	0028      	movs	r0, r5
 8004784:	183b      	adds	r3, r7, r0
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d120      	bne.n	80047ce <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	491a      	ldr	r1, [pc, #104]	; (80047fc <HAL_RTC_SetTime+0x144>)
 8004794:	400a      	ands	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4917      	ldr	r1, [pc, #92]	; (8004800 <HAL_RTC_SetTime+0x148>)
 80047a4:	400a      	ands	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047c0:	183c      	adds	r4, r7, r0
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 f9c6 	bl	8004b56 <RTC_ExitInitMode>
 80047ca:	0003      	movs	r3, r0
 80047cc:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80047ce:	2313      	movs	r3, #19
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	22ff      	movs	r2, #255	; 0xff
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]

  return status;
 80047ec:	2313      	movs	r3, #19
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	781b      	ldrb	r3, [r3, #0]
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b006      	add	sp, #24
 80047f8:	bdb0      	pop	{r4, r5, r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	007f7f7f 	.word	0x007f7f7f
 8004800:	fffbffff 	.word	0xfffbffff

08004804 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	045b      	lsls	r3, r3, #17
 8004826:	0c5a      	lsrs	r2, r3, #17
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a22      	ldr	r2, [pc, #136]	; (80048bc <HAL_RTC_GetTime+0xb8>)
 8004834:	4013      	ands	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	b2db      	uxtb	r3, r3
 800483e:	223f      	movs	r2, #63	; 0x3f
 8004840:	4013      	ands	r3, r2
 8004842:	b2da      	uxtb	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	b2db      	uxtb	r3, r3
 800484e:	227f      	movs	r2, #127	; 0x7f
 8004850:	4013      	ands	r3, r2
 8004852:	b2da      	uxtb	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	227f      	movs	r2, #127	; 0x7f
 800485e:	4013      	ands	r3, r2
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	0d9b      	lsrs	r3, r3, #22
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2201      	movs	r2, #1
 800486e:	4013      	ands	r3, r2
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11a      	bne.n	80048b2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 f9b2 	bl	8004bea <RTC_Bcd2ToByte>
 8004886:	0003      	movs	r3, r0
 8004888:	001a      	movs	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	785b      	ldrb	r3, [r3, #1]
 8004892:	0018      	movs	r0, r3
 8004894:	f000 f9a9 	bl	8004bea <RTC_Bcd2ToByte>
 8004898:	0003      	movs	r3, r0
 800489a:	001a      	movs	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	789b      	ldrb	r3, [r3, #2]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 f9a0 	bl	8004bea <RTC_Bcd2ToByte>
 80048aa:	0003      	movs	r3, r0
 80048ac:	001a      	movs	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b006      	add	sp, #24
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	007f7f7f 	.word	0x007f7f7f

080048c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048c0:	b5b0      	push	{r4, r5, r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	7f1b      	ldrb	r3, [r3, #28]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_RTC_SetDate+0x1c>
 80048d8:	2302      	movs	r3, #2
 80048da:	e07a      	b.n	80049d2 <HAL_RTC_SetDate+0x112>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2202      	movs	r2, #2
 80048e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10e      	bne.n	800490c <HAL_RTC_SetDate+0x4c>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	001a      	movs	r2, r3
 80048f4:	2310      	movs	r3, #16
 80048f6:	4013      	ands	r3, r2
 80048f8:	d008      	beq.n	800490c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2210      	movs	r2, #16
 8004900:	4393      	bics	r3, r2
 8004902:	b2db      	uxtb	r3, r3
 8004904:	330a      	adds	r3, #10
 8004906:	b2da      	uxtb	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d11c      	bne.n	800494c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	78db      	ldrb	r3, [r3, #3]
 8004916:	0018      	movs	r0, r3
 8004918:	f000 f946 	bl	8004ba8 <RTC_ByteToBcd2>
 800491c:	0003      	movs	r3, r0
 800491e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f93f 	bl	8004ba8 <RTC_ByteToBcd2>
 800492a:	0003      	movs	r3, r0
 800492c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800492e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	789b      	ldrb	r3, [r3, #2]
 8004934:	0018      	movs	r0, r3
 8004936:	f000 f937 	bl	8004ba8 <RTC_ByteToBcd2>
 800493a:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800493c:	0022      	movs	r2, r4
 800493e:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e00e      	b.n	800496a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	78db      	ldrb	r3, [r3, #3]
 8004950:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004958:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800495e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	22ca      	movs	r2, #202	; 0xca
 8004970:	625a      	str	r2, [r3, #36]	; 0x24
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2253      	movs	r2, #83	; 0x53
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800497a:	2513      	movs	r5, #19
 800497c:	197c      	adds	r4, r7, r5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	0018      	movs	r0, r3
 8004982:	f000 f8a5 	bl	8004ad0 <RTC_EnterInitMode>
 8004986:	0003      	movs	r3, r0
 8004988:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800498a:	0028      	movs	r0, r5
 800498c:	183b      	adds	r3, r7, r0
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10c      	bne.n	80049ae <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4910      	ldr	r1, [pc, #64]	; (80049dc <HAL_RTC_SetDate+0x11c>)
 800499c:	400a      	ands	r2, r1
 800499e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049a0:	183c      	adds	r4, r7, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f000 f8d6 	bl	8004b56 <RTC_ExitInitMode>
 80049aa:	0003      	movs	r3, r0
 80049ac:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80049ae:	2313      	movs	r3, #19
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]

  return status;
 80049cc:	2313      	movs	r3, #19
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	781b      	ldrb	r3, [r3, #0]
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b006      	add	sp, #24
 80049d8:	bdb0      	pop	{r4, r5, r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	00ffff3f 	.word	0x00ffff3f

080049e0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4a21      	ldr	r2, [pc, #132]	; (8004a7c <HAL_RTC_GetDate+0x9c>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	221f      	movs	r2, #31
 8004a0e:	4013      	ands	r3, r2
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	223f      	movs	r2, #63	; 0x3f
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	0b5b      	lsrs	r3, r3, #13
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2207      	movs	r2, #7
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d11a      	bne.n	8004a70 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	78db      	ldrb	r3, [r3, #3]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f000 f8d3 	bl	8004bea <RTC_Bcd2ToByte>
 8004a44:	0003      	movs	r3, r0
 8004a46:	001a      	movs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 f8ca 	bl	8004bea <RTC_Bcd2ToByte>
 8004a56:	0003      	movs	r3, r0
 8004a58:	001a      	movs	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	789b      	ldrb	r3, [r3, #2]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 f8c1 	bl	8004bea <RTC_Bcd2ToByte>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b006      	add	sp, #24
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	00ffff3f 	.word	0x00ffff3f

08004a80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <HAL_RTC_WaitForSynchro+0x4c>)
 8004a92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a94:	f7fd fa52 	bl	8001f3c <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a9e:	f7fd fa4d 	bl	8001f3c <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	23fa      	movs	r3, #250	; 0xfa
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d901      	bls.n	8004ab4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e006      	b.n	8004ac2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	4013      	ands	r3, r2
 8004abe:	d0ee      	beq.n	8004a9e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b004      	add	sp, #16
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	00017959 	.word	0x00017959

08004ad0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	230f      	movs	r3, #15
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	4013      	ands	r3, r2
 8004aee:	d12b      	bne.n	8004b48 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2180      	movs	r1, #128	; 0x80
 8004afc:	430a      	orrs	r2, r1
 8004afe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b00:	f7fd fa1c 	bl	8001f3c <HAL_GetTick>
 8004b04:	0003      	movs	r3, r0
 8004b06:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b08:	e013      	b.n	8004b32 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b0a:	f7fd fa17 	bl	8001f3c <HAL_GetTick>
 8004b0e:	0002      	movs	r2, r0
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	1ad2      	subs	r2, r2, r3
 8004b14:	200f      	movs	r0, #15
 8004b16:	183b      	adds	r3, r7, r0
 8004b18:	1839      	adds	r1, r7, r0
 8004b1a:	7809      	ldrb	r1, [r1, #0]
 8004b1c:	7019      	strb	r1, [r3, #0]
 8004b1e:	23fa      	movs	r3, #250	; 0xfa
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d905      	bls.n	8004b32 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b2c:	183b      	adds	r3, r7, r0
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d104      	bne.n	8004b48 <RTC_EnterInitMode+0x78>
 8004b3e:	230f      	movs	r3, #15
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d1e0      	bne.n	8004b0a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004b48:	230f      	movs	r3, #15
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b004      	add	sp, #16
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b56:	b590      	push	{r4, r7, lr}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	240f      	movs	r4, #15
 8004b60:	193b      	adds	r3, r7, r4
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2180      	movs	r1, #128	; 0x80
 8004b72:	438a      	bics	r2, r1
 8004b74:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d10b      	bne.n	8004b9a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7ff ff7b 	bl	8004a80 <HAL_RTC_WaitForSynchro>
 8004b8a:	1e03      	subs	r3, r0, #0
 8004b8c:	d005      	beq.n	8004b9a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2204      	movs	r2, #4
 8004b92:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004b94:	193b      	adds	r3, r7, r4
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004b9a:	230f      	movs	r3, #15
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	781b      	ldrb	r3, [r3, #0]
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b005      	add	sp, #20
 8004ba6:	bd90      	pop	{r4, r7, pc}

08004ba8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	0002      	movs	r2, r0
 8004bb0:	1dfb      	adds	r3, r7, #7
 8004bb2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004bb8:	e007      	b.n	8004bca <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004bc0:	1dfb      	adds	r3, r7, #7
 8004bc2:	1dfa      	adds	r2, r7, #7
 8004bc4:	7812      	ldrb	r2, [r2, #0]
 8004bc6:	3a0a      	subs	r2, #10
 8004bc8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004bca:	1dfb      	adds	r3, r7, #7
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d8f3      	bhi.n	8004bba <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	1dfb      	adds	r3, r7, #7
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	b2db      	uxtb	r3, r3
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b004      	add	sp, #16
 8004be8:	bd80      	pop	{r7, pc}

08004bea <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	0002      	movs	r2, r0
 8004bf2:	1dfb      	adds	r3, r7, #7
 8004bf4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004bfa:	1dfb      	adds	r3, r7, #7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	001a      	movs	r2, r3
 8004c04:	0013      	movs	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	189b      	adds	r3, r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	1dfb      	adds	r3, r7, #7
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	210f      	movs	r1, #15
 8004c18:	400b      	ands	r3, r1
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	18d3      	adds	r3, r2, r3
 8004c1e:	b2db      	uxtb	r3, r3
}
 8004c20:	0018      	movs	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b004      	add	sp, #16
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e042      	b.n	8004cc0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	223d      	movs	r2, #61	; 0x3d
 8004c3e:	5c9b      	ldrb	r3, [r3, r2]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	223c      	movs	r2, #60	; 0x3c
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7fc ff9f 	bl	8001b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	223d      	movs	r2, #61	; 0x3d
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	0019      	movs	r1, r3
 8004c68:	0010      	movs	r0, r2
 8004c6a:	f000 fa3f 	bl	80050ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2246      	movs	r2, #70	; 0x46
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	223e      	movs	r2, #62	; 0x3e
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	5499      	strb	r1, [r3, r2]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	223f      	movs	r2, #63	; 0x3f
 8004c82:	2101      	movs	r1, #1
 8004c84:	5499      	strb	r1, [r3, r2]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	5499      	strb	r1, [r3, r2]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2241      	movs	r2, #65	; 0x41
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2242      	movs	r2, #66	; 0x42
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2243      	movs	r2, #67	; 0x43
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	5499      	strb	r1, [r3, r2]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2244      	movs	r2, #68	; 0x44
 8004caa:	2101      	movs	r1, #1
 8004cac:	5499      	strb	r1, [r3, r2]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2245      	movs	r2, #69	; 0x45
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	223d      	movs	r2, #61	; 0x3d
 8004cba:	2101      	movs	r1, #1
 8004cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d124      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d11d      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	4252      	negs	r2, r2
 8004cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2203      	movs	r2, #3
 8004d04:	4013      	ands	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 f9d6 	bl	80050bc <HAL_TIM_IC_CaptureCallback>
 8004d10:	e007      	b.n	8004d22 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f000 f9c9 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 f9d5 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d125      	bne.n	8004d82 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11e      	bne.n	8004d82 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2205      	movs	r2, #5
 8004d4a:	4252      	negs	r2, r2
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	23c0      	movs	r3, #192	; 0xc0
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d004      	beq.n	8004d6c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f000 f9a9 	bl	80050bc <HAL_TIM_IC_CaptureCallback>
 8004d6a:	e007      	b.n	8004d7c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f000 f99c 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	0018      	movs	r0, r3
 8004d78:	f000 f9a8 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d124      	bne.n	8004dda <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2208      	movs	r2, #8
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d11d      	bne.n	8004dda <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2209      	movs	r2, #9
 8004da4:	4252      	negs	r2, r2
 8004da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2204      	movs	r2, #4
 8004dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	2203      	movs	r2, #3
 8004db6:	4013      	ands	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f000 f97d 	bl	80050bc <HAL_TIM_IC_CaptureCallback>
 8004dc2:	e007      	b.n	8004dd4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 f970 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f000 f97c 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2210      	movs	r2, #16
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d125      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2210      	movs	r2, #16
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d11e      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2211      	movs	r2, #17
 8004dfc:	4252      	negs	r2, r2
 8004dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2208      	movs	r2, #8
 8004e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	23c0      	movs	r3, #192	; 0xc0
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4013      	ands	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	0018      	movs	r0, r3
 8004e18:	f000 f950 	bl	80050bc <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e007      	b.n	8004e2e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 f943 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 f94f 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10f      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d108      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2202      	movs	r2, #2
 8004e56:	4252      	negs	r2, r2
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f000 f91d 	bl	800509c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b80      	cmp	r3, #128	; 0x80
 8004e6e:	d10f      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b80      	cmp	r3, #128	; 0x80
 8004e7c:	d108      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2281      	movs	r2, #129	; 0x81
 8004e84:	4252      	negs	r2, r2
 8004e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f000 faae 	bl	80053ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2240      	movs	r2, #64	; 0x40
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d10f      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2240      	movs	r2, #64	; 0x40
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d108      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2241      	movs	r2, #65	; 0x41
 8004eb2:	4252      	negs	r2, r2
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 f90f 	bl	80050dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d10f      	bne.n	8004eec <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d108      	bne.n	8004eec <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2221      	movs	r2, #33	; 0x21
 8004ee0:	4252      	negs	r2, r2
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f000 fa78 	bl	80053dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b002      	add	sp, #8
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	230f      	movs	r3, #15
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2200      	movs	r2, #0
 8004f04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223c      	movs	r2, #60	; 0x3c
 8004f0a:	5c9b      	ldrb	r3, [r3, r2]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIM_ConfigClockSource+0x20>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0bc      	b.n	800508e <HAL_TIM_ConfigClockSource+0x19a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	223c      	movs	r2, #60	; 0x3c
 8004f18:	2101      	movs	r1, #1
 8004f1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223d      	movs	r2, #61	; 0x3d
 8004f20:	2102      	movs	r1, #2
 8004f22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2277      	movs	r2, #119	; 0x77
 8004f30:	4393      	bics	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a58      	ldr	r2, [pc, #352]	; (8005098 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	0192      	lsls	r2, r2, #6
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d040      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0xde>
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	0192      	lsls	r2, r2, #6
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d900      	bls.n	8004f5a <HAL_TIM_ConfigClockSource+0x66>
 8004f58:	e088      	b.n	800506c <HAL_TIM_ConfigClockSource+0x178>
 8004f5a:	2280      	movs	r2, #128	; 0x80
 8004f5c:	0152      	lsls	r2, r2, #5
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d100      	bne.n	8004f64 <HAL_TIM_ConfigClockSource+0x70>
 8004f62:	e088      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x182>
 8004f64:	2280      	movs	r2, #128	; 0x80
 8004f66:	0152      	lsls	r2, r2, #5
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d900      	bls.n	8004f6e <HAL_TIM_ConfigClockSource+0x7a>
 8004f6c:	e07e      	b.n	800506c <HAL_TIM_ConfigClockSource+0x178>
 8004f6e:	2b70      	cmp	r3, #112	; 0x70
 8004f70:	d018      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0xb0>
 8004f72:	d900      	bls.n	8004f76 <HAL_TIM_ConfigClockSource+0x82>
 8004f74:	e07a      	b.n	800506c <HAL_TIM_ConfigClockSource+0x178>
 8004f76:	2b60      	cmp	r3, #96	; 0x60
 8004f78:	d04f      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x126>
 8004f7a:	d900      	bls.n	8004f7e <HAL_TIM_ConfigClockSource+0x8a>
 8004f7c:	e076      	b.n	800506c <HAL_TIM_ConfigClockSource+0x178>
 8004f7e:	2b50      	cmp	r3, #80	; 0x50
 8004f80:	d03b      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x106>
 8004f82:	d900      	bls.n	8004f86 <HAL_TIM_ConfigClockSource+0x92>
 8004f84:	e072      	b.n	800506c <HAL_TIM_ConfigClockSource+0x178>
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	d057      	beq.n	800503a <HAL_TIM_ConfigClockSource+0x146>
 8004f8a:	d900      	bls.n	8004f8e <HAL_TIM_ConfigClockSource+0x9a>
 8004f8c:	e06e      	b.n	800506c <HAL_TIM_ConfigClockSource+0x178>
 8004f8e:	2b30      	cmp	r3, #48	; 0x30
 8004f90:	d063      	beq.n	800505a <HAL_TIM_ConfigClockSource+0x166>
 8004f92:	d86b      	bhi.n	800506c <HAL_TIM_ConfigClockSource+0x178>
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d060      	beq.n	800505a <HAL_TIM_ConfigClockSource+0x166>
 8004f98:	d868      	bhi.n	800506c <HAL_TIM_ConfigClockSource+0x178>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d05d      	beq.n	800505a <HAL_TIM_ConfigClockSource+0x166>
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d05b      	beq.n	800505a <HAL_TIM_ConfigClockSource+0x166>
 8004fa2:	e063      	b.n	800506c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6899      	ldr	r1, [r3, #8]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f000 f994 	bl	80052e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2277      	movs	r2, #119	; 0x77
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]
      break;
 8004fd0:	e052      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f000 f97d 	bl	80052e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	01c9      	lsls	r1, r1, #7
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]
      break;
 8004ff8:	e03e      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6859      	ldr	r1, [r3, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	001a      	movs	r2, r3
 8005008:	f000 f8f0 	bl	80051ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2150      	movs	r1, #80	; 0x50
 8005012:	0018      	movs	r0, r3
 8005014:	f000 f94a 	bl	80052ac <TIM_ITRx_SetConfig>
      break;
 8005018:	e02e      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6859      	ldr	r1, [r3, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	001a      	movs	r2, r3
 8005028:	f000 f90e 	bl	8005248 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2160      	movs	r1, #96	; 0x60
 8005032:	0018      	movs	r0, r3
 8005034:	f000 f93a 	bl	80052ac <TIM_ITRx_SetConfig>
      break;
 8005038:	e01e      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6859      	ldr	r1, [r3, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	001a      	movs	r2, r3
 8005048:	f000 f8d0 	bl	80051ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2140      	movs	r1, #64	; 0x40
 8005052:	0018      	movs	r0, r3
 8005054:	f000 f92a 	bl	80052ac <TIM_ITRx_SetConfig>
      break;
 8005058:	e00e      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	0019      	movs	r1, r3
 8005064:	0010      	movs	r0, r2
 8005066:	f000 f921 	bl	80052ac <TIM_ITRx_SetConfig>
      break;
 800506a:	e005      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800506c:	230f      	movs	r3, #15
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
      break;
 8005074:	e000      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005076:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	223d      	movs	r2, #61	; 0x3d
 800507c:	2101      	movs	r1, #1
 800507e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	223c      	movs	r2, #60	; 0x3c
 8005084:	2100      	movs	r1, #0
 8005086:	5499      	strb	r1, [r3, r2]

  return status;
 8005088:	230f      	movs	r3, #15
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	781b      	ldrb	r3, [r3, #0]
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b004      	add	sp, #16
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	ffff00ff 	.word	0xffff00ff

0800509c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050a4:	46c0      	nop			; (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b002      	add	sp, #8
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b002      	add	sp, #8
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d4:	46c0      	nop			; (mov r8, r8)
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b002      	add	sp, #8
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e4:	46c0      	nop			; (mov r8, r8)
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b002      	add	sp, #8
 80050ea:	bd80      	pop	{r7, pc}

080050ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a34      	ldr	r2, [pc, #208]	; (80051d0 <TIM_Base_SetConfig+0xe4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d008      	beq.n	8005116 <TIM_Base_SetConfig+0x2a>
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	05db      	lsls	r3, r3, #23
 800510a:	429a      	cmp	r2, r3
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0x2a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a30      	ldr	r2, [pc, #192]	; (80051d4 <TIM_Base_SetConfig+0xe8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2270      	movs	r2, #112	; 0x70
 800511a:	4393      	bics	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <TIM_Base_SetConfig+0xe4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d018      	beq.n	8005162 <TIM_Base_SetConfig+0x76>
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	05db      	lsls	r3, r3, #23
 8005136:	429a      	cmp	r2, r3
 8005138:	d013      	beq.n	8005162 <TIM_Base_SetConfig+0x76>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <TIM_Base_SetConfig+0xe8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00f      	beq.n	8005162 <TIM_Base_SetConfig+0x76>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a24      	ldr	r2, [pc, #144]	; (80051d8 <TIM_Base_SetConfig+0xec>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00b      	beq.n	8005162 <TIM_Base_SetConfig+0x76>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a23      	ldr	r2, [pc, #140]	; (80051dc <TIM_Base_SetConfig+0xf0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d007      	beq.n	8005162 <TIM_Base_SetConfig+0x76>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <TIM_Base_SetConfig+0xf4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_Base_SetConfig+0x76>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a21      	ldr	r2, [pc, #132]	; (80051e4 <TIM_Base_SetConfig+0xf8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d108      	bne.n	8005174 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <TIM_Base_SetConfig+0xfc>)
 8005166:	4013      	ands	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2280      	movs	r2, #128	; 0x80
 8005178:	4393      	bics	r3, r2
 800517a:	001a      	movs	r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <TIM_Base_SetConfig+0xe4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0xce>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <TIM_Base_SetConfig+0xf0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0xce>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <TIM_Base_SetConfig+0xf4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0xce>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a0b      	ldr	r2, [pc, #44]	; (80051e4 <TIM_Base_SetConfig+0xf8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d103      	bne.n	80051c2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	615a      	str	r2, [r3, #20]
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b004      	add	sp, #16
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40002000 	.word	0x40002000
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800
 80051e8:	fffffcff 	.word	0xfffffcff

080051ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	2201      	movs	r2, #1
 8005204:	4393      	bics	r3, r2
 8005206:	001a      	movs	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	22f0      	movs	r2, #240	; 0xf0
 8005216:	4393      	bics	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	220a      	movs	r2, #10
 8005228:	4393      	bics	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b006      	add	sp, #24
 8005246:	bd80      	pop	{r7, pc}

08005248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	2210      	movs	r2, #16
 800525a:	4393      	bics	r3, r2
 800525c:	001a      	movs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <TIM_TI2_ConfigInputStage+0x60>)
 8005272:	4013      	ands	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	22a0      	movs	r2, #160	; 0xa0
 8005284:	4393      	bics	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b006      	add	sp, #24
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	ffff0fff 	.word	0xffff0fff

080052ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2270      	movs	r2, #112	; 0x70
 80052c0:	4393      	bics	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	2207      	movs	r2, #7
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	609a      	str	r2, [r3, #8]
}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b004      	add	sp, #16
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4a09      	ldr	r2, [pc, #36]	; (800531c <TIM_ETR_SetConfig+0x3c>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	021a      	lsls	r2, r3, #8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	431a      	orrs	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b006      	add	sp, #24
 800531a:	bd80      	pop	{r7, pc}
 800531c:	ffff00ff 	.word	0xffff00ff

08005320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	223c      	movs	r2, #60	; 0x3c
 800532e:	5c9b      	ldrb	r3, [r3, r2]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005334:	2302      	movs	r3, #2
 8005336:	e047      	b.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	223c      	movs	r2, #60	; 0x3c
 800533c:	2101      	movs	r1, #1
 800533e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	223d      	movs	r2, #61	; 0x3d
 8005344:	2102      	movs	r1, #2
 8005346:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2270      	movs	r2, #112	; 0x70
 800535c:	4393      	bics	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00f      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	05db      	lsls	r3, r3, #23
 8005384:	429a      	cmp	r2, r3
 8005386:	d009      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	4393      	bics	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	223d      	movs	r2, #61	; 0x3d
 80053ba:	2101      	movs	r1, #1
 80053bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	223c      	movs	r2, #60	; 0x3c
 80053c2:	2100      	movs	r1, #0
 80053c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40014000 	.word	0x40014000

080053dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b002      	add	sp, #8
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b002      	add	sp, #8
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e044      	b.n	8005498 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d107      	bne.n	8005426 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2278      	movs	r2, #120	; 0x78
 800541a:	2100      	movs	r1, #0
 800541c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	0018      	movs	r0, r3
 8005422:	f7fc fbdb 	bl	8001bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2224      	movs	r2, #36	; 0x24
 800542a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2101      	movs	r1, #1
 8005438:	438a      	bics	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	0018      	movs	r0, r3
 8005440:	f000 f8d0 	bl	80055e4 <UART_SetConfig>
 8005444:	0003      	movs	r3, r0
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e024      	b.n	8005498 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 fa03 	bl	8005864 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	490d      	ldr	r1, [pc, #52]	; (80054a0 <HAL_UART_Init+0xa4>)
 800546a:	400a      	ands	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	212a      	movs	r1, #42	; 0x2a
 800547a:	438a      	bics	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2101      	movs	r1, #1
 800548a:	430a      	orrs	r2, r1
 800548c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	0018      	movs	r0, r3
 8005492:	f000 fa9b 	bl	80059cc <UART_CheckIdleState>
 8005496:	0003      	movs	r3, r0
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	ffffb7ff 	.word	0xffffb7ff

080054a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	; 0x28
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	1dbb      	adds	r3, r7, #6
 80054b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d000      	beq.n	80054be <HAL_UART_Transmit+0x1a>
 80054bc:	e08d      	b.n	80055da <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_UART_Transmit+0x28>
 80054c4:	1dbb      	adds	r3, r7, #6
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e085      	b.n	80055dc <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	015b      	lsls	r3, r3, #5
 80054d8:	429a      	cmp	r2, r3
 80054da:	d109      	bne.n	80054f0 <HAL_UART_Transmit+0x4c>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2201      	movs	r2, #1
 80054e8:	4013      	ands	r3, r2
 80054ea:	d001      	beq.n	80054f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e075      	b.n	80055dc <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2284      	movs	r2, #132	; 0x84
 80054f4:	2100      	movs	r1, #0
 80054f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2221      	movs	r2, #33	; 0x21
 80054fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054fe:	f7fc fd1d 	bl	8001f3c <HAL_GetTick>
 8005502:	0003      	movs	r3, r0
 8005504:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1dba      	adds	r2, r7, #6
 800550a:	2150      	movs	r1, #80	; 0x50
 800550c:	8812      	ldrh	r2, [r2, #0]
 800550e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1dba      	adds	r2, r7, #6
 8005514:	2152      	movs	r1, #82	; 0x52
 8005516:	8812      	ldrh	r2, [r2, #0]
 8005518:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	015b      	lsls	r3, r3, #5
 8005522:	429a      	cmp	r2, r3
 8005524:	d108      	bne.n	8005538 <HAL_UART_Transmit+0x94>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e003      	b.n	8005540 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005540:	e030      	b.n	80055a4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	0013      	movs	r3, r2
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	f000 fae4 	bl	8005b1c <UART_WaitOnFlagUntilTimeout>
 8005554:	1e03      	subs	r3, r0, #0
 8005556:	d004      	beq.n	8005562 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e03c      	b.n	80055dc <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	881a      	ldrh	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	05d2      	lsls	r2, r2, #23
 8005572:	0dd2      	lsrs	r2, r2, #23
 8005574:	b292      	uxth	r2, r2
 8005576:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	3302      	adds	r3, #2
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e008      	b.n	8005592 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b292      	uxth	r2, r2
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2252      	movs	r2, #82	; 0x52
 8005596:	5a9b      	ldrh	r3, [r3, r2]
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b299      	uxth	r1, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2252      	movs	r2, #82	; 0x52
 80055a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2252      	movs	r2, #82	; 0x52
 80055a8:	5a9b      	ldrh	r3, [r3, r2]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1c8      	bne.n	8005542 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	0013      	movs	r3, r2
 80055ba:	2200      	movs	r2, #0
 80055bc:	2140      	movs	r1, #64	; 0x40
 80055be:	f000 faad 	bl	8005b1c <UART_WaitOnFlagUntilTimeout>
 80055c2:	1e03      	subs	r3, r0, #0
 80055c4:	d004      	beq.n	80055d0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e005      	b.n	80055dc <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
  }
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b008      	add	sp, #32
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055ec:	231e      	movs	r3, #30
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a8d      	ldr	r2, [pc, #564]	; (8005848 <UART_SetConfig+0x264>)
 8005614:	4013      	ands	r3, r2
 8005616:	0019      	movs	r1, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	430a      	orrs	r2, r1
 8005620:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a88      	ldr	r2, [pc, #544]	; (800584c <UART_SetConfig+0x268>)
 800562a:	4013      	ands	r3, r2
 800562c:	0019      	movs	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	4a7f      	ldr	r2, [pc, #508]	; (8005850 <UART_SetConfig+0x26c>)
 8005652:	4013      	ands	r3, r2
 8005654:	0019      	movs	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	430a      	orrs	r2, r1
 800565e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a7b      	ldr	r2, [pc, #492]	; (8005854 <UART_SetConfig+0x270>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d127      	bne.n	80056ba <UART_SetConfig+0xd6>
 800566a:	4b7b      	ldr	r3, [pc, #492]	; (8005858 <UART_SetConfig+0x274>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	2203      	movs	r2, #3
 8005670:	4013      	ands	r3, r2
 8005672:	2b03      	cmp	r3, #3
 8005674:	d00d      	beq.n	8005692 <UART_SetConfig+0xae>
 8005676:	d81b      	bhi.n	80056b0 <UART_SetConfig+0xcc>
 8005678:	2b02      	cmp	r3, #2
 800567a:	d014      	beq.n	80056a6 <UART_SetConfig+0xc2>
 800567c:	d818      	bhi.n	80056b0 <UART_SetConfig+0xcc>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <UART_SetConfig+0xa4>
 8005682:	2b01      	cmp	r3, #1
 8005684:	d00a      	beq.n	800569c <UART_SetConfig+0xb8>
 8005686:	e013      	b.n	80056b0 <UART_SetConfig+0xcc>
 8005688:	231f      	movs	r3, #31
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	e021      	b.n	80056d6 <UART_SetConfig+0xf2>
 8005692:	231f      	movs	r3, #31
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	2202      	movs	r2, #2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e01c      	b.n	80056d6 <UART_SetConfig+0xf2>
 800569c:	231f      	movs	r3, #31
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2204      	movs	r2, #4
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e017      	b.n	80056d6 <UART_SetConfig+0xf2>
 80056a6:	231f      	movs	r3, #31
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2208      	movs	r2, #8
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e012      	b.n	80056d6 <UART_SetConfig+0xf2>
 80056b0:	231f      	movs	r3, #31
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	2210      	movs	r2, #16
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e00d      	b.n	80056d6 <UART_SetConfig+0xf2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a67      	ldr	r2, [pc, #412]	; (800585c <UART_SetConfig+0x278>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d104      	bne.n	80056ce <UART_SetConfig+0xea>
 80056c4:	231f      	movs	r3, #31
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e003      	b.n	80056d6 <UART_SetConfig+0xf2>
 80056ce:	231f      	movs	r3, #31
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	2210      	movs	r2, #16
 80056d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	429a      	cmp	r2, r3
 80056e0:	d15c      	bne.n	800579c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80056e2:	231f      	movs	r3, #31
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d015      	beq.n	8005718 <UART_SetConfig+0x134>
 80056ec:	dc18      	bgt.n	8005720 <UART_SetConfig+0x13c>
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d00d      	beq.n	800570e <UART_SetConfig+0x12a>
 80056f2:	dc15      	bgt.n	8005720 <UART_SetConfig+0x13c>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <UART_SetConfig+0x11a>
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d005      	beq.n	8005708 <UART_SetConfig+0x124>
 80056fc:	e010      	b.n	8005720 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fe:	f7fe fe4f 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8005702:	0003      	movs	r3, r0
 8005704:	61bb      	str	r3, [r7, #24]
        break;
 8005706:	e012      	b.n	800572e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005708:	4b55      	ldr	r3, [pc, #340]	; (8005860 <UART_SetConfig+0x27c>)
 800570a:	61bb      	str	r3, [r7, #24]
        break;
 800570c:	e00f      	b.n	800572e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570e:	f7fe fde7 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8005712:	0003      	movs	r3, r0
 8005714:	61bb      	str	r3, [r7, #24]
        break;
 8005716:	e00a      	b.n	800572e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	61bb      	str	r3, [r7, #24]
        break;
 800571e:	e006      	b.n	800572e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005724:	231e      	movs	r3, #30
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
        break;
 800572c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d100      	bne.n	8005736 <UART_SetConfig+0x152>
 8005734:	e07a      	b.n	800582c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	005a      	lsls	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	18d2      	adds	r2, r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	0019      	movs	r1, r3
 8005748:	0010      	movs	r0, r2
 800574a:	f7fa fcef 	bl	800012c <__udivsi3>
 800574e:	0003      	movs	r3, r0
 8005750:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b0f      	cmp	r3, #15
 8005756:	d91c      	bls.n	8005792 <UART_SetConfig+0x1ae>
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	025b      	lsls	r3, r3, #9
 800575e:	429a      	cmp	r2, r3
 8005760:	d217      	bcs.n	8005792 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	b29a      	uxth	r2, r3
 8005766:	200e      	movs	r0, #14
 8005768:	183b      	adds	r3, r7, r0
 800576a:	210f      	movs	r1, #15
 800576c:	438a      	bics	r2, r1
 800576e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	b29b      	uxth	r3, r3
 8005776:	2207      	movs	r2, #7
 8005778:	4013      	ands	r3, r2
 800577a:	b299      	uxth	r1, r3
 800577c:	183b      	adds	r3, r7, r0
 800577e:	183a      	adds	r2, r7, r0
 8005780:	8812      	ldrh	r2, [r2, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	183a      	adds	r2, r7, r0
 800578c:	8812      	ldrh	r2, [r2, #0]
 800578e:	60da      	str	r2, [r3, #12]
 8005790:	e04c      	b.n	800582c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005792:	231e      	movs	r3, #30
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e047      	b.n	800582c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800579c:	231f      	movs	r3, #31
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d015      	beq.n	80057d2 <UART_SetConfig+0x1ee>
 80057a6:	dc18      	bgt.n	80057da <UART_SetConfig+0x1f6>
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d00d      	beq.n	80057c8 <UART_SetConfig+0x1e4>
 80057ac:	dc15      	bgt.n	80057da <UART_SetConfig+0x1f6>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <UART_SetConfig+0x1d4>
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d005      	beq.n	80057c2 <UART_SetConfig+0x1de>
 80057b6:	e010      	b.n	80057da <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b8:	f7fe fdf2 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80057bc:	0003      	movs	r3, r0
 80057be:	61bb      	str	r3, [r7, #24]
        break;
 80057c0:	e012      	b.n	80057e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c2:	4b27      	ldr	r3, [pc, #156]	; (8005860 <UART_SetConfig+0x27c>)
 80057c4:	61bb      	str	r3, [r7, #24]
        break;
 80057c6:	e00f      	b.n	80057e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c8:	f7fe fd8a 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80057cc:	0003      	movs	r3, r0
 80057ce:	61bb      	str	r3, [r7, #24]
        break;
 80057d0:	e00a      	b.n	80057e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	61bb      	str	r3, [r7, #24]
        break;
 80057d8:	e006      	b.n	80057e8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057de:	231e      	movs	r3, #30
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	2201      	movs	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
        break;
 80057e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01e      	beq.n	800582c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	085a      	lsrs	r2, r3, #1
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	18d2      	adds	r2, r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	0019      	movs	r1, r3
 80057fe:	0010      	movs	r0, r2
 8005800:	f7fa fc94 	bl	800012c <__udivsi3>
 8005804:	0003      	movs	r3, r0
 8005806:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b0f      	cmp	r3, #15
 800580c:	d90a      	bls.n	8005824 <UART_SetConfig+0x240>
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	025b      	lsls	r3, r3, #9
 8005814:	429a      	cmp	r2, r3
 8005816:	d205      	bcs.n	8005824 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	b29a      	uxth	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	e003      	b.n	800582c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005824:	231e      	movs	r3, #30
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005838:	231e      	movs	r3, #30
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	781b      	ldrb	r3, [r3, #0]
}
 800583e:	0018      	movs	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	b008      	add	sp, #32
 8005844:	bd80      	pop	{r7, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	ffff69f3 	.word	0xffff69f3
 800584c:	ffffcfff 	.word	0xffffcfff
 8005850:	fffff4ff 	.word	0xfffff4ff
 8005854:	40013800 	.word	0x40013800
 8005858:	40021000 	.word	0x40021000
 800585c:	40004400 	.word	0x40004400
 8005860:	007a1200 	.word	0x007a1200

08005864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	2201      	movs	r2, #1
 8005872:	4013      	ands	r3, r2
 8005874:	d00b      	beq.n	800588e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4a4a      	ldr	r2, [pc, #296]	; (80059a8 <UART_AdvFeatureConfig+0x144>)
 800587e:	4013      	ands	r3, r2
 8005880:	0019      	movs	r1, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2202      	movs	r2, #2
 8005894:	4013      	ands	r3, r2
 8005896:	d00b      	beq.n	80058b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4a43      	ldr	r2, [pc, #268]	; (80059ac <UART_AdvFeatureConfig+0x148>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	0019      	movs	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2204      	movs	r2, #4
 80058b6:	4013      	ands	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a3b      	ldr	r2, [pc, #236]	; (80059b0 <UART_AdvFeatureConfig+0x14c>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	0019      	movs	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2208      	movs	r2, #8
 80058d8:	4013      	ands	r3, r2
 80058da:	d00b      	beq.n	80058f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4a34      	ldr	r2, [pc, #208]	; (80059b4 <UART_AdvFeatureConfig+0x150>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	0019      	movs	r1, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2210      	movs	r2, #16
 80058fa:	4013      	ands	r3, r2
 80058fc:	d00b      	beq.n	8005916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a2c      	ldr	r2, [pc, #176]	; (80059b8 <UART_AdvFeatureConfig+0x154>)
 8005906:	4013      	ands	r3, r2
 8005908:	0019      	movs	r1, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	2220      	movs	r2, #32
 800591c:	4013      	ands	r3, r2
 800591e:	d00b      	beq.n	8005938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	4a25      	ldr	r2, [pc, #148]	; (80059bc <UART_AdvFeatureConfig+0x158>)
 8005928:	4013      	ands	r3, r2
 800592a:	0019      	movs	r1, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2240      	movs	r2, #64	; 0x40
 800593e:	4013      	ands	r3, r2
 8005940:	d01d      	beq.n	800597e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <UART_AdvFeatureConfig+0x15c>)
 800594a:	4013      	ands	r3, r2
 800594c:	0019      	movs	r1, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	035b      	lsls	r3, r3, #13
 8005962:	429a      	cmp	r2, r3
 8005964:	d10b      	bne.n	800597e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <UART_AdvFeatureConfig+0x160>)
 800596e:	4013      	ands	r3, r2
 8005970:	0019      	movs	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	4013      	ands	r3, r2
 8005986:	d00b      	beq.n	80059a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4a0e      	ldr	r2, [pc, #56]	; (80059c8 <UART_AdvFeatureConfig+0x164>)
 8005990:	4013      	ands	r3, r2
 8005992:	0019      	movs	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	605a      	str	r2, [r3, #4]
  }
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b002      	add	sp, #8
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	fffdffff 	.word	0xfffdffff
 80059ac:	fffeffff 	.word	0xfffeffff
 80059b0:	fffbffff 	.word	0xfffbffff
 80059b4:	ffff7fff 	.word	0xffff7fff
 80059b8:	ffffefff 	.word	0xffffefff
 80059bc:	ffffdfff 	.word	0xffffdfff
 80059c0:	ffefffff 	.word	0xffefffff
 80059c4:	ff9fffff 	.word	0xff9fffff
 80059c8:	fff7ffff 	.word	0xfff7ffff

080059cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b092      	sub	sp, #72	; 0x48
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2284      	movs	r2, #132	; 0x84
 80059d8:	2100      	movs	r1, #0
 80059da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059dc:	f7fc faae 	bl	8001f3c <HAL_GetTick>
 80059e0:	0003      	movs	r3, r0
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2208      	movs	r2, #8
 80059ec:	4013      	ands	r3, r2
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d12c      	bne.n	8005a4c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	0391      	lsls	r1, r2, #14
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	4a46      	ldr	r2, [pc, #280]	; (8005b14 <UART_CheckIdleState+0x148>)
 80059fc:	9200      	str	r2, [sp, #0]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f000 f88c 	bl	8005b1c <UART_WaitOnFlagUntilTimeout>
 8005a04:	1e03      	subs	r3, r0, #0
 8005a06:	d021      	beq.n	8005a4c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a08:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a12:	2301      	movs	r3, #1
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	f383 8810 	msr	PRIMASK, r3
}
 8005a1c:	46c0      	nop			; (mov r8, r8)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	438a      	bics	r2, r1
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	f383 8810 	msr	PRIMASK, r3
}
 8005a38:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2278      	movs	r2, #120	; 0x78
 8005a44:	2100      	movs	r1, #0
 8005a46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e05f      	b.n	8005b0c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2204      	movs	r2, #4
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d146      	bne.n	8005ae8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	2280      	movs	r2, #128	; 0x80
 8005a5e:	03d1      	lsls	r1, r2, #15
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4a2c      	ldr	r2, [pc, #176]	; (8005b14 <UART_CheckIdleState+0x148>)
 8005a64:	9200      	str	r2, [sp, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f000 f858 	bl	8005b1c <UART_WaitOnFlagUntilTimeout>
 8005a6c:	1e03      	subs	r3, r0, #0
 8005a6e:	d03b      	beq.n	8005ae8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a70:	f3ef 8310 	mrs	r3, PRIMASK
 8005a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a76:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f383 8810 	msr	PRIMASK, r3
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4921      	ldr	r1, [pc, #132]	; (8005b18 <UART_CheckIdleState+0x14c>)
 8005a92:	400a      	ands	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f383 8810 	msr	PRIMASK, r3
}
 8005aa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8005aac:	2301      	movs	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f383 8810 	msr	PRIMASK, r3
}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	438a      	bics	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	f383 8810 	msr	PRIMASK, r3
}
 8005ad2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	2120      	movs	r1, #32
 8005ada:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2278      	movs	r2, #120	; 0x78
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e011      	b.n	8005b0c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	2120      	movs	r1, #32
 8005af4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2278      	movs	r2, #120	; 0x78
 8005b06:	2100      	movs	r1, #0
 8005b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b010      	add	sp, #64	; 0x40
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	01ffffff 	.word	0x01ffffff
 8005b18:	fffffedf 	.word	0xfffffedf

08005b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	1dfb      	adds	r3, r7, #7
 8005b2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2c:	e04b      	b.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3301      	adds	r3, #1
 8005b32:	d048      	beq.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b34:	f7fc fa02 	bl	8001f3c <HAL_GetTick>
 8005b38:	0002      	movs	r2, r0
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d302      	bcc.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e04b      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2204      	movs	r2, #4
 8005b56:	4013      	ands	r3, r2
 8005b58:	d035      	beq.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	2208      	movs	r2, #8
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d111      	bne.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 f83c 	bl	8005bf0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2284      	movs	r2, #132	; 0x84
 8005b7c:	2108      	movs	r1, #8
 8005b7e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2278      	movs	r2, #120	; 0x78
 8005b84:	2100      	movs	r1, #0
 8005b86:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e02c      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69da      	ldr	r2, [r3, #28]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	401a      	ands	r2, r3
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d112      	bne.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2280      	movs	r2, #128	; 0x80
 8005ba6:	0112      	lsls	r2, r2, #4
 8005ba8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f81f 	bl	8005bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2284      	movs	r2, #132	; 0x84
 8005bb6:	2120      	movs	r1, #32
 8005bb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2278      	movs	r2, #120	; 0x78
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e00f      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	425a      	negs	r2, r3
 8005bd6:	4153      	adcs	r3, r2
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	001a      	movs	r2, r3
 8005bdc:	1dfb      	adds	r3, r7, #7
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d0a4      	beq.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	0018      	movs	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b004      	add	sp, #16
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08e      	sub	sp, #56	; 0x38
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfc:	617b      	str	r3, [r7, #20]
  return(result);
 8005bfe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
 8005c02:	2301      	movs	r3, #1
 8005c04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f383 8810 	msr	PRIMASK, r3
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4926      	ldr	r1, [pc, #152]	; (8005cb4 <UART_EndRxTransfer+0xc4>)
 8005c1a:	400a      	ands	r2, r1
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	f383 8810 	msr	PRIMASK, r3
}
 8005c28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2e:	623b      	str	r3, [r7, #32]
  return(result);
 8005c30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	633b      	str	r3, [r7, #48]	; 0x30
 8005c34:	2301      	movs	r3, #1
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	438a      	bics	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	f383 8810 	msr	PRIMASK, r3
}
 8005c5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d118      	bne.n	8005c96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c64:	f3ef 8310 	mrs	r3, PRIMASK
 8005c68:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6e:	2301      	movs	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2110      	movs	r1, #16
 8005c86:	438a      	bics	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2280      	movs	r2, #128	; 0x80
 8005c9a:	2120      	movs	r1, #32
 8005c9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b00e      	add	sp, #56	; 0x38
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	fffffedf 	.word	0xfffffedf

08005cb8 <__errno>:
 8005cb8:	4b01      	ldr	r3, [pc, #4]	; (8005cc0 <__errno+0x8>)
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	4770      	bx	lr
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	20000014 	.word	0x20000014

08005cc4 <__libc_init_array>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	4d0c      	ldr	r5, [pc, #48]	; (8005cfc <__libc_init_array+0x38>)
 8005cca:	4c0d      	ldr	r4, [pc, #52]	; (8005d00 <__libc_init_array+0x3c>)
 8005ccc:	1b64      	subs	r4, r4, r5
 8005cce:	10a4      	asrs	r4, r4, #2
 8005cd0:	42a6      	cmp	r6, r4
 8005cd2:	d109      	bne.n	8005ce8 <__libc_init_array+0x24>
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	f000 fc8b 	bl	80065f0 <_init>
 8005cda:	4d0a      	ldr	r5, [pc, #40]	; (8005d04 <__libc_init_array+0x40>)
 8005cdc:	4c0a      	ldr	r4, [pc, #40]	; (8005d08 <__libc_init_array+0x44>)
 8005cde:	1b64      	subs	r4, r4, r5
 8005ce0:	10a4      	asrs	r4, r4, #2
 8005ce2:	42a6      	cmp	r6, r4
 8005ce4:	d105      	bne.n	8005cf2 <__libc_init_array+0x2e>
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	00b3      	lsls	r3, r6, #2
 8005cea:	58eb      	ldr	r3, [r5, r3]
 8005cec:	4798      	blx	r3
 8005cee:	3601      	adds	r6, #1
 8005cf0:	e7ee      	b.n	8005cd0 <__libc_init_array+0xc>
 8005cf2:	00b3      	lsls	r3, r6, #2
 8005cf4:	58eb      	ldr	r3, [r5, r3]
 8005cf6:	4798      	blx	r3
 8005cf8:	3601      	adds	r6, #1
 8005cfa:	e7f2      	b.n	8005ce2 <__libc_init_array+0x1e>
 8005cfc:	08006710 	.word	0x08006710
 8005d00:	08006710 	.word	0x08006710
 8005d04:	08006710 	.word	0x08006710
 8005d08:	08006714 	.word	0x08006714

08005d0c <memset>:
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	1882      	adds	r2, r0, r2
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d100      	bne.n	8005d16 <memset+0xa>
 8005d14:	4770      	bx	lr
 8005d16:	7019      	strb	r1, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	e7f9      	b.n	8005d10 <memset+0x4>

08005d1c <siprintf>:
 8005d1c:	b40e      	push	{r1, r2, r3}
 8005d1e:	b500      	push	{lr}
 8005d20:	490b      	ldr	r1, [pc, #44]	; (8005d50 <siprintf+0x34>)
 8005d22:	b09c      	sub	sp, #112	; 0x70
 8005d24:	ab1d      	add	r3, sp, #116	; 0x74
 8005d26:	9002      	str	r0, [sp, #8]
 8005d28:	9006      	str	r0, [sp, #24]
 8005d2a:	9107      	str	r1, [sp, #28]
 8005d2c:	9104      	str	r1, [sp, #16]
 8005d2e:	4809      	ldr	r0, [pc, #36]	; (8005d54 <siprintf+0x38>)
 8005d30:	4909      	ldr	r1, [pc, #36]	; (8005d58 <siprintf+0x3c>)
 8005d32:	cb04      	ldmia	r3!, {r2}
 8005d34:	9105      	str	r1, [sp, #20]
 8005d36:	6800      	ldr	r0, [r0, #0]
 8005d38:	a902      	add	r1, sp, #8
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	f000 f870 	bl	8005e20 <_svfiprintf_r>
 8005d40:	2300      	movs	r3, #0
 8005d42:	9a02      	ldr	r2, [sp, #8]
 8005d44:	7013      	strb	r3, [r2, #0]
 8005d46:	b01c      	add	sp, #112	; 0x70
 8005d48:	bc08      	pop	{r3}
 8005d4a:	b003      	add	sp, #12
 8005d4c:	4718      	bx	r3
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	7fffffff 	.word	0x7fffffff
 8005d54:	20000014 	.word	0x20000014
 8005d58:	ffff0208 	.word	0xffff0208

08005d5c <__ssputs_r>:
 8005d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5e:	688e      	ldr	r6, [r1, #8]
 8005d60:	b085      	sub	sp, #20
 8005d62:	0007      	movs	r7, r0
 8005d64:	000c      	movs	r4, r1
 8005d66:	9203      	str	r2, [sp, #12]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	429e      	cmp	r6, r3
 8005d6c:	d83c      	bhi.n	8005de8 <__ssputs_r+0x8c>
 8005d6e:	2390      	movs	r3, #144	; 0x90
 8005d70:	898a      	ldrh	r2, [r1, #12]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	421a      	tst	r2, r3
 8005d76:	d034      	beq.n	8005de2 <__ssputs_r+0x86>
 8005d78:	6909      	ldr	r1, [r1, #16]
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	6960      	ldr	r0, [r4, #20]
 8005d7e:	1a5b      	subs	r3, r3, r1
 8005d80:	9302      	str	r3, [sp, #8]
 8005d82:	2303      	movs	r3, #3
 8005d84:	4343      	muls	r3, r0
 8005d86:	0fdd      	lsrs	r5, r3, #31
 8005d88:	18ed      	adds	r5, r5, r3
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	9802      	ldr	r0, [sp, #8]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	181b      	adds	r3, r3, r0
 8005d92:	106d      	asrs	r5, r5, #1
 8005d94:	42ab      	cmp	r3, r5
 8005d96:	d900      	bls.n	8005d9a <__ssputs_r+0x3e>
 8005d98:	001d      	movs	r5, r3
 8005d9a:	0553      	lsls	r3, r2, #21
 8005d9c:	d532      	bpl.n	8005e04 <__ssputs_r+0xa8>
 8005d9e:	0029      	movs	r1, r5
 8005da0:	0038      	movs	r0, r7
 8005da2:	f000 fb53 	bl	800644c <_malloc_r>
 8005da6:	1e06      	subs	r6, r0, #0
 8005da8:	d109      	bne.n	8005dbe <__ssputs_r+0x62>
 8005daa:	230c      	movs	r3, #12
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	2340      	movs	r3, #64	; 0x40
 8005db0:	2001      	movs	r0, #1
 8005db2:	89a2      	ldrh	r2, [r4, #12]
 8005db4:	4240      	negs	r0, r0
 8005db6:	4313      	orrs	r3, r2
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	b005      	add	sp, #20
 8005dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbe:	9a02      	ldr	r2, [sp, #8]
 8005dc0:	6921      	ldr	r1, [r4, #16]
 8005dc2:	f000 faba 	bl	800633a <memcpy>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	4a14      	ldr	r2, [pc, #80]	; (8005e1c <__ssputs_r+0xc0>)
 8005dca:	401a      	ands	r2, r3
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	81a3      	strh	r3, [r4, #12]
 8005dd2:	9b02      	ldr	r3, [sp, #8]
 8005dd4:	6126      	str	r6, [r4, #16]
 8005dd6:	18f6      	adds	r6, r6, r3
 8005dd8:	6026      	str	r6, [r4, #0]
 8005dda:	6165      	str	r5, [r4, #20]
 8005ddc:	9e01      	ldr	r6, [sp, #4]
 8005dde:	1aed      	subs	r5, r5, r3
 8005de0:	60a5      	str	r5, [r4, #8]
 8005de2:	9b01      	ldr	r3, [sp, #4]
 8005de4:	429e      	cmp	r6, r3
 8005de6:	d900      	bls.n	8005dea <__ssputs_r+0x8e>
 8005de8:	9e01      	ldr	r6, [sp, #4]
 8005dea:	0032      	movs	r2, r6
 8005dec:	9903      	ldr	r1, [sp, #12]
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	f000 faac 	bl	800634c <memmove>
 8005df4:	68a3      	ldr	r3, [r4, #8]
 8005df6:	2000      	movs	r0, #0
 8005df8:	1b9b      	subs	r3, r3, r6
 8005dfa:	60a3      	str	r3, [r4, #8]
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	199e      	adds	r6, r3, r6
 8005e00:	6026      	str	r6, [r4, #0]
 8005e02:	e7da      	b.n	8005dba <__ssputs_r+0x5e>
 8005e04:	002a      	movs	r2, r5
 8005e06:	0038      	movs	r0, r7
 8005e08:	f000 fb96 	bl	8006538 <_realloc_r>
 8005e0c:	1e06      	subs	r6, r0, #0
 8005e0e:	d1e0      	bne.n	8005dd2 <__ssputs_r+0x76>
 8005e10:	0038      	movs	r0, r7
 8005e12:	6921      	ldr	r1, [r4, #16]
 8005e14:	f000 faae 	bl	8006374 <_free_r>
 8005e18:	e7c7      	b.n	8005daa <__ssputs_r+0x4e>
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	fffffb7f 	.word	0xfffffb7f

08005e20 <_svfiprintf_r>:
 8005e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e22:	b0a1      	sub	sp, #132	; 0x84
 8005e24:	9003      	str	r0, [sp, #12]
 8005e26:	001d      	movs	r5, r3
 8005e28:	898b      	ldrh	r3, [r1, #12]
 8005e2a:	000f      	movs	r7, r1
 8005e2c:	0016      	movs	r6, r2
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	d511      	bpl.n	8005e56 <_svfiprintf_r+0x36>
 8005e32:	690b      	ldr	r3, [r1, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10e      	bne.n	8005e56 <_svfiprintf_r+0x36>
 8005e38:	2140      	movs	r1, #64	; 0x40
 8005e3a:	f000 fb07 	bl	800644c <_malloc_r>
 8005e3e:	6038      	str	r0, [r7, #0]
 8005e40:	6138      	str	r0, [r7, #16]
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d105      	bne.n	8005e52 <_svfiprintf_r+0x32>
 8005e46:	230c      	movs	r3, #12
 8005e48:	9a03      	ldr	r2, [sp, #12]
 8005e4a:	3801      	subs	r0, #1
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	b021      	add	sp, #132	; 0x84
 8005e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e52:	2340      	movs	r3, #64	; 0x40
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	2300      	movs	r3, #0
 8005e58:	ac08      	add	r4, sp, #32
 8005e5a:	6163      	str	r3, [r4, #20]
 8005e5c:	3320      	adds	r3, #32
 8005e5e:	7663      	strb	r3, [r4, #25]
 8005e60:	3310      	adds	r3, #16
 8005e62:	76a3      	strb	r3, [r4, #26]
 8005e64:	9507      	str	r5, [sp, #28]
 8005e66:	0035      	movs	r5, r6
 8005e68:	782b      	ldrb	r3, [r5, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <_svfiprintf_r+0x52>
 8005e6e:	2b25      	cmp	r3, #37	; 0x25
 8005e70:	d147      	bne.n	8005f02 <_svfiprintf_r+0xe2>
 8005e72:	1bab      	subs	r3, r5, r6
 8005e74:	9305      	str	r3, [sp, #20]
 8005e76:	42b5      	cmp	r5, r6
 8005e78:	d00c      	beq.n	8005e94 <_svfiprintf_r+0x74>
 8005e7a:	0032      	movs	r2, r6
 8005e7c:	0039      	movs	r1, r7
 8005e7e:	9803      	ldr	r0, [sp, #12]
 8005e80:	f7ff ff6c 	bl	8005d5c <__ssputs_r>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d100      	bne.n	8005e8a <_svfiprintf_r+0x6a>
 8005e88:	e0ae      	b.n	8005fe8 <_svfiprintf_r+0x1c8>
 8005e8a:	6962      	ldr	r2, [r4, #20]
 8005e8c:	9b05      	ldr	r3, [sp, #20]
 8005e8e:	4694      	mov	ip, r2
 8005e90:	4463      	add	r3, ip
 8005e92:	6163      	str	r3, [r4, #20]
 8005e94:	782b      	ldrb	r3, [r5, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d100      	bne.n	8005e9c <_svfiprintf_r+0x7c>
 8005e9a:	e0a5      	b.n	8005fe8 <_svfiprintf_r+0x1c8>
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	4252      	negs	r2, r2
 8005ea2:	6062      	str	r2, [r4, #4]
 8005ea4:	a904      	add	r1, sp, #16
 8005ea6:	3254      	adds	r2, #84	; 0x54
 8005ea8:	1852      	adds	r2, r2, r1
 8005eaa:	1c6e      	adds	r6, r5, #1
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	60e3      	str	r3, [r4, #12]
 8005eb0:	60a3      	str	r3, [r4, #8]
 8005eb2:	7013      	strb	r3, [r2, #0]
 8005eb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	7831      	ldrb	r1, [r6, #0]
 8005eba:	4854      	ldr	r0, [pc, #336]	; (800600c <_svfiprintf_r+0x1ec>)
 8005ebc:	f000 fa32 	bl	8006324 <memchr>
 8005ec0:	1c75      	adds	r5, r6, #1
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d11f      	bne.n	8005f06 <_svfiprintf_r+0xe6>
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	06d3      	lsls	r3, r2, #27
 8005eca:	d504      	bpl.n	8005ed6 <_svfiprintf_r+0xb6>
 8005ecc:	2353      	movs	r3, #83	; 0x53
 8005ece:	a904      	add	r1, sp, #16
 8005ed0:	185b      	adds	r3, r3, r1
 8005ed2:	2120      	movs	r1, #32
 8005ed4:	7019      	strb	r1, [r3, #0]
 8005ed6:	0713      	lsls	r3, r2, #28
 8005ed8:	d504      	bpl.n	8005ee4 <_svfiprintf_r+0xc4>
 8005eda:	2353      	movs	r3, #83	; 0x53
 8005edc:	a904      	add	r1, sp, #16
 8005ede:	185b      	adds	r3, r3, r1
 8005ee0:	212b      	movs	r1, #43	; 0x2b
 8005ee2:	7019      	strb	r1, [r3, #0]
 8005ee4:	7833      	ldrb	r3, [r6, #0]
 8005ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee8:	d016      	beq.n	8005f18 <_svfiprintf_r+0xf8>
 8005eea:	0035      	movs	r5, r6
 8005eec:	2100      	movs	r1, #0
 8005eee:	200a      	movs	r0, #10
 8005ef0:	68e3      	ldr	r3, [r4, #12]
 8005ef2:	782a      	ldrb	r2, [r5, #0]
 8005ef4:	1c6e      	adds	r6, r5, #1
 8005ef6:	3a30      	subs	r2, #48	; 0x30
 8005ef8:	2a09      	cmp	r2, #9
 8005efa:	d94e      	bls.n	8005f9a <_svfiprintf_r+0x17a>
 8005efc:	2900      	cmp	r1, #0
 8005efe:	d111      	bne.n	8005f24 <_svfiprintf_r+0x104>
 8005f00:	e017      	b.n	8005f32 <_svfiprintf_r+0x112>
 8005f02:	3501      	adds	r5, #1
 8005f04:	e7b0      	b.n	8005e68 <_svfiprintf_r+0x48>
 8005f06:	4b41      	ldr	r3, [pc, #260]	; (800600c <_svfiprintf_r+0x1ec>)
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	1ac0      	subs	r0, r0, r3
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4083      	lsls	r3, r0
 8005f10:	4313      	orrs	r3, r2
 8005f12:	002e      	movs	r6, r5
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	e7ce      	b.n	8005eb6 <_svfiprintf_r+0x96>
 8005f18:	9b07      	ldr	r3, [sp, #28]
 8005f1a:	1d19      	adds	r1, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	9107      	str	r1, [sp, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	db01      	blt.n	8005f28 <_svfiprintf_r+0x108>
 8005f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f26:	e004      	b.n	8005f32 <_svfiprintf_r+0x112>
 8005f28:	425b      	negs	r3, r3
 8005f2a:	60e3      	str	r3, [r4, #12]
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	782b      	ldrb	r3, [r5, #0]
 8005f34:	2b2e      	cmp	r3, #46	; 0x2e
 8005f36:	d10a      	bne.n	8005f4e <_svfiprintf_r+0x12e>
 8005f38:	786b      	ldrb	r3, [r5, #1]
 8005f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3c:	d135      	bne.n	8005faa <_svfiprintf_r+0x18a>
 8005f3e:	9b07      	ldr	r3, [sp, #28]
 8005f40:	3502      	adds	r5, #2
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	9207      	str	r2, [sp, #28]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	db2b      	blt.n	8005fa4 <_svfiprintf_r+0x184>
 8005f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4e:	4e30      	ldr	r6, [pc, #192]	; (8006010 <_svfiprintf_r+0x1f0>)
 8005f50:	2203      	movs	r2, #3
 8005f52:	0030      	movs	r0, r6
 8005f54:	7829      	ldrb	r1, [r5, #0]
 8005f56:	f000 f9e5 	bl	8006324 <memchr>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d006      	beq.n	8005f6c <_svfiprintf_r+0x14c>
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	1b80      	subs	r0, r0, r6
 8005f62:	4083      	lsls	r3, r0
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	3501      	adds	r5, #1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	7829      	ldrb	r1, [r5, #0]
 8005f6e:	2206      	movs	r2, #6
 8005f70:	4828      	ldr	r0, [pc, #160]	; (8006014 <_svfiprintf_r+0x1f4>)
 8005f72:	1c6e      	adds	r6, r5, #1
 8005f74:	7621      	strb	r1, [r4, #24]
 8005f76:	f000 f9d5 	bl	8006324 <memchr>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d03c      	beq.n	8005ff8 <_svfiprintf_r+0x1d8>
 8005f7e:	4b26      	ldr	r3, [pc, #152]	; (8006018 <_svfiprintf_r+0x1f8>)
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d125      	bne.n	8005fd0 <_svfiprintf_r+0x1b0>
 8005f84:	2207      	movs	r2, #7
 8005f86:	9b07      	ldr	r3, [sp, #28]
 8005f88:	3307      	adds	r3, #7
 8005f8a:	4393      	bics	r3, r2
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	9307      	str	r3, [sp, #28]
 8005f90:	6963      	ldr	r3, [r4, #20]
 8005f92:	9a04      	ldr	r2, [sp, #16]
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	6163      	str	r3, [r4, #20]
 8005f98:	e765      	b.n	8005e66 <_svfiprintf_r+0x46>
 8005f9a:	4343      	muls	r3, r0
 8005f9c:	0035      	movs	r5, r6
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	189b      	adds	r3, r3, r2
 8005fa2:	e7a6      	b.n	8005ef2 <_svfiprintf_r+0xd2>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	425b      	negs	r3, r3
 8005fa8:	e7d0      	b.n	8005f4c <_svfiprintf_r+0x12c>
 8005faa:	2300      	movs	r3, #0
 8005fac:	200a      	movs	r0, #10
 8005fae:	001a      	movs	r2, r3
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	7829      	ldrb	r1, [r5, #0]
 8005fb6:	1c6e      	adds	r6, r5, #1
 8005fb8:	3930      	subs	r1, #48	; 0x30
 8005fba:	2909      	cmp	r1, #9
 8005fbc:	d903      	bls.n	8005fc6 <_svfiprintf_r+0x1a6>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0c5      	beq.n	8005f4e <_svfiprintf_r+0x12e>
 8005fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8005fc4:	e7c3      	b.n	8005f4e <_svfiprintf_r+0x12e>
 8005fc6:	4342      	muls	r2, r0
 8005fc8:	0035      	movs	r5, r6
 8005fca:	2301      	movs	r3, #1
 8005fcc:	1852      	adds	r2, r2, r1
 8005fce:	e7f1      	b.n	8005fb4 <_svfiprintf_r+0x194>
 8005fd0:	ab07      	add	r3, sp, #28
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	003a      	movs	r2, r7
 8005fd6:	0021      	movs	r1, r4
 8005fd8:	4b10      	ldr	r3, [pc, #64]	; (800601c <_svfiprintf_r+0x1fc>)
 8005fda:	9803      	ldr	r0, [sp, #12]
 8005fdc:	e000      	b.n	8005fe0 <_svfiprintf_r+0x1c0>
 8005fde:	bf00      	nop
 8005fe0:	9004      	str	r0, [sp, #16]
 8005fe2:	9b04      	ldr	r3, [sp, #16]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	d1d3      	bne.n	8005f90 <_svfiprintf_r+0x170>
 8005fe8:	89bb      	ldrh	r3, [r7, #12]
 8005fea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005fec:	065b      	lsls	r3, r3, #25
 8005fee:	d400      	bmi.n	8005ff2 <_svfiprintf_r+0x1d2>
 8005ff0:	e72d      	b.n	8005e4e <_svfiprintf_r+0x2e>
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	4240      	negs	r0, r0
 8005ff6:	e72a      	b.n	8005e4e <_svfiprintf_r+0x2e>
 8005ff8:	ab07      	add	r3, sp, #28
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	003a      	movs	r2, r7
 8005ffe:	0021      	movs	r1, r4
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <_svfiprintf_r+0x1fc>)
 8006002:	9803      	ldr	r0, [sp, #12]
 8006004:	f000 f87c 	bl	8006100 <_printf_i>
 8006008:	e7ea      	b.n	8005fe0 <_svfiprintf_r+0x1c0>
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	080066dc 	.word	0x080066dc
 8006010:	080066e2 	.word	0x080066e2
 8006014:	080066e6 	.word	0x080066e6
 8006018:	00000000 	.word	0x00000000
 800601c:	08005d5d 	.word	0x08005d5d

08006020 <_printf_common>:
 8006020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006022:	0015      	movs	r5, r2
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	688a      	ldr	r2, [r1, #8]
 8006028:	690b      	ldr	r3, [r1, #16]
 800602a:	000c      	movs	r4, r1
 800602c:	9000      	str	r0, [sp, #0]
 800602e:	4293      	cmp	r3, r2
 8006030:	da00      	bge.n	8006034 <_printf_common+0x14>
 8006032:	0013      	movs	r3, r2
 8006034:	0022      	movs	r2, r4
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	3243      	adds	r2, #67	; 0x43
 800603a:	7812      	ldrb	r2, [r2, #0]
 800603c:	2a00      	cmp	r2, #0
 800603e:	d001      	beq.n	8006044 <_printf_common+0x24>
 8006040:	3301      	adds	r3, #1
 8006042:	602b      	str	r3, [r5, #0]
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	069b      	lsls	r3, r3, #26
 8006048:	d502      	bpl.n	8006050 <_printf_common+0x30>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	3302      	adds	r3, #2
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	6822      	ldr	r2, [r4, #0]
 8006052:	2306      	movs	r3, #6
 8006054:	0017      	movs	r7, r2
 8006056:	401f      	ands	r7, r3
 8006058:	421a      	tst	r2, r3
 800605a:	d027      	beq.n	80060ac <_printf_common+0x8c>
 800605c:	0023      	movs	r3, r4
 800605e:	3343      	adds	r3, #67	; 0x43
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	1e5a      	subs	r2, r3, #1
 8006064:	4193      	sbcs	r3, r2
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	0692      	lsls	r2, r2, #26
 800606a:	d430      	bmi.n	80060ce <_printf_common+0xae>
 800606c:	0022      	movs	r2, r4
 800606e:	9901      	ldr	r1, [sp, #4]
 8006070:	9800      	ldr	r0, [sp, #0]
 8006072:	9e08      	ldr	r6, [sp, #32]
 8006074:	3243      	adds	r2, #67	; 0x43
 8006076:	47b0      	blx	r6
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d025      	beq.n	80060c8 <_printf_common+0xa8>
 800607c:	2306      	movs	r3, #6
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	682a      	ldr	r2, [r5, #0]
 8006082:	68e1      	ldr	r1, [r4, #12]
 8006084:	2500      	movs	r5, #0
 8006086:	4003      	ands	r3, r0
 8006088:	2b04      	cmp	r3, #4
 800608a:	d103      	bne.n	8006094 <_printf_common+0x74>
 800608c:	1a8d      	subs	r5, r1, r2
 800608e:	43eb      	mvns	r3, r5
 8006090:	17db      	asrs	r3, r3, #31
 8006092:	401d      	ands	r5, r3
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	6922      	ldr	r2, [r4, #16]
 8006098:	4293      	cmp	r3, r2
 800609a:	dd01      	ble.n	80060a0 <_printf_common+0x80>
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	18ed      	adds	r5, r5, r3
 80060a0:	2700      	movs	r7, #0
 80060a2:	42bd      	cmp	r5, r7
 80060a4:	d120      	bne.n	80060e8 <_printf_common+0xc8>
 80060a6:	2000      	movs	r0, #0
 80060a8:	e010      	b.n	80060cc <_printf_common+0xac>
 80060aa:	3701      	adds	r7, #1
 80060ac:	68e3      	ldr	r3, [r4, #12]
 80060ae:	682a      	ldr	r2, [r5, #0]
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	42bb      	cmp	r3, r7
 80060b4:	ddd2      	ble.n	800605c <_printf_common+0x3c>
 80060b6:	0022      	movs	r2, r4
 80060b8:	2301      	movs	r3, #1
 80060ba:	9901      	ldr	r1, [sp, #4]
 80060bc:	9800      	ldr	r0, [sp, #0]
 80060be:	9e08      	ldr	r6, [sp, #32]
 80060c0:	3219      	adds	r2, #25
 80060c2:	47b0      	blx	r6
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d1f0      	bne.n	80060aa <_printf_common+0x8a>
 80060c8:	2001      	movs	r0, #1
 80060ca:	4240      	negs	r0, r0
 80060cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060ce:	2030      	movs	r0, #48	; 0x30
 80060d0:	18e1      	adds	r1, r4, r3
 80060d2:	3143      	adds	r1, #67	; 0x43
 80060d4:	7008      	strb	r0, [r1, #0]
 80060d6:	0021      	movs	r1, r4
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	3145      	adds	r1, #69	; 0x45
 80060dc:	7809      	ldrb	r1, [r1, #0]
 80060de:	18a2      	adds	r2, r4, r2
 80060e0:	3243      	adds	r2, #67	; 0x43
 80060e2:	3302      	adds	r3, #2
 80060e4:	7011      	strb	r1, [r2, #0]
 80060e6:	e7c1      	b.n	800606c <_printf_common+0x4c>
 80060e8:	0022      	movs	r2, r4
 80060ea:	2301      	movs	r3, #1
 80060ec:	9901      	ldr	r1, [sp, #4]
 80060ee:	9800      	ldr	r0, [sp, #0]
 80060f0:	9e08      	ldr	r6, [sp, #32]
 80060f2:	321a      	adds	r2, #26
 80060f4:	47b0      	blx	r6
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	d0e6      	beq.n	80060c8 <_printf_common+0xa8>
 80060fa:	3701      	adds	r7, #1
 80060fc:	e7d1      	b.n	80060a2 <_printf_common+0x82>
	...

08006100 <_printf_i>:
 8006100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006102:	b08b      	sub	sp, #44	; 0x2c
 8006104:	9206      	str	r2, [sp, #24]
 8006106:	000a      	movs	r2, r1
 8006108:	3243      	adds	r2, #67	; 0x43
 800610a:	9307      	str	r3, [sp, #28]
 800610c:	9005      	str	r0, [sp, #20]
 800610e:	9204      	str	r2, [sp, #16]
 8006110:	7e0a      	ldrb	r2, [r1, #24]
 8006112:	000c      	movs	r4, r1
 8006114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006116:	2a78      	cmp	r2, #120	; 0x78
 8006118:	d807      	bhi.n	800612a <_printf_i+0x2a>
 800611a:	2a62      	cmp	r2, #98	; 0x62
 800611c:	d809      	bhi.n	8006132 <_printf_i+0x32>
 800611e:	2a00      	cmp	r2, #0
 8006120:	d100      	bne.n	8006124 <_printf_i+0x24>
 8006122:	e0c1      	b.n	80062a8 <_printf_i+0x1a8>
 8006124:	2a58      	cmp	r2, #88	; 0x58
 8006126:	d100      	bne.n	800612a <_printf_i+0x2a>
 8006128:	e08c      	b.n	8006244 <_printf_i+0x144>
 800612a:	0026      	movs	r6, r4
 800612c:	3642      	adds	r6, #66	; 0x42
 800612e:	7032      	strb	r2, [r6, #0]
 8006130:	e022      	b.n	8006178 <_printf_i+0x78>
 8006132:	0010      	movs	r0, r2
 8006134:	3863      	subs	r0, #99	; 0x63
 8006136:	2815      	cmp	r0, #21
 8006138:	d8f7      	bhi.n	800612a <_printf_i+0x2a>
 800613a:	f7f9 ffed 	bl	8000118 <__gnu_thumb1_case_shi>
 800613e:	0016      	.short	0x0016
 8006140:	fff6001f 	.word	0xfff6001f
 8006144:	fff6fff6 	.word	0xfff6fff6
 8006148:	001ffff6 	.word	0x001ffff6
 800614c:	fff6fff6 	.word	0xfff6fff6
 8006150:	fff6fff6 	.word	0xfff6fff6
 8006154:	003600a8 	.word	0x003600a8
 8006158:	fff6009a 	.word	0xfff6009a
 800615c:	00b9fff6 	.word	0x00b9fff6
 8006160:	0036fff6 	.word	0x0036fff6
 8006164:	fff6fff6 	.word	0xfff6fff6
 8006168:	009e      	.short	0x009e
 800616a:	0026      	movs	r6, r4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	3642      	adds	r6, #66	; 0x42
 8006170:	1d11      	adds	r1, r2, #4
 8006172:	6019      	str	r1, [r3, #0]
 8006174:	6813      	ldr	r3, [r2, #0]
 8006176:	7033      	strb	r3, [r6, #0]
 8006178:	2301      	movs	r3, #1
 800617a:	e0a7      	b.n	80062cc <_printf_i+0x1cc>
 800617c:	6808      	ldr	r0, [r1, #0]
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	1d0a      	adds	r2, r1, #4
 8006182:	0605      	lsls	r5, r0, #24
 8006184:	d50b      	bpl.n	800619e <_printf_i+0x9e>
 8006186:	680d      	ldr	r5, [r1, #0]
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	2d00      	cmp	r5, #0
 800618c:	da03      	bge.n	8006196 <_printf_i+0x96>
 800618e:	232d      	movs	r3, #45	; 0x2d
 8006190:	9a04      	ldr	r2, [sp, #16]
 8006192:	426d      	negs	r5, r5
 8006194:	7013      	strb	r3, [r2, #0]
 8006196:	4b61      	ldr	r3, [pc, #388]	; (800631c <_printf_i+0x21c>)
 8006198:	270a      	movs	r7, #10
 800619a:	9303      	str	r3, [sp, #12]
 800619c:	e01b      	b.n	80061d6 <_printf_i+0xd6>
 800619e:	680d      	ldr	r5, [r1, #0]
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	0641      	lsls	r1, r0, #25
 80061a4:	d5f1      	bpl.n	800618a <_printf_i+0x8a>
 80061a6:	b22d      	sxth	r5, r5
 80061a8:	e7ef      	b.n	800618a <_printf_i+0x8a>
 80061aa:	680d      	ldr	r5, [r1, #0]
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	1d08      	adds	r0, r1, #4
 80061b0:	6018      	str	r0, [r3, #0]
 80061b2:	062e      	lsls	r6, r5, #24
 80061b4:	d501      	bpl.n	80061ba <_printf_i+0xba>
 80061b6:	680d      	ldr	r5, [r1, #0]
 80061b8:	e003      	b.n	80061c2 <_printf_i+0xc2>
 80061ba:	066d      	lsls	r5, r5, #25
 80061bc:	d5fb      	bpl.n	80061b6 <_printf_i+0xb6>
 80061be:	680d      	ldr	r5, [r1, #0]
 80061c0:	b2ad      	uxth	r5, r5
 80061c2:	4b56      	ldr	r3, [pc, #344]	; (800631c <_printf_i+0x21c>)
 80061c4:	2708      	movs	r7, #8
 80061c6:	9303      	str	r3, [sp, #12]
 80061c8:	2a6f      	cmp	r2, #111	; 0x6f
 80061ca:	d000      	beq.n	80061ce <_printf_i+0xce>
 80061cc:	3702      	adds	r7, #2
 80061ce:	0023      	movs	r3, r4
 80061d0:	2200      	movs	r2, #0
 80061d2:	3343      	adds	r3, #67	; 0x43
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	6863      	ldr	r3, [r4, #4]
 80061d8:	60a3      	str	r3, [r4, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	db03      	blt.n	80061e6 <_printf_i+0xe6>
 80061de:	2204      	movs	r2, #4
 80061e0:	6821      	ldr	r1, [r4, #0]
 80061e2:	4391      	bics	r1, r2
 80061e4:	6021      	str	r1, [r4, #0]
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	d102      	bne.n	80061f0 <_printf_i+0xf0>
 80061ea:	9e04      	ldr	r6, [sp, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00c      	beq.n	800620a <_printf_i+0x10a>
 80061f0:	9e04      	ldr	r6, [sp, #16]
 80061f2:	0028      	movs	r0, r5
 80061f4:	0039      	movs	r1, r7
 80061f6:	f7fa f81f 	bl	8000238 <__aeabi_uidivmod>
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	3e01      	subs	r6, #1
 80061fe:	5c5b      	ldrb	r3, [r3, r1]
 8006200:	7033      	strb	r3, [r6, #0]
 8006202:	002b      	movs	r3, r5
 8006204:	0005      	movs	r5, r0
 8006206:	429f      	cmp	r7, r3
 8006208:	d9f3      	bls.n	80061f2 <_printf_i+0xf2>
 800620a:	2f08      	cmp	r7, #8
 800620c:	d109      	bne.n	8006222 <_printf_i+0x122>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	07db      	lsls	r3, r3, #31
 8006212:	d506      	bpl.n	8006222 <_printf_i+0x122>
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	6922      	ldr	r2, [r4, #16]
 8006218:	4293      	cmp	r3, r2
 800621a:	dc02      	bgt.n	8006222 <_printf_i+0x122>
 800621c:	2330      	movs	r3, #48	; 0x30
 800621e:	3e01      	subs	r6, #1
 8006220:	7033      	strb	r3, [r6, #0]
 8006222:	9b04      	ldr	r3, [sp, #16]
 8006224:	1b9b      	subs	r3, r3, r6
 8006226:	6123      	str	r3, [r4, #16]
 8006228:	9b07      	ldr	r3, [sp, #28]
 800622a:	0021      	movs	r1, r4
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	9805      	ldr	r0, [sp, #20]
 8006230:	9b06      	ldr	r3, [sp, #24]
 8006232:	aa09      	add	r2, sp, #36	; 0x24
 8006234:	f7ff fef4 	bl	8006020 <_printf_common>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d14c      	bne.n	80062d6 <_printf_i+0x1d6>
 800623c:	2001      	movs	r0, #1
 800623e:	4240      	negs	r0, r0
 8006240:	b00b      	add	sp, #44	; 0x2c
 8006242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006244:	3145      	adds	r1, #69	; 0x45
 8006246:	700a      	strb	r2, [r1, #0]
 8006248:	4a34      	ldr	r2, [pc, #208]	; (800631c <_printf_i+0x21c>)
 800624a:	9203      	str	r2, [sp, #12]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	6821      	ldr	r1, [r4, #0]
 8006250:	ca20      	ldmia	r2!, {r5}
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	0608      	lsls	r0, r1, #24
 8006256:	d516      	bpl.n	8006286 <_printf_i+0x186>
 8006258:	07cb      	lsls	r3, r1, #31
 800625a:	d502      	bpl.n	8006262 <_printf_i+0x162>
 800625c:	2320      	movs	r3, #32
 800625e:	4319      	orrs	r1, r3
 8006260:	6021      	str	r1, [r4, #0]
 8006262:	2710      	movs	r7, #16
 8006264:	2d00      	cmp	r5, #0
 8006266:	d1b2      	bne.n	80061ce <_printf_i+0xce>
 8006268:	2320      	movs	r3, #32
 800626a:	6822      	ldr	r2, [r4, #0]
 800626c:	439a      	bics	r2, r3
 800626e:	6022      	str	r2, [r4, #0]
 8006270:	e7ad      	b.n	80061ce <_printf_i+0xce>
 8006272:	2220      	movs	r2, #32
 8006274:	6809      	ldr	r1, [r1, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	6022      	str	r2, [r4, #0]
 800627a:	0022      	movs	r2, r4
 800627c:	2178      	movs	r1, #120	; 0x78
 800627e:	3245      	adds	r2, #69	; 0x45
 8006280:	7011      	strb	r1, [r2, #0]
 8006282:	4a27      	ldr	r2, [pc, #156]	; (8006320 <_printf_i+0x220>)
 8006284:	e7e1      	b.n	800624a <_printf_i+0x14a>
 8006286:	0648      	lsls	r0, r1, #25
 8006288:	d5e6      	bpl.n	8006258 <_printf_i+0x158>
 800628a:	b2ad      	uxth	r5, r5
 800628c:	e7e4      	b.n	8006258 <_printf_i+0x158>
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	680d      	ldr	r5, [r1, #0]
 8006292:	1d10      	adds	r0, r2, #4
 8006294:	6949      	ldr	r1, [r1, #20]
 8006296:	6018      	str	r0, [r3, #0]
 8006298:	6813      	ldr	r3, [r2, #0]
 800629a:	062e      	lsls	r6, r5, #24
 800629c:	d501      	bpl.n	80062a2 <_printf_i+0x1a2>
 800629e:	6019      	str	r1, [r3, #0]
 80062a0:	e002      	b.n	80062a8 <_printf_i+0x1a8>
 80062a2:	066d      	lsls	r5, r5, #25
 80062a4:	d5fb      	bpl.n	800629e <_printf_i+0x19e>
 80062a6:	8019      	strh	r1, [r3, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	9e04      	ldr	r6, [sp, #16]
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	e7bb      	b.n	8006228 <_printf_i+0x128>
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	1d11      	adds	r1, r2, #4
 80062b4:	6019      	str	r1, [r3, #0]
 80062b6:	6816      	ldr	r6, [r2, #0]
 80062b8:	2100      	movs	r1, #0
 80062ba:	0030      	movs	r0, r6
 80062bc:	6862      	ldr	r2, [r4, #4]
 80062be:	f000 f831 	bl	8006324 <memchr>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d001      	beq.n	80062ca <_printf_i+0x1ca>
 80062c6:	1b80      	subs	r0, r0, r6
 80062c8:	6060      	str	r0, [r4, #4]
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	2300      	movs	r3, #0
 80062d0:	9a04      	ldr	r2, [sp, #16]
 80062d2:	7013      	strb	r3, [r2, #0]
 80062d4:	e7a8      	b.n	8006228 <_printf_i+0x128>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	0032      	movs	r2, r6
 80062da:	9906      	ldr	r1, [sp, #24]
 80062dc:	9805      	ldr	r0, [sp, #20]
 80062de:	9d07      	ldr	r5, [sp, #28]
 80062e0:	47a8      	blx	r5
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d0aa      	beq.n	800623c <_printf_i+0x13c>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	079b      	lsls	r3, r3, #30
 80062ea:	d415      	bmi.n	8006318 <_printf_i+0x218>
 80062ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ee:	68e0      	ldr	r0, [r4, #12]
 80062f0:	4298      	cmp	r0, r3
 80062f2:	daa5      	bge.n	8006240 <_printf_i+0x140>
 80062f4:	0018      	movs	r0, r3
 80062f6:	e7a3      	b.n	8006240 <_printf_i+0x140>
 80062f8:	0022      	movs	r2, r4
 80062fa:	2301      	movs	r3, #1
 80062fc:	9906      	ldr	r1, [sp, #24]
 80062fe:	9805      	ldr	r0, [sp, #20]
 8006300:	9e07      	ldr	r6, [sp, #28]
 8006302:	3219      	adds	r2, #25
 8006304:	47b0      	blx	r6
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	d098      	beq.n	800623c <_printf_i+0x13c>
 800630a:	3501      	adds	r5, #1
 800630c:	68e3      	ldr	r3, [r4, #12]
 800630e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	42ab      	cmp	r3, r5
 8006314:	dcf0      	bgt.n	80062f8 <_printf_i+0x1f8>
 8006316:	e7e9      	b.n	80062ec <_printf_i+0x1ec>
 8006318:	2500      	movs	r5, #0
 800631a:	e7f7      	b.n	800630c <_printf_i+0x20c>
 800631c:	080066ed 	.word	0x080066ed
 8006320:	080066fe 	.word	0x080066fe

08006324 <memchr>:
 8006324:	b2c9      	uxtb	r1, r1
 8006326:	1882      	adds	r2, r0, r2
 8006328:	4290      	cmp	r0, r2
 800632a:	d101      	bne.n	8006330 <memchr+0xc>
 800632c:	2000      	movs	r0, #0
 800632e:	4770      	bx	lr
 8006330:	7803      	ldrb	r3, [r0, #0]
 8006332:	428b      	cmp	r3, r1
 8006334:	d0fb      	beq.n	800632e <memchr+0xa>
 8006336:	3001      	adds	r0, #1
 8006338:	e7f6      	b.n	8006328 <memchr+0x4>

0800633a <memcpy>:
 800633a:	2300      	movs	r3, #0
 800633c:	b510      	push	{r4, lr}
 800633e:	429a      	cmp	r2, r3
 8006340:	d100      	bne.n	8006344 <memcpy+0xa>
 8006342:	bd10      	pop	{r4, pc}
 8006344:	5ccc      	ldrb	r4, [r1, r3]
 8006346:	54c4      	strb	r4, [r0, r3]
 8006348:	3301      	adds	r3, #1
 800634a:	e7f8      	b.n	800633e <memcpy+0x4>

0800634c <memmove>:
 800634c:	b510      	push	{r4, lr}
 800634e:	4288      	cmp	r0, r1
 8006350:	d902      	bls.n	8006358 <memmove+0xc>
 8006352:	188b      	adds	r3, r1, r2
 8006354:	4298      	cmp	r0, r3
 8006356:	d303      	bcc.n	8006360 <memmove+0x14>
 8006358:	2300      	movs	r3, #0
 800635a:	e007      	b.n	800636c <memmove+0x20>
 800635c:	5c8b      	ldrb	r3, [r1, r2]
 800635e:	5483      	strb	r3, [r0, r2]
 8006360:	3a01      	subs	r2, #1
 8006362:	d2fb      	bcs.n	800635c <memmove+0x10>
 8006364:	bd10      	pop	{r4, pc}
 8006366:	5ccc      	ldrb	r4, [r1, r3]
 8006368:	54c4      	strb	r4, [r0, r3]
 800636a:	3301      	adds	r3, #1
 800636c:	429a      	cmp	r2, r3
 800636e:	d1fa      	bne.n	8006366 <memmove+0x1a>
 8006370:	e7f8      	b.n	8006364 <memmove+0x18>
	...

08006374 <_free_r>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	0005      	movs	r5, r0
 8006378:	2900      	cmp	r1, #0
 800637a:	d010      	beq.n	800639e <_free_r+0x2a>
 800637c:	1f0c      	subs	r4, r1, #4
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	da00      	bge.n	8006386 <_free_r+0x12>
 8006384:	18e4      	adds	r4, r4, r3
 8006386:	0028      	movs	r0, r5
 8006388:	f000 f918 	bl	80065bc <__malloc_lock>
 800638c:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <_free_r+0x90>)
 800638e:	6813      	ldr	r3, [r2, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <_free_r+0x2c>
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	6014      	str	r4, [r2, #0]
 8006398:	0028      	movs	r0, r5
 800639a:	f000 f917 	bl	80065cc <__malloc_unlock>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d908      	bls.n	80063b6 <_free_r+0x42>
 80063a4:	6821      	ldr	r1, [r4, #0]
 80063a6:	1860      	adds	r0, r4, r1
 80063a8:	4283      	cmp	r3, r0
 80063aa:	d1f3      	bne.n	8006394 <_free_r+0x20>
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	1841      	adds	r1, r0, r1
 80063b2:	6021      	str	r1, [r4, #0]
 80063b4:	e7ee      	b.n	8006394 <_free_r+0x20>
 80063b6:	001a      	movs	r2, r3
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <_free_r+0x4e>
 80063be:	42a3      	cmp	r3, r4
 80063c0:	d9f9      	bls.n	80063b6 <_free_r+0x42>
 80063c2:	6811      	ldr	r1, [r2, #0]
 80063c4:	1850      	adds	r0, r2, r1
 80063c6:	42a0      	cmp	r0, r4
 80063c8:	d10b      	bne.n	80063e2 <_free_r+0x6e>
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	1809      	adds	r1, r1, r0
 80063ce:	1850      	adds	r0, r2, r1
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	4283      	cmp	r3, r0
 80063d4:	d1e0      	bne.n	8006398 <_free_r+0x24>
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	1841      	adds	r1, r0, r1
 80063dc:	6011      	str	r1, [r2, #0]
 80063de:	6053      	str	r3, [r2, #4]
 80063e0:	e7da      	b.n	8006398 <_free_r+0x24>
 80063e2:	42a0      	cmp	r0, r4
 80063e4:	d902      	bls.n	80063ec <_free_r+0x78>
 80063e6:	230c      	movs	r3, #12
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	e7d5      	b.n	8006398 <_free_r+0x24>
 80063ec:	6821      	ldr	r1, [r4, #0]
 80063ee:	1860      	adds	r0, r4, r1
 80063f0:	4283      	cmp	r3, r0
 80063f2:	d103      	bne.n	80063fc <_free_r+0x88>
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	1841      	adds	r1, r0, r1
 80063fa:	6021      	str	r1, [r4, #0]
 80063fc:	6063      	str	r3, [r4, #4]
 80063fe:	6054      	str	r4, [r2, #4]
 8006400:	e7ca      	b.n	8006398 <_free_r+0x24>
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	2000026c 	.word	0x2000026c

08006408 <sbrk_aligned>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	4e0f      	ldr	r6, [pc, #60]	; (8006448 <sbrk_aligned+0x40>)
 800640c:	000d      	movs	r5, r1
 800640e:	6831      	ldr	r1, [r6, #0]
 8006410:	0004      	movs	r4, r0
 8006412:	2900      	cmp	r1, #0
 8006414:	d102      	bne.n	800641c <sbrk_aligned+0x14>
 8006416:	f000 f8bf 	bl	8006598 <_sbrk_r>
 800641a:	6030      	str	r0, [r6, #0]
 800641c:	0029      	movs	r1, r5
 800641e:	0020      	movs	r0, r4
 8006420:	f000 f8ba 	bl	8006598 <_sbrk_r>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d00a      	beq.n	800643e <sbrk_aligned+0x36>
 8006428:	2303      	movs	r3, #3
 800642a:	1cc5      	adds	r5, r0, #3
 800642c:	439d      	bics	r5, r3
 800642e:	42a8      	cmp	r0, r5
 8006430:	d007      	beq.n	8006442 <sbrk_aligned+0x3a>
 8006432:	1a29      	subs	r1, r5, r0
 8006434:	0020      	movs	r0, r4
 8006436:	f000 f8af 	bl	8006598 <_sbrk_r>
 800643a:	1c43      	adds	r3, r0, #1
 800643c:	d101      	bne.n	8006442 <sbrk_aligned+0x3a>
 800643e:	2501      	movs	r5, #1
 8006440:	426d      	negs	r5, r5
 8006442:	0028      	movs	r0, r5
 8006444:	bd70      	pop	{r4, r5, r6, pc}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	20000270 	.word	0x20000270

0800644c <_malloc_r>:
 800644c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800644e:	2203      	movs	r2, #3
 8006450:	1ccb      	adds	r3, r1, #3
 8006452:	4393      	bics	r3, r2
 8006454:	3308      	adds	r3, #8
 8006456:	0006      	movs	r6, r0
 8006458:	001f      	movs	r7, r3
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d232      	bcs.n	80064c4 <_malloc_r+0x78>
 800645e:	270c      	movs	r7, #12
 8006460:	42b9      	cmp	r1, r7
 8006462:	d831      	bhi.n	80064c8 <_malloc_r+0x7c>
 8006464:	0030      	movs	r0, r6
 8006466:	f000 f8a9 	bl	80065bc <__malloc_lock>
 800646a:	4d32      	ldr	r5, [pc, #200]	; (8006534 <_malloc_r+0xe8>)
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	001c      	movs	r4, r3
 8006470:	2c00      	cmp	r4, #0
 8006472:	d12e      	bne.n	80064d2 <_malloc_r+0x86>
 8006474:	0039      	movs	r1, r7
 8006476:	0030      	movs	r0, r6
 8006478:	f7ff ffc6 	bl	8006408 <sbrk_aligned>
 800647c:	0004      	movs	r4, r0
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	d11e      	bne.n	80064c0 <_malloc_r+0x74>
 8006482:	682c      	ldr	r4, [r5, #0]
 8006484:	0025      	movs	r5, r4
 8006486:	2d00      	cmp	r5, #0
 8006488:	d14a      	bne.n	8006520 <_malloc_r+0xd4>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	0029      	movs	r1, r5
 800648e:	18e3      	adds	r3, r4, r3
 8006490:	0030      	movs	r0, r6
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	f000 f880 	bl	8006598 <_sbrk_r>
 8006498:	9b01      	ldr	r3, [sp, #4]
 800649a:	4283      	cmp	r3, r0
 800649c:	d143      	bne.n	8006526 <_malloc_r+0xda>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	3703      	adds	r7, #3
 80064a2:	1aff      	subs	r7, r7, r3
 80064a4:	2303      	movs	r3, #3
 80064a6:	439f      	bics	r7, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	2f0c      	cmp	r7, #12
 80064ac:	d200      	bcs.n	80064b0 <_malloc_r+0x64>
 80064ae:	270c      	movs	r7, #12
 80064b0:	0039      	movs	r1, r7
 80064b2:	0030      	movs	r0, r6
 80064b4:	f7ff ffa8 	bl	8006408 <sbrk_aligned>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d034      	beq.n	8006526 <_malloc_r+0xda>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	19df      	adds	r7, r3, r7
 80064c0:	6027      	str	r7, [r4, #0]
 80064c2:	e013      	b.n	80064ec <_malloc_r+0xa0>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dacb      	bge.n	8006460 <_malloc_r+0x14>
 80064c8:	230c      	movs	r3, #12
 80064ca:	2500      	movs	r5, #0
 80064cc:	6033      	str	r3, [r6, #0]
 80064ce:	0028      	movs	r0, r5
 80064d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	1bd1      	subs	r1, r2, r7
 80064d6:	d420      	bmi.n	800651a <_malloc_r+0xce>
 80064d8:	290b      	cmp	r1, #11
 80064da:	d917      	bls.n	800650c <_malloc_r+0xc0>
 80064dc:	19e2      	adds	r2, r4, r7
 80064de:	6027      	str	r7, [r4, #0]
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	d111      	bne.n	8006508 <_malloc_r+0xbc>
 80064e4:	602a      	str	r2, [r5, #0]
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	6011      	str	r1, [r2, #0]
 80064ea:	6053      	str	r3, [r2, #4]
 80064ec:	0030      	movs	r0, r6
 80064ee:	0025      	movs	r5, r4
 80064f0:	f000 f86c 	bl	80065cc <__malloc_unlock>
 80064f4:	2207      	movs	r2, #7
 80064f6:	350b      	adds	r5, #11
 80064f8:	1d23      	adds	r3, r4, #4
 80064fa:	4395      	bics	r5, r2
 80064fc:	1aea      	subs	r2, r5, r3
 80064fe:	429d      	cmp	r5, r3
 8006500:	d0e5      	beq.n	80064ce <_malloc_r+0x82>
 8006502:	1b5b      	subs	r3, r3, r5
 8006504:	50a3      	str	r3, [r4, r2]
 8006506:	e7e2      	b.n	80064ce <_malloc_r+0x82>
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	e7ec      	b.n	80064e6 <_malloc_r+0x9a>
 800650c:	6862      	ldr	r2, [r4, #4]
 800650e:	42a3      	cmp	r3, r4
 8006510:	d101      	bne.n	8006516 <_malloc_r+0xca>
 8006512:	602a      	str	r2, [r5, #0]
 8006514:	e7ea      	b.n	80064ec <_malloc_r+0xa0>
 8006516:	605a      	str	r2, [r3, #4]
 8006518:	e7e8      	b.n	80064ec <_malloc_r+0xa0>
 800651a:	0023      	movs	r3, r4
 800651c:	6864      	ldr	r4, [r4, #4]
 800651e:	e7a7      	b.n	8006470 <_malloc_r+0x24>
 8006520:	002c      	movs	r4, r5
 8006522:	686d      	ldr	r5, [r5, #4]
 8006524:	e7af      	b.n	8006486 <_malloc_r+0x3a>
 8006526:	230c      	movs	r3, #12
 8006528:	0030      	movs	r0, r6
 800652a:	6033      	str	r3, [r6, #0]
 800652c:	f000 f84e 	bl	80065cc <__malloc_unlock>
 8006530:	e7cd      	b.n	80064ce <_malloc_r+0x82>
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	2000026c 	.word	0x2000026c

08006538 <_realloc_r>:
 8006538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800653a:	0007      	movs	r7, r0
 800653c:	000e      	movs	r6, r1
 800653e:	0014      	movs	r4, r2
 8006540:	2900      	cmp	r1, #0
 8006542:	d105      	bne.n	8006550 <_realloc_r+0x18>
 8006544:	0011      	movs	r1, r2
 8006546:	f7ff ff81 	bl	800644c <_malloc_r>
 800654a:	0005      	movs	r5, r0
 800654c:	0028      	movs	r0, r5
 800654e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006550:	2a00      	cmp	r2, #0
 8006552:	d103      	bne.n	800655c <_realloc_r+0x24>
 8006554:	f7ff ff0e 	bl	8006374 <_free_r>
 8006558:	0025      	movs	r5, r4
 800655a:	e7f7      	b.n	800654c <_realloc_r+0x14>
 800655c:	f000 f83e 	bl	80065dc <_malloc_usable_size_r>
 8006560:	9001      	str	r0, [sp, #4]
 8006562:	4284      	cmp	r4, r0
 8006564:	d803      	bhi.n	800656e <_realloc_r+0x36>
 8006566:	0035      	movs	r5, r6
 8006568:	0843      	lsrs	r3, r0, #1
 800656a:	42a3      	cmp	r3, r4
 800656c:	d3ee      	bcc.n	800654c <_realloc_r+0x14>
 800656e:	0021      	movs	r1, r4
 8006570:	0038      	movs	r0, r7
 8006572:	f7ff ff6b 	bl	800644c <_malloc_r>
 8006576:	1e05      	subs	r5, r0, #0
 8006578:	d0e8      	beq.n	800654c <_realloc_r+0x14>
 800657a:	9b01      	ldr	r3, [sp, #4]
 800657c:	0022      	movs	r2, r4
 800657e:	429c      	cmp	r4, r3
 8006580:	d900      	bls.n	8006584 <_realloc_r+0x4c>
 8006582:	001a      	movs	r2, r3
 8006584:	0031      	movs	r1, r6
 8006586:	0028      	movs	r0, r5
 8006588:	f7ff fed7 	bl	800633a <memcpy>
 800658c:	0031      	movs	r1, r6
 800658e:	0038      	movs	r0, r7
 8006590:	f7ff fef0 	bl	8006374 <_free_r>
 8006594:	e7da      	b.n	800654c <_realloc_r+0x14>
	...

08006598 <_sbrk_r>:
 8006598:	2300      	movs	r3, #0
 800659a:	b570      	push	{r4, r5, r6, lr}
 800659c:	4d06      	ldr	r5, [pc, #24]	; (80065b8 <_sbrk_r+0x20>)
 800659e:	0004      	movs	r4, r0
 80065a0:	0008      	movs	r0, r1
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	f7fb fb9e 	bl	8001ce4 <_sbrk>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d103      	bne.n	80065b4 <_sbrk_r+0x1c>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d000      	beq.n	80065b4 <_sbrk_r+0x1c>
 80065b2:	6023      	str	r3, [r4, #0]
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	20000274 	.word	0x20000274

080065bc <__malloc_lock>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	4802      	ldr	r0, [pc, #8]	; (80065c8 <__malloc_lock+0xc>)
 80065c0:	f000 f814 	bl	80065ec <__retarget_lock_acquire_recursive>
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	20000278 	.word	0x20000278

080065cc <__malloc_unlock>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	4802      	ldr	r0, [pc, #8]	; (80065d8 <__malloc_unlock+0xc>)
 80065d0:	f000 f80d 	bl	80065ee <__retarget_lock_release_recursive>
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	20000278 	.word	0x20000278

080065dc <_malloc_usable_size_r>:
 80065dc:	1f0b      	subs	r3, r1, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	1f18      	subs	r0, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da01      	bge.n	80065ea <_malloc_usable_size_r+0xe>
 80065e6:	580b      	ldr	r3, [r1, r0]
 80065e8:	18c0      	adds	r0, r0, r3
 80065ea:	4770      	bx	lr

080065ec <__retarget_lock_acquire_recursive>:
 80065ec:	4770      	bx	lr

080065ee <__retarget_lock_release_recursive>:
 80065ee:	4770      	bx	lr

080065f0 <_init>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr

080065fc <_fini>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr
